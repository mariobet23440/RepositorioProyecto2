
Proyecto2_Receptor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  000002e8  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800242  00800242  000004be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6e  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000821  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060a  00000000  00000000  00001a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  0000205c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c9  00000000  00000000  00002647  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 94 00 	call	0x128	; 0x128 <main>
  9e:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_timer1>:
#include "LibreriaTimer1PWM.h"

// Inicialización de Timer1
void init_timer1(void)
{
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Fast PWM, OC1A y OC1B no invertido
  a6:	e0 e8       	ldi	r30, 0x80	; 128
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 6a       	ori	r24, 0xA2	; 162
  ae:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Prescaler de 8, Fast PWM
  b0:	e1 e8       	ldi	r30, 0x81	; 129
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8a 61       	ori	r24, 0x1A	; 26
  b8:	80 83       	st	Z, r24
	ICR1 = 39999;							// Establecer TOP a 39999 (Frecuencia de 50 Hz, 20ms)
  ba:	8f e3       	ldi	r24, 0x3F	; 63
  bc:	9c e9       	ldi	r25, 0x9C	; 156
  be:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  c2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << DDB1) | (1 << DDB2);		// Configurar PB1 y PB2 como salida (OC1A y OC1B)
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	86 60       	ori	r24, 0x06	; 6
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	08 95       	ret

000000ce <UART_init>:
#include "Libreria_UART.h"

// Inicialización UART a 9600 baudios
void UART_init(void) {
	// Configura TX como salida, RX como entrada
	DDRD |= (1 << PD1);   // TX
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD0);  // RX
  d4:	8a b1       	in	r24, 0x0a	; 10
  d6:	8e 7f       	andi	r24, 0xFE	; 254
  d8:	8a b9       	out	0x0a, r24	; 10

	// Configura baud rate a 9600 (F_CPU = 16 MHz)
	// UBRR = (F_CPU / (16 * BAUD)) - 1 = 103
	UBRR0 = 103;
  da:	87 e6       	ldi	r24, 0x67	; 103
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita recepción, transmisión e interrupción de recepción
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  e6:	88 e9       	ldi	r24, 0x98	; 152
  e8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8 bits, 1 bit de stop, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  f2:	08 95       	ret

000000f4 <UART_sendChar>:
}

// Enviar un carácter
void UART_sendChar(char c) {
	while (!(UCSR0A & (1 << UDRE0)));  // Espera buffer libre
  f4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f8:	95 ff       	sbrs	r25, 5
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <UART_sendChar>
	UDR0 = c;
  fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 100:	08 95       	ret

00000102 <UART_sendString>:
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
	while (*str)
 108:	03 c0       	rjmp	.+6      	; 0x110 <UART_sendString+0xe>
	{
		UART_sendChar(*str++);
 10a:	21 96       	adiw	r28, 0x01	; 1
 10c:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
	UDR0 = c;
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
	while (*str)
 110:	88 81       	ld	r24, Y
 112:	81 11       	cpse	r24, r1
 114:	fa cf       	rjmp	.-12     	; 0x10a <UART_sendString+0x8>
	{
		UART_sendChar(*str++);
	}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <setup>:
/************************************************************************/
/* SETUP Y MAINLOOP                                                                     */
/************************************************************************/
void setup(void)
{
	UART_init();
 11c:	0e 94 67 00 	call	0xce	; 0xce <UART_init>
	init_timer1();
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <init_timer1>
	//init_timer2();
	sei();  // Habilitar interrupciones globales
 124:	78 94       	sei
 126:	08 95       	ret

00000128 <main>:
}

int main(void)
{
	setup();
 128:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
	UART_sendString("PROGRAMACIÓN DE MICROCONTROLADORES - PROYECTO 2 - RECEPTOR \r\n");
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
	UART_sendString("Mostrando caracteres de envío... \r\n");
 134:	82 e4       	ldi	r24, 0x42	; 66
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
 13c:	ff cf       	rjmp	.-2      	; 0x13c <main+0x14>

0000013e <__vector_18>:

/************************************************************************/
/* INTERRUPCIÓN POR RECEPCIÓN UART                                      */
/************************************************************************/
ISR(USART_RX_vect)
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	// Guardar caracter (Y limpiar el buffer)
	char data = UDR0;
 164:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	//UART_sendChar(data);
	
	// Inicializar framing (Lo que tiene más protección)
	if ((data == RXTX_START) && (!reception_started) && (reception_ended))
 168:	c5 3a       	cpi	r28, 0xA5	; 165
 16a:	19 f5       	brne	.+70     	; 0x1b2 <__vector_18+0x74>
 16c:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <reception_started>
 170:	81 11       	cpse	r24, r1
 172:	1f c0       	rjmp	.+62     	; 0x1b2 <__vector_18+0x74>
 174:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <reception_ended>
 178:	88 23       	and	r24, r24
 17a:	d9 f0       	breq	.+54     	; 0x1b2 <__vector_18+0x74>
	{
		// Bajar la bandera de fin de framing
		reception_ended = 0;
 17c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <reception_ended>
		
		// Levantar la bandera de inicio de framing
		reception_started = 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <reception_started>
		
		// Limpiar todos los valores del arreglo
		for (uint8_t i = 0; i < 3; i++) {
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	06 c0       	rjmp	.+12     	; 0x196 <__vector_18+0x58>
			received_data[i] = 0;
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	e0 50       	subi	r30, 0x00	; 0
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	10 82       	st	Z, r1
		
		// Levantar la bandera de inicio de framing
		reception_started = 1;
		
		// Limpiar todos los valores del arreglo
		for (uint8_t i = 0; i < 3; i++) {
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	c0 f3       	brcs	.-16     	; 0x18a <__vector_18+0x4c>
			received_data[i] = 0;
		}
		
		// Indicador de prueba
		UART_sendString("1. Marca de Inicio de Frame: ");
 19a:	86 e6       	ldi	r24, 0x66	; 102
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(data);
 1a2:	8c 2f       	mov	r24, r28
 1a4:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("\r\n");
 1a8:	83 e6       	ldi	r24, 0x63	; 99
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
 1b0:	86 c0       	rjmp	.+268    	; 0x2be <__vector_18+0x180>
	}
	
	// Recepción del primer byte de instrucción
	else if(reception_started)
 1b2:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <reception_started>
 1b6:	88 23       	and	r24, r24
 1b8:	99 f0       	breq	.+38     	; 0x1e0 <__vector_18+0xa2>
	{
		// Bajar la bandera de inicio de framing
		reception_started = 0;
 1ba:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <reception_started>
		
		// Guardar el dato en la posición 0 del arreglo
		received_data[0] = data;
 1be:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		// Levantar la bandera de recepción del primer byte de instrucción 
		ins_byte1_received = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <ins_byte1_received>
		
		// Indicador de prueba
		UART_sendString("Primer Caracter de Instrucción Recibido: ");
 1c8:	84 e8       	ldi	r24, 0x84	; 132
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(data);
 1d0:	8c 2f       	mov	r24, r28
 1d2:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("\r\n");
 1d6:	83 e6       	ldi	r24, 0x63	; 99
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
 1de:	6f c0       	rjmp	.+222    	; 0x2be <__vector_18+0x180>
	}
	
	// Recepción del segundo byte de instrucción
	else if(ins_byte1_received)
 1e0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <ins_byte1_received>
 1e4:	88 23       	and	r24, r24
 1e6:	99 f0       	breq	.+38     	; 0x20e <__vector_18+0xd0>
	{
		// Bajar la bandera de recepción del primer byte de instrucción
		ins_byte1_received = 0;
 1e8:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <ins_byte1_received>
		
		// Guardar el dato en la posición 1 del arreglo
		received_data[1] = data;
 1ec:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		
		// Levantar la bandera de recepción del segundo byte de instrucción
		ins_byte2_received = 1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <ins_byte2_received>
		
		// Indicador de prueba
		UART_sendString("Segundo Caracter de Instrucción Recibido: ");
 1f6:	8e ea       	ldi	r24, 0xAE	; 174
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(data);
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("\r\n");
 204:	83 e6       	ldi	r24, 0x63	; 99
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
 20c:	58 c0       	rjmp	.+176    	; 0x2be <__vector_18+0x180>
	}
	
	// Recepción de caracter de dato
	else if(ins_byte2_received)
 20e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <ins_byte2_received>
 212:	88 23       	and	r24, r24
 214:	99 f0       	breq	.+38     	; 0x23c <__vector_18+0xfe>
	{
		// Bajar la bandera de recepción del segundo byte de instrucción
		ins_byte2_received = 0;
 216:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <ins_byte2_received>
		
		// Guardar el byte en la posición 2 del arreglo
		received_data[2] = data;
 21a:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
		
		// Levantar la bandera de caracter de dato recibido
		data_byte_received = 1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
		
		// Indicador de prueba
		UART_sendString("Caracter de Datos Recibido: ");
 224:	89 ed       	ldi	r24, 0xD9	; 217
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(data);
 22c:	8c 2f       	mov	r24, r28
 22e:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("\r\n");
 232:	83 e6       	ldi	r24, 0x63	; 99
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
 23a:	41 c0       	rjmp	.+130    	; 0x2be <__vector_18+0x180>
	}
	
	// Fin de transmisión
	else if((data == RXTX_END) && (data_byte_received))
 23c:	ca 35       	cpi	r28, 0x5A	; 90
 23e:	a1 f5       	brne	.+104    	; 0x2a8 <__vector_18+0x16a>
 240:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 244:	88 23       	and	r24, r24
 246:	81 f1       	breq	.+96     	; 0x2a8 <__vector_18+0x16a>
	{
		// Bajar la bandera de recepción del byte de dato
		data_byte_received = 0;
 248:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <__data_end>
		
		// Levantar la bandera de recepción terminada
		reception_ended = 1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <reception_ended>
		
		// Indicador de prueba
		UART_sendString("Fin de Frame de Información: ");
 252:	86 ef       	ldi	r24, 0xF6	; 246
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(data);
 25a:	8c 2f       	mov	r24, r28
 25c:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("\r\n");
 260:	83 e6       	ldi	r24, 0x63	; 99
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendString("Arreglo de Datos: [");
 268:	84 e1       	ldi	r24, 0x14	; 20
 26a:	92 e0       	ldi	r25, 0x02	; 2
 26c:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(received_data[0]);
 270:	c0 e0       	ldi	r28, 0x00	; 0
 272:	d1 e0       	ldi	r29, 0x01	; 1
 274:	88 81       	ld	r24, Y
 276:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString(", ");
 27a:	88 e2       	ldi	r24, 0x28	; 40
 27c:	92 e0       	ldi	r25, 0x02	; 2
 27e:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(received_data[1]);
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString(", ");
 288:	88 e2       	ldi	r24, 0x28	; 40
 28a:	92 e0       	ldi	r25, 0x02	; 2
 28c:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(received_data[2]);
 290:	8a 81       	ldd	r24, Y+2	; 0x02
 292:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("] ");
 296:	8b e2       	ldi	r24, 0x2B	; 43
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendString("\r\n");
 29e:	83 e6       	ldi	r24, 0x63	; 99
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
 2a6:	0b c0       	rjmp	.+22     	; 0x2be <__vector_18+0x180>
	}
	else
	{
		// Indicador de prueba
		UART_sendString("Caracter Inválido: ");
 2a8:	8e e2       	ldi	r24, 0x2E	; 46
 2aa:	92 e0       	ldi	r25, 0x02	; 2
 2ac:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(data);
 2b0:	8c 2f       	mov	r24, r28
 2b2:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("\r\n");
 2b6:	83 e6       	ldi	r24, 0x63	; 99
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
	}
	
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
