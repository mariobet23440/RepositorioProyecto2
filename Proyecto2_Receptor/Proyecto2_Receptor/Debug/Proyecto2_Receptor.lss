
Proyecto2_Receptor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002fa  00800100  00000400  00000494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000400  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008003fa  008003fa  0000078e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f82  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000831  00000000  00000000  00001822  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077c  00000000  00000000  00002053  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  000027d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000527  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029d  00000000  00000000  00002e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3f       	cpi	r26, 0xFA	; 250
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	aa ef       	ldi	r26, 0xFA	; 250
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3f       	cpi	r26, 0xFE	; 254
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 20 01 	call	0x240	; 0x240 <main>
  9e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_timer1>:
#include "LibreriaTimer1PWM.h"

// Inicialización de Timer1
void init_timer1(void)
{
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Fast PWM, OC1A y OC1B no invertido
  a6:	e0 e8       	ldi	r30, 0x80	; 128
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 6a       	ori	r24, 0xA2	; 162
  ae:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Prescaler de 8, Fast PWM
  b0:	e1 e8       	ldi	r30, 0x81	; 129
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8a 61       	ori	r24, 0x1A	; 26
  b8:	80 83       	st	Z, r24
	ICR1 = 39999;							// Establecer TOP a 39999 (Frecuencia de 50 Hz, 20ms)
  ba:	8f e3       	ldi	r24, 0x3F	; 63
  bc:	9c e9       	ldi	r25, 0x9C	; 156
  be:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  c2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << DDB1) | (1 << DDB2);		// Configurar PB1 y PB2 como salida (OC1A y OC1B)
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	86 60       	ori	r24, 0x06	; 6
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	08 95       	ret

000000ce <UART_init>:
#include "Libreria_UART.h"

// Inicialización UART a 9600 baudios
void UART_init(void) {
	// Configura TX como salida, RX como entrada
	DDRD |= (1 << PD1);   // TX
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD0);  // RX
  d4:	8a b1       	in	r24, 0x0a	; 10
  d6:	8e 7f       	andi	r24, 0xFE	; 254
  d8:	8a b9       	out	0x0a, r24	; 10

	// Configura baud rate a 9600 (F_CPU = 16 MHz)
	// UBRR = (F_CPU / (16 * BAUD)) - 1 = 103
	UBRR0 = 103;
  da:	87 e6       	ldi	r24, 0x67	; 103
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita recepción, transmisión e interrupción de recepción
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  e6:	88 e9       	ldi	r24, 0x98	; 152
  e8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8 bits, 1 bit de stop, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  f2:	08 95       	ret

000000f4 <UART_sendChar>:
}

// Enviar un carácter
void UART_sendChar(char c) {
	while (!(UCSR0A & (1 << UDRE0)));  // Espera buffer libre
  f4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f8:	95 ff       	sbrs	r25, 5
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <UART_sendChar>
	UDR0 = c;
  fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 100:	08 95       	ret

00000102 <UART_sendString>:
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
	while (*str)
 108:	03 c0       	rjmp	.+6      	; 0x110 <UART_sendString+0xe>
	{
		UART_sendChar(*str++);
 10a:	21 96       	adiw	r28, 0x01	; 1
 10c:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
	UDR0 = c;
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
	while (*str)
 110:	88 81       	ld	r24, Y
 112:	81 11       	cpse	r24, r1
 114:	fa cf       	rjmp	.-12     	; 0x10a <UART_sendString+0x8>
	{
		UART_sendChar(*str++);
	}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <setup>:
/************************************************************************/
/* SETUP Y MAINLOOP                                                     */
/************************************************************************/
void setup(void)
{
	UART_init();
 11c:	0e 94 67 00 	call	0xce	; 0xce <UART_init>
	init_timer1();
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <init_timer1>
	//init_timer2();
	sei();  // Habilitar interrupciones globales
 124:	78 94       	sei
 126:	08 95       	ret

00000128 <process_instruction>:
/************************************************************************/
/* RUTINAS NO DE INTERRUPCIÓN                                           */
/************************************************************************/
// Procesar Instrucciones (A partir del arreglo de datos recibido)
void process_instruction(void)
{
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
	// Número de 16 bits de caracteres de instrucción 
	uint16_t	instruction = ((uint16_t)received_data[0] << 8) | received_data[1];
 12e:	e0 e0       	ldi	r30, 0x00	; 0
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	c0 81       	ld	r28, Z
 134:	d0 e0       	ldi	r29, 0x00	; 0
 136:	dc 2f       	mov	r29, r28
 138:	cc 27       	eor	r28, r28
 13a:	81 81       	ldd	r24, Z+1	; 0x01
 13c:	c8 2b       	or	r28, r24
	
	// Caracter de datos 
	char		data_char = received_data[2];
 13e:	12 81       	ldd	r17, Z+2	; 0x02
	
	// Logs de prueba para monitor serial
	UART_sendString("Instrucción recibida: ");
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
	
	switch(instruction)
 148:	c5 35       	cpi	r28, 0x55	; 85
 14a:	85 e5       	ldi	r24, 0x55	; 85
 14c:	d8 07       	cpc	r29, r24
 14e:	69 f0       	breq	.+26     	; 0x16a <process_instruction+0x42>
 150:	20 f4       	brcc	.+8      	; 0x15a <process_instruction+0x32>
 152:	c3 33       	cpi	r28, 0x33	; 51
 154:	d3 43       	sbci	r29, 0x33	; 51
 156:	99 f0       	breq	.+38     	; 0x17e <process_instruction+0x56>
 158:	1c c0       	rjmp	.+56     	; 0x192 <process_instruction+0x6a>
 15a:	ca 3a       	cpi	r28, 0xAA	; 170
 15c:	8a ea       	ldi	r24, 0xAA	; 170
 15e:	d8 07       	cpc	r29, r24
 160:	49 f0       	breq	.+18     	; 0x174 <process_instruction+0x4c>
 162:	cc 3c       	cpi	r28, 0xCC	; 204
 164:	dc 4c       	sbci	r29, 0xCC	; 204
 166:	81 f0       	breq	.+32     	; 0x188 <process_instruction+0x60>
 168:	14 c0       	rjmp	.+40     	; 0x192 <process_instruction+0x6a>
	{
		case MOTORREDUCTOR_X:
		UART_sendString("MOTORREDUCTOR X - ");		
 16a:	8b e1       	ldi	r24, 0x1B	; 27
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		// Hacer algo más
		break;
 172:	13 c0       	rjmp	.+38     	; 0x19a <process_instruction+0x72>
		
		case MOTORREDUCTOR_Y:
		UART_sendString("MOTORREDUCTOR Y - ");
 174:	8e e2       	ldi	r24, 0x2E	; 46
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		// Hacer algo más
		break;
 17c:	0e c0       	rjmp	.+28     	; 0x19a <process_instruction+0x72>
		
		case SERVOMOTOR_X:
		UART_sendString("SERVOMOTOR X - ");
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		// Hacer algo más
		break;
 186:	09 c0       	rjmp	.+18     	; 0x19a <process_instruction+0x72>
		
		case SERVOMOTOR_Y:
		UART_sendString("SERVOMOTOR Y - ");
 188:	81 e5       	ldi	r24, 0x51	; 81
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		// Hacer algo más
		break;
 190:	04 c0       	rjmp	.+8      	; 0x19a <process_instruction+0x72>
		
		default:
		UART_sendString("INSTRUCCIÓN INVÁLIDA - ");
 192:	81 e6       	ldi	r24, 0x61	; 97
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		break;
	}
	
	UART_sendChar(data_char);
 19a:	81 2f       	mov	r24, r17
 19c:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
	UART_sendString("\r\n");
 1a0:	82 e9       	ldi	r24, 0x92	; 146
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	08 95       	ret

000001b0 <show_instruction_ASCII>:

void show_instruction_ASCII(void)
{
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	UART_sendString("INSTRUCCIONES (EN ASCII) \r\n");
 1b8:	89 e7       	ldi	r24, 0x79	; 121
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
	UART_sendString("Para ejecutar las siguientes instrucciones, coloque el caracter mostrado dos veces \r\n");
 1c0:	85 e9       	ldi	r24, 0x95	; 149
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
	for (size_t i = 0; i < num_instrucciones; ++i) {
 1c8:	00 e0       	ldi	r16, 0x00	; 0
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	19 c0       	rjmp	.+50     	; 0x200 <show_instruction_ASCII+0x50>
		UART_sendString(nombres_instrucciones[i]);		// Mostrar nombre de instrucción
 1ce:	e8 01       	movw	r28, r16
 1d0:	cc 0f       	add	r28, r28
 1d2:	dd 1f       	adc	r29, r29
 1d4:	fe 01       	movw	r30, r28
 1d6:	e7 52       	subi	r30, 0x27	; 39
 1d8:	fc 4f       	sbci	r31, 0xFC	; 252
 1da:	80 81       	ld	r24, Z
 1dc:	91 81       	ldd	r25, Z+1	; 0x01
 1de:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendString(" : ");							// Espacio
 1e2:	8b ee       	ldi	r24, 0xEB	; 235
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(instrucciones[i] >> 8);			// Mostrar instrucción
 1ea:	c7 51       	subi	r28, 0x17	; 23
 1ec:	dc 4f       	sbci	r29, 0xFC	; 252
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("\r\n");
 1f4:	82 e9       	ldi	r24, 0x92	; 146
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>

void show_instruction_ASCII(void)
{
	UART_sendString("INSTRUCCIONES (EN ASCII) \r\n");
	UART_sendString("Para ejecutar las siguientes instrucciones, coloque el caracter mostrado dos veces \r\n");
	for (size_t i = 0; i < num_instrucciones; ++i) {
 1fc:	0f 5f       	subi	r16, 0xFF	; 255
 1fe:	1f 4f       	sbci	r17, 0xFF	; 255
 200:	08 30       	cpi	r16, 0x08	; 8
 202:	11 05       	cpc	r17, r1
 204:	20 f3       	brcs	.-56     	; 0x1ce <show_instruction_ASCII+0x1e>
		UART_sendString(nombres_instrucciones[i]);		// Mostrar nombre de instrucción
		UART_sendString(" : ");							// Espacio
		UART_sendChar(instrucciones[i] >> 8);			// Mostrar instrucción
		UART_sendString("\r\n");
	}
	UART_sendString("\r\n");
 206:	82 e9       	ldi	r24, 0x92	; 146
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
	UART_sendString("Para iniciar y terminar frames de 3 bytes \r\n");
 20e:	8f ee       	ldi	r24, 0xEF	; 239
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
	UART_sendString("Inicio: ¥ \r\n");
 216:	8c e1       	ldi	r24, 0x1C	; 28
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
	UART_sendString("Fin: Z \r\n");
 21e:	89 e2       	ldi	r24, 0x29	; 41
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
	UART_sendString("\r\n");
 226:	82 e9       	ldi	r24, 0x92	; 146
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
	UART_sendString("Ingrese un caracter para accionar el sistema. \r\n");
 22e:	83 e3       	ldi	r24, 0x33	; 51
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
	
	
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	08 95       	ret

00000240 <main>:
	sei();  // Habilitar interrupciones globales
}

int main(void)
{
	setup();
 240:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
	UART_sendString("PROGRAMACIÓN DE MICROCONTROLADORES - PROYECTO 2 - RECEPTOR \r\n");
 244:	84 e6       	ldi	r24, 0x64	; 100
 246:	92 e0       	ldi	r25, 0x02	; 2
 248:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
	show_instruction_ASCII();
 24c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <show_instruction_ASCII>
 250:	ff cf       	rjmp	.-2      	; 0x250 <main+0x10>

00000252 <__vector_18>:

/************************************************************************/
/* INTERRUPCIÓN POR RECEPCIÓN UART                                      */
/************************************************************************/
ISR(USART_RX_vect)
{
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	ef 93       	push	r30
 276:	ff 93       	push	r31
	// Guardar caracter (Y limpiar el buffer)
	char data = UDR0;
 278:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	//UART_sendChar(data);
	
	// Inicializar framing (Lo que tiene más protección)
	if ((data == RXTX_START) && (!reception_started) && (reception_ended))
 27c:	c5 3a       	cpi	r28, 0xA5	; 165
 27e:	19 f5       	brne	.+70     	; 0x2c6 <__vector_18+0x74>
 280:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <reception_started>
 284:	81 11       	cpse	r24, r1
 286:	1f c0       	rjmp	.+62     	; 0x2c6 <__vector_18+0x74>
 288:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <reception_ended>
 28c:	88 23       	and	r24, r24
 28e:	d9 f0       	breq	.+54     	; 0x2c6 <__vector_18+0x74>
	{
		// Bajar la bandera de fin de framing
		reception_ended = 0;
 290:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <reception_ended>
		
		// Levantar la bandera de inicio de framing
		reception_started = 1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <reception_started>
		
		// Limpiar todos los valores del arreglo
		for (uint8_t i = 0; i < 3; i++) {
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	06 c0       	rjmp	.+12     	; 0x2aa <__vector_18+0x58>
			received_data[i] = 0;
 29e:	e8 2f       	mov	r30, r24
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	e0 50       	subi	r30, 0x00	; 0
 2a4:	ff 4f       	sbci	r31, 0xFF	; 255
 2a6:	10 82       	st	Z, r1
		
		// Levantar la bandera de inicio de framing
		reception_started = 1;
		
		// Limpiar todos los valores del arreglo
		for (uint8_t i = 0; i < 3; i++) {
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	83 30       	cpi	r24, 0x03	; 3
 2ac:	c0 f3       	brcs	.-16     	; 0x29e <__vector_18+0x4c>
			received_data[i] = 0;
		}
		
		// Indicador de prueba
		UART_sendString("Marca de Inicio de Frame: ");
 2ae:	82 ea       	ldi	r24, 0xA2	; 162
 2b0:	92 e0       	ldi	r25, 0x02	; 2
 2b2:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(data);
 2b6:	8c 2f       	mov	r24, r28
 2b8:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("\r\n");
 2bc:	82 e9       	ldi	r24, 0x92	; 146
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
 2c4:	88 c0       	rjmp	.+272    	; 0x3d6 <__vector_18+0x184>
	}
	
	// Recepción del primer byte de instrucción
	else if(reception_started)
 2c6:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <reception_started>
 2ca:	88 23       	and	r24, r24
 2cc:	99 f0       	breq	.+38     	; 0x2f4 <__vector_18+0xa2>
	{
		// Bajar la bandera de inicio de framing
		reception_started = 0;
 2ce:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <reception_started>
		
		// Guardar el dato en la posición 0 del arreglo
		received_data[0] = data;
 2d2:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		// Levantar la bandera de recepción del primer byte de instrucción 
		ins_byte1_received = 1;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <ins_byte1_received>
		
		// Indicador de prueba
		UART_sendString("Primer Caracter de Instrucción Recibido: ");
 2dc:	8d eb       	ldi	r24, 0xBD	; 189
 2de:	92 e0       	ldi	r25, 0x02	; 2
 2e0:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(data);
 2e4:	8c 2f       	mov	r24, r28
 2e6:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("\r\n");
 2ea:	82 e9       	ldi	r24, 0x92	; 146
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
 2f2:	71 c0       	rjmp	.+226    	; 0x3d6 <__vector_18+0x184>
	}
	
	// Recepción del segundo byte de instrucción
	else if(ins_byte1_received)
 2f4:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <ins_byte1_received>
 2f8:	88 23       	and	r24, r24
 2fa:	99 f0       	breq	.+38     	; 0x322 <__vector_18+0xd0>
	{
		// Bajar la bandera de recepción del primer byte de instrucción
		ins_byte1_received = 0;
 2fc:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <ins_byte1_received>
		
		// Guardar el dato en la posición 1 del arreglo
		received_data[1] = data;
 300:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		
		// Levantar la bandera de recepción del segundo byte de instrucción
		ins_byte2_received = 1;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <ins_byte2_received>
		
		// Indicador de prueba
		UART_sendString("Segundo Caracter de Instrucción Recibido: ");
 30a:	87 ee       	ldi	r24, 0xE7	; 231
 30c:	92 e0       	ldi	r25, 0x02	; 2
 30e:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(data);
 312:	8c 2f       	mov	r24, r28
 314:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("\r\n");
 318:	82 e9       	ldi	r24, 0x92	; 146
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
 320:	5a c0       	rjmp	.+180    	; 0x3d6 <__vector_18+0x184>
	}
	
	// Recepción de caracter de dato
	else if(ins_byte2_received)
 322:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <ins_byte2_received>
 326:	88 23       	and	r24, r24
 328:	99 f0       	breq	.+38     	; 0x350 <__vector_18+0xfe>
	{
		// Bajar la bandera de recepción del segundo byte de instrucción
		ins_byte2_received = 0;
 32a:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <ins_byte2_received>
		
		// Guardar el byte en la posición 2 del arreglo
		received_data[2] = data;
 32e:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
		
		// Levantar la bandera de caracter de dato recibido
		data_byte_received = 1;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <__data_end>
		
		// Indicador de prueba
		UART_sendString("Caracter de Datos Recibido: ");
 338:	82 e1       	ldi	r24, 0x12	; 18
 33a:	93 e0       	ldi	r25, 0x03	; 3
 33c:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(data);
 340:	8c 2f       	mov	r24, r28
 342:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("\r\n");
 346:	82 e9       	ldi	r24, 0x92	; 146
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
 34e:	43 c0       	rjmp	.+134    	; 0x3d6 <__vector_18+0x184>
	}
	
	// Fin de transmisión
	else if((data == RXTX_END) && (data_byte_received))
 350:	ca 35       	cpi	r28, 0x5A	; 90
 352:	b1 f5       	brne	.+108    	; 0x3c0 <__vector_18+0x16e>
 354:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <__data_end>
 358:	88 23       	and	r24, r24
 35a:	91 f1       	breq	.+100    	; 0x3c0 <__vector_18+0x16e>
	{
		// Bajar la bandera de recepción del byte de dato
		data_byte_received = 0;
 35c:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <__data_end>
		
		// Levantar la bandera de recepción terminada
		reception_ended = 1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <reception_ended>
		
		// Indicador de prueba
		UART_sendString("Fin de Frame de Información: ");
 366:	8f e2       	ldi	r24, 0x2F	; 47
 368:	93 e0       	ldi	r25, 0x03	; 3
 36a:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(data);
 36e:	8c 2f       	mov	r24, r28
 370:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("\r\n");
 374:	82 e9       	ldi	r24, 0x92	; 146
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendString("Arreglo de Datos: [");
 37c:	8d e4       	ldi	r24, 0x4D	; 77
 37e:	93 e0       	ldi	r25, 0x03	; 3
 380:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(received_data[0]);
 384:	c0 e0       	ldi	r28, 0x00	; 0
 386:	d1 e0       	ldi	r29, 0x01	; 1
 388:	88 81       	ld	r24, Y
 38a:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString(", ");
 38e:	81 e6       	ldi	r24, 0x61	; 97
 390:	93 e0       	ldi	r25, 0x03	; 3
 392:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(received_data[1]);
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString(", ");
 39c:	81 e6       	ldi	r24, 0x61	; 97
 39e:	93 e0       	ldi	r25, 0x03	; 3
 3a0:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(received_data[2]);
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("] ");
 3aa:	84 e6       	ldi	r24, 0x64	; 100
 3ac:	93 e0       	ldi	r25, 0x03	; 3
 3ae:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendString("\r\n");
 3b2:	82 e9       	ldi	r24, 0x92	; 146
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		
		// PROCESAR INSTRUCCIÓN!!!!
		process_instruction();
 3ba:	0e 94 94 00 	call	0x128	; 0x128 <process_instruction>
 3be:	0b c0       	rjmp	.+22     	; 0x3d6 <__vector_18+0x184>
	}
	else
	{
		// Indicador de prueba
		UART_sendString("Caracter Inválido: ");
 3c0:	87 e6       	ldi	r24, 0x67	; 103
 3c2:	93 e0       	ldi	r25, 0x03	; 3
 3c4:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
		UART_sendChar(data);
 3c8:	8c 2f       	mov	r24, r28
 3ca:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendChar>
		UART_sendString("\r\n");
 3ce:	82 e9       	ldi	r24, 0x92	; 146
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 81 00 	call	0x102	; 0x102 <UART_sendString>
	}
	
 3d6:	ff 91       	pop	r31
 3d8:	ef 91       	pop	r30
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	4f 91       	pop	r20
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
