
Proyecto2_Receptor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000025e  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010c  0080010c  000002fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000950  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000795  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043e  00000000  00000000  000014b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000455  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000161  00000000  00000000  00001e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  9e:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_init>:
#include "Libreria_UART.h"

// Inicialización UART a 9600 baudios
void UART_init(void) {
	// Configura TX como salida, RX como entrada
	DDRD |= (1 << PD1);   // TX
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD0);  // RX
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	8a b9       	out	0x0a, r24	; 10

	// Configura baud rate a 9600 (F_CPU = 16 MHz)
	// UBRR = (F_CPU / (16 * BAUD)) - 1 = 103
	UBRR0 = 103;
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita recepción, transmisión e interrupción de recepción
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  be:	88 e9       	ldi	r24, 0x98	; 152
  c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8 bits, 1 bit de stop, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ca:	08 95       	ret

000000cc <UART_sendChar>:
}

// Enviar un carácter
void UART_sendChar(char c) {
	while (!(UCSR0A & (1 << UDRE0)));  // Espera buffer libre
  cc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d0:	95 ff       	sbrs	r25, 5
  d2:	fc cf       	rjmp	.-8      	; 0xcc <UART_sendChar>
	UDR0 = c;
  d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d8:	08 95       	ret

000000da <setup>:
/************************************************************************/
/* SETUP Y MAINLOOP                                                                     */
/************************************************************************/
void setup(void)
{
	UART_init();
  da:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_init>
	//init_timer1();
	//init_timer2();
	sei();  // Habilitar interrupciones globales
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <main>:
}

int main(void)
{
	setup();
  e2:	0e 94 6d 00 	call	0xda	; 0xda <setup>
	printf("Tilin \r\n");
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	0e 94 fd 00 	call	0x1fa	; 0x1fa <puts>
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0xc>

000000f0 <__vector_18>:

/************************************************************************/
/* INTERRUPCIÓN POR RECEPCIÓN UART                                      */
/************************************************************************/
ISR(USART_RX_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	cf 93       	push	r28
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	// Guardar caracter (Y limpiar el buffer)
	char data = UDR0;
 114:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UART_sendChar(data);
 118:	8c 2f       	mov	r24, r28
 11a:	0e 94 66 00 	call	0xcc	; 0xcc <UART_sendChar>
	
	// Inicializar framing (Lo que tiene más protección)
	if ((data == RXTX_START) && (!reception_started) && (reception_ended))
 11e:	c5 3a       	cpi	r28, 0xA5	; 165
 120:	d9 f4       	brne	.+54     	; 0x158 <__vector_18+0x68>
 122:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <reception_started>
 126:	81 11       	cpse	r24, r1
 128:	17 c0       	rjmp	.+46     	; 0x158 <__vector_18+0x68>
 12a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <reception_ended>
 12e:	88 23       	and	r24, r24
 130:	99 f0       	breq	.+38     	; 0x158 <__vector_18+0x68>
	{
		// Bajar la bandera de fin de framing
		reception_ended = 0;
 132:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <reception_ended>
		
		// Levantar la bandera de inicio de framing
		reception_started = 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <reception_started>
		
		// Limpiar todos los valores del arreglo
		for (uint8_t i = 0; i < 3; i++) {
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	06 c0       	rjmp	.+12     	; 0x14c <__vector_18+0x5c>
			received_data[i] = 0;
 140:	e8 2f       	mov	r30, r24
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	e0 50       	subi	r30, 0x00	; 0
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	10 82       	st	Z, r1
		
		// Levantar la bandera de inicio de framing
		reception_started = 1;
		
		// Limpiar todos los valores del arreglo
		for (uint8_t i = 0; i < 3; i++) {
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	c0 f3       	brcs	.-16     	; 0x140 <__vector_18+0x50>
			received_data[i] = 0;
		}
		
		UART_sendChar('1');
 150:	81 e3       	ldi	r24, 0x31	; 49
 152:	0e 94 66 00 	call	0xcc	; 0xcc <UART_sendChar>
 156:	3f c0       	rjmp	.+126    	; 0x1d6 <__vector_18+0xe6>
	}
	
	// Recepción del primer byte de instrucción
	else if(reception_started)
 158:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <reception_started>
 15c:	88 23       	and	r24, r24
 15e:	59 f0       	breq	.+22     	; 0x176 <__vector_18+0x86>
	{
		// Bajar la bandera de inicio de framing
		reception_started = 0;
 160:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <reception_started>
		
		// Guardar el dato en la posición 0 del arreglo
		received_data[0] = data;
 164:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		// Levantar la bandera de recepción del primer byte de instrucción 
		ins_byte1_received = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ins_byte1_received>
		
		UART_sendChar('2');
 16e:	82 e3       	ldi	r24, 0x32	; 50
 170:	0e 94 66 00 	call	0xcc	; 0xcc <UART_sendChar>
 174:	30 c0       	rjmp	.+96     	; 0x1d6 <__vector_18+0xe6>
	}
	
	// Recepción del segundo byte de instrucción
	else if(ins_byte1_received)
 176:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ins_byte1_received>
 17a:	88 23       	and	r24, r24
 17c:	59 f0       	breq	.+22     	; 0x194 <__vector_18+0xa4>
	{
		// Bajar la bandera de recepción del primer byte de instrucción
		ins_byte1_received = 0;
 17e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ins_byte1_received>
		
		// Guardar el dato en la posición 1 del arreglo
		received_data[1] = data;
 182:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		
		// Levantar la bandera de recepción del segundo byte de instrucción
		ins_byte2_received = 1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ins_byte2_received>
		
		UART_sendChar('3');
 18c:	83 e3       	ldi	r24, 0x33	; 51
 18e:	0e 94 66 00 	call	0xcc	; 0xcc <UART_sendChar>
 192:	21 c0       	rjmp	.+66     	; 0x1d6 <__vector_18+0xe6>
	}
	
	// Recepción de caracter de dato
	else if(ins_byte2_received)
 194:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ins_byte2_received>
 198:	88 23       	and	r24, r24
 19a:	59 f0       	breq	.+22     	; 0x1b2 <__vector_18+0xc2>
	{
		// Bajar la bandera de recepción del segundo byte de instrucción
		ins_byte2_received = 0;
 19c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ins_byte2_received>
		
		// Guardar el byte en la posición 2 del arreglo
		received_data[2] = data;
 1a0:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
		
		// Levantar la bandera de caracter de dato recibido
		data_byte_received = 1;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		
		UART_sendChar('4');
 1aa:	84 e3       	ldi	r24, 0x34	; 52
 1ac:	0e 94 66 00 	call	0xcc	; 0xcc <UART_sendChar>
 1b0:	12 c0       	rjmp	.+36     	; 0x1d6 <__vector_18+0xe6>
	}
	
	// Fin de transmisión
	else if((data == RXTX_END) && (data_byte_received))
 1b2:	ca 35       	cpi	r28, 0x5A	; 90
 1b4:	69 f4       	brne	.+26     	; 0x1d0 <__vector_18+0xe0>
 1b6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1ba:	88 23       	and	r24, r24
 1bc:	49 f0       	breq	.+18     	; 0x1d0 <__vector_18+0xe0>
	{
		// Bajar la bandera de recepción del byte de dato
		data_byte_received = 0;
 1be:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		
		// Levantar la bandera de recepción terminada
		reception_ended = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <reception_ended>
		
		UART_sendChar('5');
 1c8:	85 e3       	ldi	r24, 0x35	; 53
 1ca:	0e 94 66 00 	call	0xcc	; 0xcc <UART_sendChar>
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <__vector_18+0xe6>
	}
	else
	{
		UART_sendChar('6');
 1d0:	86 e3       	ldi	r24, 0x36	; 54
 1d2:	0e 94 66 00 	call	0xcc	; 0xcc <UART_sendChar>
	}
	
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	cf 91       	pop	r28
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <puts>:
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__iob+0x2>
 206:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__iob+0x3>
 20a:	23 81       	ldd	r18, Z+3	; 0x03
 20c:	21 ff       	sbrs	r18, 1
 20e:	1b c0       	rjmp	.+54     	; 0x246 <puts+0x4c>
 210:	8c 01       	movw	r16, r24
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	c0 e0       	ldi	r28, 0x00	; 0
 216:	f8 01       	movw	r30, r16
 218:	81 91       	ld	r24, Z+
 21a:	8f 01       	movw	r16, r30
 21c:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <__iob+0x2>
 220:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <__iob+0x3>
 224:	db 01       	movw	r26, r22
 226:	18 96       	adiw	r26, 0x08	; 8
 228:	ed 91       	ld	r30, X+
 22a:	fc 91       	ld	r31, X
 22c:	19 97       	sbiw	r26, 0x09	; 9
 22e:	88 23       	and	r24, r24
 230:	31 f0       	breq	.+12     	; 0x23e <puts+0x44>
 232:	09 95       	icall
 234:	89 2b       	or	r24, r25
 236:	79 f3       	breq	.-34     	; 0x216 <puts+0x1c>
 238:	df ef       	ldi	r29, 0xFF	; 255
 23a:	cf ef       	ldi	r28, 0xFF	; 255
 23c:	ec cf       	rjmp	.-40     	; 0x216 <puts+0x1c>
 23e:	8a e0       	ldi	r24, 0x0A	; 10
 240:	09 95       	icall
 242:	89 2b       	or	r24, r25
 244:	19 f0       	breq	.+6      	; 0x24c <puts+0x52>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	9f ef       	ldi	r25, 0xFF	; 255
 24a:	02 c0       	rjmp	.+4      	; 0x250 <puts+0x56>
 24c:	8d 2f       	mov	r24, r29
 24e:	9c 2f       	mov	r25, r28
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
