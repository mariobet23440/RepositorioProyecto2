
Proyecto2_VersionSimp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002fa  00800100  000006e6  0000077a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008003fa  008003fa  00000a74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015e6  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a16  00000000  00000000  00002232  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cb4  00000000  00000000  00002c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  000038fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000769  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000574  00000000  00000000  00004379  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000048ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 30 02 	jmp	0x460	; 0x460 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3f       	cpi	r26, 0xFA	; 250
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	aa ef       	ldi	r26, 0xFA	; 250
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 16 02 	call	0x42c	; 0x42c <main>
  9e:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_adc>:
#include "LibreriaADC.h"

void setup_adc(void)
{
	// Formato de datos y voltaje de referencia
	ADMUX |= (1 << ADLAR) | (1 << REFS0);   // Ajuste a la izquierda (ADLAR), Referencia AVCC (REFS0)
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 66       	ori	r24, 0x60	; 96
  ae:	80 83       	st	Z, r24
	
	// Habilitación de ADC e interrupciones por conversión completada
	ADCSRA |= (1 << ADEN) | (1 << ADIE);    // Habilitar ADC y habilitar interrupción ADC
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 68       	ori	r24, 0x88	; 136
  b8:	80 83       	st	Z, r24
	
	// Prescaler
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);  // Prescaler de 64
  ba:	80 81       	ld	r24, Z
  bc:	86 60       	ori	r24, 0x06	; 6
  be:	80 83       	st	Z, r24
	
	// Configuraciones para Auto Trigger
	ADCSRA |= (1 << ADATE);					// Habilitar Auto Trigger
  c0:	80 81       	ld	r24, Z
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS2) | (1 << ADTS1);	// Trigger Source Timer/Counter0 Overflow
  c6:	ab e7       	ldi	r26, 0x7B	; 123
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	8c 91       	ld	r24, X
  cc:	86 60       	ori	r24, 0x06	; 6
  ce:	8c 93       	st	X, r24
	
	// Iniciar conversión
	ADCSRA |= (1 << ADSC);
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <adc_set_channel>:
}

// Establecer canal en ADC
void adc_set_channel(unsigned char channel)
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);  // Limpiar bits de canal y asignar nuevo canal
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	90 7f       	andi	r25, 0xF0	; 240
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	89 2b       	or	r24, r25
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <init_HBridgePins>:
	PORTD &= ~(1 << PD2);  // IN1 = LOW
	PORTD |= (1 << PD3);   // IN2 = HIGH
}

void motorA_stop(void) {
	PORTD &= ~((1 << PD2) | (1 << PD3));  // IN1 = LOW, IN2 = LOW
  e8:	8a b1       	in	r24, 0x0a	; 10
  ea:	8c 60       	ori	r24, 0x0C	; 12
  ec:	8a b9       	out	0x0a, r24	; 10
  ee:	8a b1       	in	r24, 0x0a	; 10
  f0:	80 69       	ori	r24, 0x90	; 144
  f2:	8a b9       	out	0x0a, r24	; 10
  f4:	08 95       	ret

000000f6 <motorA_forward>:
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	87 7f       	andi	r24, 0xF7	; 247
 100:	8b b9       	out	0x0b, r24	; 11
 102:	08 95       	ret

00000104 <motorA_backward>:
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	8b 7f       	andi	r24, 0xFB	; 251
 108:	8b b9       	out	0x0b, r24	; 11
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	88 60       	ori	r24, 0x08	; 8
 10e:	8b b9       	out	0x0b, r24	; 11
 110:	08 95       	ret

00000112 <motorB_forward>:
}

// Control de dirección - Motor B
void motorB_forward(void) {
	PORTD |= (1 << PD4);   // IN3 = HIGH
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	80 61       	ori	r24, 0x10	; 16
 116:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD7);  // IN4 = LOW
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	8f 77       	andi	r24, 0x7F	; 127
 11c:	8b b9       	out	0x0b, r24	; 11
 11e:	08 95       	ret

00000120 <motorB_backward>:
}

void motorB_backward(void) {
	PORTD &= ~(1 << PD4);  // IN3 = LOW
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	8f 7e       	andi	r24, 0xEF	; 239
 124:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PD7);   // IN4 = HIGH
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	08 95       	ret

0000012e <init_timer0>:

// Inicialización de TIMER0 - PWM
void init_timer0(void)
{
    // Modo Fast PWM, TOP = 255, salida no invertida en OC0A y OC0B
    TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
 12e:	84 b5       	in	r24, 0x24	; 36
 130:	83 6a       	ori	r24, 0xA3	; 163
 132:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1 << CS01); // Prescaler de 8 (~7.8kHz con F_CPU = 16MHz)
 134:	85 b5       	in	r24, 0x25	; 37
 136:	82 60       	ori	r24, 0x02	; 2
 138:	85 bd       	out	0x25, r24	; 37

    DDRD |= (1 << DDD6); // PD6 como salida (OC0A)
 13a:	8a b1       	in	r24, 0x0a	; 10
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	8a b9       	out	0x0a, r24	; 10
    DDRD |= (1 << DDD5); // PD5 como salida (OC0B)
 140:	8a b1       	in	r24, 0x0a	; 10
 142:	80 62       	ori	r24, 0x20	; 32
 144:	8a b9       	out	0x0a, r24	; 10
 146:	08 95       	ret

00000148 <TIMER0_PWMA_set_PW>:
}

// Establecer ancho de pulso en OC0A
void TIMER0_PWMA_set_PW(uint8_t value)
{
    OCR0A = 255 - value;
 148:	80 95       	com	r24
 14a:	87 bd       	out	0x27, r24	; 39
 14c:	08 95       	ret

0000014e <TIMER0_PWMB_set_PW>:
}

// Establecer ancho de pulso en OC0B
void TIMER0_PWMB_set_PW(uint8_t value)
{
    OCR0B = 255 - value;
 14e:	80 95       	com	r24
 150:	88 bd       	out	0x28, r24	; 40
 152:	08 95       	ret

00000154 <init_timer1>:
#include "LibreriaTimer1PWM.h"

// Inicialización de Timer1
void init_timer1(void)
{
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Fast PWM, OC1A y OC1B no invertido
 154:	e0 e8       	ldi	r30, 0x80	; 128
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	82 6a       	ori	r24, 0xA2	; 162
 15c:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Prescaler de 8, Fast PWM
 15e:	e1 e8       	ldi	r30, 0x81	; 129
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	8a 61       	ori	r24, 0x1A	; 26
 166:	80 83       	st	Z, r24
	ICR1 = 39999;							// Establecer TOP a 39999 (Frecuencia de 50 Hz, 20ms)
 168:	8f e3       	ldi	r24, 0x3F	; 63
 16a:	9c e9       	ldi	r25, 0x9C	; 156
 16c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 170:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << DDB1) | (1 << DDB2);		// Configurar PB1 y PB2 como salida (OC1A y OC1B)
 174:	84 b1       	in	r24, 0x04	; 4
 176:	86 60       	ori	r24, 0x06	; 6
 178:	84 b9       	out	0x04, r24	; 4
 17a:	08 95       	ret

0000017c <TIMER1_PWMA_set_servo_PW>:
}

// PWM para servo en canal A (PB1)
void TIMER1_PWMA_set_servo_PW(uint8_t value)
{
	uint16_t ticks = ((uint32_t)value * 3277) / 256 + 3276;
 17c:	28 2f       	mov	r18, r24
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	ad ec       	ldi	r26, 0xCD	; 205
 182:	bc e0       	ldi	r27, 0x0C	; 12
 184:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__umulhisi3>
 188:	bb 27       	eor	r27, r27
 18a:	a9 2f       	mov	r26, r25
 18c:	98 2f       	mov	r25, r24
 18e:	87 2f       	mov	r24, r23
 190:	bc 01       	movw	r22, r24
 192:	64 53       	subi	r22, 0x34	; 52
 194:	73 4f       	sbci	r23, 0xF3	; 243
	if (ticks > ICR1) ticks = ICR1;
 196:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 19a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 19e:	86 17       	cp	r24, r22
 1a0:	97 07       	cpc	r25, r23
 1a2:	20 f4       	brcc	.+8      	; 0x1ac <TIMER1_PWMA_set_servo_PW+0x30>
 1a4:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1a8:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	OCR1A = ticks;
 1ac:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1b0:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1b4:	08 95       	ret

000001b6 <TIMER1_PWMB_set_servo_PW>:
}

// PWM para servo en canal B (PB2)
void TIMER1_PWMB_set_servo_PW(uint8_t value)
{
	uint16_t ticks = ((uint32_t)value * 3277) / 256 + 3276;
 1b6:	28 2f       	mov	r18, r24
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	ad ec       	ldi	r26, 0xCD	; 205
 1bc:	bc e0       	ldi	r27, 0x0C	; 12
 1be:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__umulhisi3>
 1c2:	bb 27       	eor	r27, r27
 1c4:	a9 2f       	mov	r26, r25
 1c6:	98 2f       	mov	r25, r24
 1c8:	87 2f       	mov	r24, r23
 1ca:	bc 01       	movw	r22, r24
 1cc:	64 53       	subi	r22, 0x34	; 52
 1ce:	73 4f       	sbci	r23, 0xF3	; 243
	if (ticks > ICR1) ticks = ICR1;
 1d0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1d4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1d8:	86 17       	cp	r24, r22
 1da:	97 07       	cpc	r25, r23
 1dc:	20 f4       	brcc	.+8      	; 0x1e6 <TIMER1_PWMB_set_servo_PW+0x30>
 1de:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1e2:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	OCR1B = ticks;
 1e6:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1ea:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1ee:	08 95       	ret

000001f0 <UART_init>:
#include "Libreria_UART.h"

// Inicialización UART a 9600 baudios
void UART_init(void) {
	// Configura TX como salida, RX como entrada
	DDRD |= (1 << PD1);   // TX
 1f0:	8a b1       	in	r24, 0x0a	; 10
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD0);  // RX
 1f6:	8a b1       	in	r24, 0x0a	; 10
 1f8:	8e 7f       	andi	r24, 0xFE	; 254
 1fa:	8a b9       	out	0x0a, r24	; 10

	// Configura baud rate a 9600 (F_CPU = 16 MHz)
	// UBRR = (F_CPU / (16 * BAUD)) - 1 = 103
	UBRR0 = 103;
 1fc:	87 e6       	ldi	r24, 0x67	; 103
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 204:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita recepción, transmisión e interrupción de recepción
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 208:	88 e9       	ldi	r24, 0x98	; 152
 20a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8 bits, 1 bit de stop, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 214:	08 95       	ret

00000216 <UART_sendChar>:
}

// Enviar un carácter
void UART_sendChar(char c) {
	while (!(UCSR0A & (1 << UDRE0)));  // Espera buffer libre
 216:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 21a:	95 ff       	sbrs	r25, 5
 21c:	fc cf       	rjmp	.-8      	; 0x216 <UART_sendChar>
	UDR0 = c;
 21e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 222:	08 95       	ret

00000224 <UART_sendString>:
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	ec 01       	movw	r28, r24
	while (*str)
 22a:	03 c0       	rjmp	.+6      	; 0x232 <UART_sendString+0xe>
	{
		UART_sendChar(*str++);
 22c:	21 96       	adiw	r28, 0x01	; 1
 22e:	0e 94 0b 01 	call	0x216	; 0x216 <UART_sendChar>
	UDR0 = c;
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
	while (*str)
 232:	88 81       	ld	r24, Y
 234:	81 11       	cpse	r24, r1
 236:	fa cf       	rjmp	.-12     	; 0x22c <UART_sendString+0x8>
	{
		UART_sendChar(*str++);
	}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <setup>:

// Normalizar entrada (0 a 255 -> -128 a 127)
int8_t normalize_input(char valor)
{
	return ((int16_t)valor - 128); // Convierte 0255 en -128 a 127
}
 23e:	0e 94 97 00 	call	0x12e	; 0x12e <init_timer0>
 242:	0e 94 aa 00 	call	0x154	; 0x154 <init_timer1>
 246:	0e 94 74 00 	call	0xe8	; 0xe8 <init_HBridgePins>
 24a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <UART_init>
 24e:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_adc>
 252:	08 95       	ret

00000254 <process_instruction_uart>:
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	e0 e0       	ldi	r30, 0x00	; 0
 25c:	f1 e0       	ldi	r31, 0x01	; 1
 25e:	c0 81       	ld	r28, Z
 260:	d0 e0       	ldi	r29, 0x00	; 0
 262:	dc 2f       	mov	r29, r28
 264:	cc 27       	eor	r28, r28
 266:	81 81       	ldd	r24, Z+1	; 0x01
 268:	c8 2b       	or	r28, r24
 26a:	12 81       	ldd	r17, Z+2	; 0x02
 26c:	84 e0       	ldi	r24, 0x04	; 4
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 274:	c5 35       	cpi	r28, 0x55	; 85
 276:	85 e5       	ldi	r24, 0x55	; 85
 278:	d8 07       	cpc	r29, r24
 27a:	69 f0       	breq	.+26     	; 0x296 <process_instruction_uart+0x42>
 27c:	20 f4       	brcc	.+8      	; 0x286 <process_instruction_uart+0x32>
 27e:	c3 33       	cpi	r28, 0x33	; 51
 280:	d3 43       	sbci	r29, 0x33	; 51
 282:	c9 f0       	breq	.+50     	; 0x2b6 <process_instruction_uart+0x62>
 284:	28 c0       	rjmp	.+80     	; 0x2d6 <process_instruction_uart+0x82>
 286:	ca 3a       	cpi	r28, 0xAA	; 170
 288:	8a ea       	ldi	r24, 0xAA	; 170
 28a:	d8 07       	cpc	r29, r24
 28c:	61 f0       	breq	.+24     	; 0x2a6 <process_instruction_uart+0x52>
 28e:	cc 3c       	cpi	r28, 0xCC	; 204
 290:	dc 4c       	sbci	r29, 0xCC	; 204
 292:	c9 f0       	breq	.+50     	; 0x2c6 <process_instruction_uart+0x72>
 294:	20 c0       	rjmp	.+64     	; 0x2d6 <process_instruction_uart+0x82>
 296:	8b e1       	ldi	r24, 0x1B	; 27
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 29e:	81 2f       	mov	r24, r17
 2a0:	0e 94 a4 00 	call	0x148	; 0x148 <TIMER0_PWMA_set_PW>
 2a4:	1c c0       	rjmp	.+56     	; 0x2de <process_instruction_uart+0x8a>
 2a6:	8e e2       	ldi	r24, 0x2E	; 46
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 2ae:	81 2f       	mov	r24, r17
 2b0:	0e 94 a7 00 	call	0x14e	; 0x14e <TIMER0_PWMB_set_PW>
 2b4:	14 c0       	rjmp	.+40     	; 0x2de <process_instruction_uart+0x8a>
 2b6:	81 e4       	ldi	r24, 0x41	; 65
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 2be:	81 2f       	mov	r24, r17
 2c0:	0e 94 be 00 	call	0x17c	; 0x17c <TIMER1_PWMA_set_servo_PW>
 2c4:	0c c0       	rjmp	.+24     	; 0x2de <process_instruction_uart+0x8a>
 2c6:	81 e5       	ldi	r24, 0x51	; 81
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 2ce:	81 2f       	mov	r24, r17
 2d0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TIMER1_PWMB_set_servo_PW>
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <process_instruction_uart+0x8a>
 2d6:	81 e6       	ldi	r24, 0x61	; 97
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 2de:	81 2f       	mov	r24, r17
 2e0:	0e 94 0b 01 	call	0x216	; 0x216 <UART_sendChar>
 2e4:	82 e9       	ldi	r24, 0x92	; 146
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 2ec:	82 e9       	ldi	r24, 0x92	; 146
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	08 95       	ret

000002fc <show_instruction_ASCII>:
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	89 e7       	ldi	r24, 0x79	; 121
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 30c:	85 e9       	ldi	r24, 0x95	; 149
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 314:	00 e0       	ldi	r16, 0x00	; 0
 316:	10 e0       	ldi	r17, 0x00	; 0
 318:	19 c0       	rjmp	.+50     	; 0x34c <show_instruction_ASCII+0x50>
 31a:	e8 01       	movw	r28, r16
 31c:	cc 0f       	add	r28, r28
 31e:	dd 1f       	adc	r29, r29
 320:	fe 01       	movw	r30, r28
 322:	e7 52       	subi	r30, 0x27	; 39
 324:	fc 4f       	sbci	r31, 0xFC	; 252
 326:	80 81       	ld	r24, Z
 328:	91 81       	ldd	r25, Z+1	; 0x01
 32a:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 32e:	8b ee       	ldi	r24, 0xEB	; 235
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 336:	c7 51       	subi	r28, 0x17	; 23
 338:	dc 4f       	sbci	r29, 0xFC	; 252
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	0e 94 0b 01 	call	0x216	; 0x216 <UART_sendChar>
 340:	82 e9       	ldi	r24, 0x92	; 146
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 348:	0f 5f       	subi	r16, 0xFF	; 255
 34a:	1f 4f       	sbci	r17, 0xFF	; 255
 34c:	08 30       	cpi	r16, 0x08	; 8
 34e:	11 05       	cpc	r17, r1
 350:	20 f3       	brcs	.-56     	; 0x31a <show_instruction_ASCII+0x1e>
 352:	82 e9       	ldi	r24, 0x92	; 146
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 35a:	8f ee       	ldi	r24, 0xEF	; 239
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 362:	8c e1       	ldi	r24, 0x1C	; 28
 364:	92 e0       	ldi	r25, 0x02	; 2
 366:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 36a:	89 e2       	ldi	r24, 0x29	; 41
 36c:	92 e0       	ldi	r25, 0x02	; 2
 36e:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 372:	82 e9       	ldi	r24, 0x92	; 146
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 37a:	83 e3       	ldi	r24, 0x33	; 51
 37c:	92 e0       	ldi	r25, 0x02	; 2
 37e:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <move_differential>:

// Movimiento de ruedas diferenciales - Permite traslación y rotación con entradas analógicas
void move_differential(int8_t traslacion, int8_t rotacion)
{
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
	int16_t vel_izq = traslacion - rotacion;
 394:	c8 2f       	mov	r28, r24
 396:	88 0f       	add	r24, r24
 398:	dd 0b       	sbc	r29, r29
 39a:	06 2e       	mov	r0, r22
 39c:	00 0c       	add	r0, r0
 39e:	77 0b       	sbc	r23, r23
 3a0:	8e 01       	movw	r16, r28
 3a2:	06 1b       	sub	r16, r22
 3a4:	17 0b       	sbc	r17, r23
	int16_t vel_der = traslacion + rotacion;
 3a6:	c6 0f       	add	r28, r22
 3a8:	d7 1f       	adc	r29, r23

	// Saturación
	if (vel_izq > 255) vel_izq = 255;
	if (vel_izq < -255) vel_izq = -255;
 3aa:	01 30       	cpi	r16, 0x01	; 1
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	18 07       	cpc	r17, r24
 3b0:	14 f4       	brge	.+4      	; 0x3b6 <move_differential+0x2a>
 3b2:	01 e0       	ldi	r16, 0x01	; 1
 3b4:	1f ef       	ldi	r17, 0xFF	; 255
	if (vel_der > 255) vel_der = 255;
	if (vel_der < -255) vel_der = -255;
 3b6:	c1 30       	cpi	r28, 0x01	; 1
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	d8 07       	cpc	r29, r24
 3bc:	14 f4       	brge	.+4      	; 0x3c2 <move_differential+0x36>
 3be:	c1 e0       	ldi	r28, 0x01	; 1
 3c0:	df ef       	ldi	r29, 0xFF	; 255

	// Motor izquierdo
	if (vel_izq >= 0) {
 3c2:	11 23       	and	r17, r17
 3c4:	34 f0       	brlt	.+12     	; 0x3d2 <move_differential+0x46>
		motorA_forward();
 3c6:	0e 94 7b 00 	call	0xf6	; 0xf6 <motorA_forward>
		TIMER0_PWMA_set_PW((uint8_t)vel_izq);
 3ca:	80 2f       	mov	r24, r16
 3cc:	0e 94 a4 00 	call	0x148	; 0x148 <TIMER0_PWMA_set_PW>
 3d0:	06 c0       	rjmp	.+12     	; 0x3de <move_differential+0x52>
		} else {
		motorA_backward();
 3d2:	0e 94 82 00 	call	0x104	; 0x104 <motorA_backward>
		TIMER0_PWMA_set_PW((uint8_t)(-vel_izq));
 3d6:	80 2f       	mov	r24, r16
 3d8:	81 95       	neg	r24
 3da:	0e 94 a4 00 	call	0x148	; 0x148 <TIMER0_PWMA_set_PW>
	}

	// Motor derecho
	if (vel_der >= 0) {
 3de:	dd 23       	and	r29, r29
 3e0:	34 f0       	brlt	.+12     	; 0x3ee <move_differential+0x62>
		motorB_forward();
 3e2:	0e 94 89 00 	call	0x112	; 0x112 <motorB_forward>
		TIMER0_PWMB_set_PW((uint8_t)vel_der);
 3e6:	8c 2f       	mov	r24, r28
 3e8:	0e 94 a7 00 	call	0x14e	; 0x14e <TIMER0_PWMB_set_PW>
 3ec:	06 c0       	rjmp	.+12     	; 0x3fa <move_differential+0x6e>
		} else {
		motorB_backward();
 3ee:	0e 94 90 00 	call	0x120	; 0x120 <motorB_backward>
		TIMER0_PWMB_set_PW((uint8_t)(-vel_der));
 3f2:	8c 2f       	mov	r24, r28
 3f4:	81 95       	neg	r24
 3f6:	0e 94 a7 00 	call	0x14e	; 0x14e <TIMER0_PWMB_set_PW>
	}
}
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	0f 91       	pop	r16
 402:	08 95       	ret

00000404 <manual_mode_movement>:

/************************************************************************/
/* RUTINAS NO DE INTERRUPCIÓN                                           */
/************************************************************************/
void manual_mode_movement(char Mx, char My, char Sx, char Sy)
{
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	d8 2f       	mov	r29, r24
 40c:	c6 2f       	mov	r28, r22
 40e:	84 2f       	mov	r24, r20
 410:	12 2f       	mov	r17, r18
	// Mover servomotores
	TIMER1_PWMA_set_servo_PW(Sx);
 412:	0e 94 be 00 	call	0x17c	; 0x17c <TIMER1_PWMA_set_servo_PW>
	TIMER1_PWMB_set_servo_PW(Sy);
 416:	81 2f       	mov	r24, r17
 418:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TIMER1_PWMB_set_servo_PW>
	
	// Mover motorreductores
	move_differential(My, Mx);
 41c:	6d 2f       	mov	r22, r29
 41e:	8c 2f       	mov	r24, r28
 420:	0e 94 c6 01 	call	0x38c	; 0x38c <move_differential>
}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	08 95       	ret

0000042c <main>:
	setup_adc();			// ADC
}

int main(void)
{
    setup();
 42c:	0e 94 1f 01 	call	0x23e	; 0x23e <setup>
    UART_sendString("PROGRAMACIÓN DE MICROCONTROLADORES - PROYECTO 2 - RECEPTOR \r\n");
 430:	84 e6       	ldi	r24, 0x64	; 100
 432:	92 e0       	ldi	r25, 0x02	; 2
 434:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
    show_instruction_ASCII();
 438:	0e 94 7e 01 	call	0x2fc	; 0x2fc <show_instruction_ASCII>
    PORTB |= (1 << PORTB1);
 43c:	85 b1       	in	r24, 0x05	; 5
 43e:	82 60       	ori	r24, 0x02	; 2
 440:	85 b9       	out	0x05, r24	; 5
    while(1)
	{
		if(manual_mode_enabled)
 442:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <manual_mode_enabled>
 446:	88 23       	and	r24, r24
 448:	e1 f3       	breq	.-8      	; 0x442 <main+0x16>
		{
			manual_mode_movement(adc_value_chan0, adc_value_chan1, adc_value_chan2, adc_value_chan3);
 44a:	20 91 ff 03 	lds	r18, 0x03FF	; 0x8003ff <adc_value_chan3>
 44e:	40 91 00 04 	lds	r20, 0x0400	; 0x800400 <adc_value_chan2>
 452:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <adc_value_chan1>
 456:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <adc_value_chan0>
 45a:	0e 94 02 02 	call	0x404	; 0x404 <manual_mode_movement>
 45e:	f1 cf       	rjmp	.-30     	; 0x442 <main+0x16>

00000460 <__vector_21>:
/************************************************************************/
/* RUTINAS DE INTERRUPCIÓN                                              */
/************************************************************************/
// Interrupción por conversión completa en el ADC - Lectura y Multiplexado de canales
ISR(ADC_vect)
{
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	2f 93       	push	r18
 46c:	3f 93       	push	r19
 46e:	4f 93       	push	r20
 470:	5f 93       	push	r21
 472:	6f 93       	push	r22
 474:	7f 93       	push	r23
 476:	8f 93       	push	r24
 478:	9f 93       	push	r25
 47a:	af 93       	push	r26
 47c:	bf 93       	push	r27
 47e:	ef 93       	push	r30
 480:	ff 93       	push	r31
	// Hacer multiplexado de canal
	switch(current_channel)
 482:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <current_channel>
 486:	81 30       	cpi	r24, 0x01	; 1
 488:	81 f0       	breq	.+32     	; 0x4aa <__vector_21+0x4a>
 48a:	28 f0       	brcs	.+10     	; 0x496 <__vector_21+0x36>
 48c:	82 30       	cpi	r24, 0x02	; 2
 48e:	b9 f0       	breq	.+46     	; 0x4be <__vector_21+0x5e>
 490:	83 30       	cpi	r24, 0x03	; 3
 492:	f9 f0       	breq	.+62     	; 0x4d2 <__vector_21+0x72>
 494:	28 c0       	rjmp	.+80     	; 0x4e6 <__vector_21+0x86>
	{
		case 0:
		adc_value_chan0 = ADCH;		// Guardar valor para canal 0
 496:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 49a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <adc_value_chan0>
		current_channel = 1;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <current_channel>
		adc_set_channel(1);			// Cambiar al canal 1
 4a4:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_set_channel>
		break;
 4a8:	27 c0       	rjmp	.+78     	; 0x4f8 <__vector_21+0x98>
		
		case 1:
		adc_value_chan1 = ADCH;		// Guardar valor para canal 1
 4aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4ae:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <adc_value_chan1>
		current_channel = 2;
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <current_channel>
		adc_set_channel(2);			// Cambiar al canal 2
 4b8:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_set_channel>
		break;
 4bc:	1d c0       	rjmp	.+58     	; 0x4f8 <__vector_21+0x98>
		
		case 2:
		adc_value_chan2 = ADCH;		// Guardar valor para canal 2
 4be:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4c2:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <adc_value_chan2>
		current_channel = 3;
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <current_channel>
		adc_set_channel(3);			// Cambiar al canal 3
 4cc:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_set_channel>
		break;
 4d0:	13 c0       	rjmp	.+38     	; 0x4f8 <__vector_21+0x98>
		
		case 3:
		adc_value_chan3 = ADCH;		// Guardar valor para canal 3
 4d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4d6:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <adc_value_chan3>
		current_channel = 0;
 4da:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <current_channel>
		adc_set_channel(0);			// Cambiar al canal 0
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_set_channel>
		break;
 4e4:	09 c0       	rjmp	.+18     	; 0x4f8 <__vector_21+0x98>
		
		default:
		adc_value_chan0 = ADCH;		// Guardar valor para canal 0
 4e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4ea:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <adc_value_chan0>
		current_channel = 0;
 4ee:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <current_channel>
		adc_set_channel(0);			// En cualquier otro caso regresar al canal 0
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_set_channel>
		break;
	}
}
 4f8:	ff 91       	pop	r31
 4fa:	ef 91       	pop	r30
 4fc:	bf 91       	pop	r27
 4fe:	af 91       	pop	r26
 500:	9f 91       	pop	r25
 502:	8f 91       	pop	r24
 504:	7f 91       	pop	r23
 506:	6f 91       	pop	r22
 508:	5f 91       	pop	r21
 50a:	4f 91       	pop	r20
 50c:	3f 91       	pop	r19
 50e:	2f 91       	pop	r18
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
 516:	1f 90       	pop	r1
 518:	18 95       	reti

0000051a <__vector_18>:


// RECEPCIÓN DE DATOS EN UART
ISR(USART_RX_vect)
{
 51a:	1f 92       	push	r1
 51c:	0f 92       	push	r0
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	0f 92       	push	r0
 522:	11 24       	eor	r1, r1
 524:	2f 93       	push	r18
 526:	3f 93       	push	r19
 528:	4f 93       	push	r20
 52a:	5f 93       	push	r21
 52c:	6f 93       	push	r22
 52e:	7f 93       	push	r23
 530:	8f 93       	push	r24
 532:	9f 93       	push	r25
 534:	af 93       	push	r26
 536:	bf 93       	push	r27
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	ef 93       	push	r30
 53e:	ff 93       	push	r31
	// Guardar caracter (Y limpiar el buffer)
	char data = UDR0;
 540:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	//UART_sendChar(data);
	
	// Inicializar framing (Lo que tiene más protección)
	if ((data == RXTX_START) && (!reception_started) && (reception_ended))
 544:	c5 3a       	cpi	r28, 0xA5	; 165
 546:	19 f5       	brne	.+70     	; 0x58e <__vector_18+0x74>
 548:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <reception_started>
 54c:	81 11       	cpse	r24, r1
 54e:	1f c0       	rjmp	.+62     	; 0x58e <__vector_18+0x74>
 550:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <reception_ended>
 554:	88 23       	and	r24, r24
 556:	d9 f0       	breq	.+54     	; 0x58e <__vector_18+0x74>
	{
		// Bajar la bandera de fin de framing
		reception_ended = 0;
 558:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <reception_ended>
		
		// Levantar la bandera de inicio de framing
		reception_started = 1;
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <reception_started>
		
		// Limpiar todos los valores del arreglo
		for (uint8_t i = 0; i < 3; i++) {
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	06 c0       	rjmp	.+12     	; 0x572 <__vector_18+0x58>
			received_data[i] = 0;
 566:	e8 2f       	mov	r30, r24
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	e0 50       	subi	r30, 0x00	; 0
 56c:	ff 4f       	sbci	r31, 0xFF	; 255
 56e:	10 82       	st	Z, r1
		
		// Levantar la bandera de inicio de framing
		reception_started = 1;
		
		// Limpiar todos los valores del arreglo
		for (uint8_t i = 0; i < 3; i++) {
 570:	8f 5f       	subi	r24, 0xFF	; 255
 572:	83 30       	cpi	r24, 0x03	; 3
 574:	c0 f3       	brcs	.-16     	; 0x566 <__vector_18+0x4c>
			received_data[i] = 0;
		}
		
		// Indicador de prueba
		UART_sendString("Marca de Inicio de Frame: ");
 576:	82 ea       	ldi	r24, 0xA2	; 162
 578:	92 e0       	ldi	r25, 0x02	; 2
 57a:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
		UART_sendChar(data);
 57e:	8c 2f       	mov	r24, r28
 580:	0e 94 0b 01 	call	0x216	; 0x216 <UART_sendChar>
		UART_sendString("\r\n");
 584:	82 e9       	ldi	r24, 0x92	; 146
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 58c:	88 c0       	rjmp	.+272    	; 0x69e <__vector_18+0x184>
	}
	
	// Recepción del primer byte de instrucción
	else if(reception_started)
 58e:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <reception_started>
 592:	88 23       	and	r24, r24
 594:	99 f0       	breq	.+38     	; 0x5bc <__vector_18+0xa2>
	{
		// Bajar la bandera de inicio de framing
		reception_started = 0;
 596:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <reception_started>
		
		// Guardar el dato en la posición 0 del arreglo
		received_data[0] = data;
 59a:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		// Levantar la bandera de recepción del primer byte de instrucción
		ins_byte1_received = 1;
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <ins_byte1_received>
		
		// Indicador de prueba
		UART_sendString("Primer Caracter de Instrucción Recibido: ");
 5a4:	8d eb       	ldi	r24, 0xBD	; 189
 5a6:	92 e0       	ldi	r25, 0x02	; 2
 5a8:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
		UART_sendChar(data);
 5ac:	8c 2f       	mov	r24, r28
 5ae:	0e 94 0b 01 	call	0x216	; 0x216 <UART_sendChar>
		UART_sendString("\r\n");
 5b2:	82 e9       	ldi	r24, 0x92	; 146
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 5ba:	71 c0       	rjmp	.+226    	; 0x69e <__vector_18+0x184>
	}
	
	// Recepción del segundo byte de instrucción
	else if(ins_byte1_received)
 5bc:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <ins_byte1_received>
 5c0:	88 23       	and	r24, r24
 5c2:	99 f0       	breq	.+38     	; 0x5ea <__vector_18+0xd0>
	{
		// Bajar la bandera de recepción del primer byte de instrucción
		ins_byte1_received = 0;
 5c4:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <ins_byte1_received>
		
		// Guardar el dato en la posición 1 del arreglo
		received_data[1] = data;
 5c8:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		
		// Levantar la bandera de recepción del segundo byte de instrucción
		ins_byte2_received = 1;
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <ins_byte2_received>
		
		// Indicador de prueba
		UART_sendString("Segundo Caracter de Instrucción Recibido: ");
 5d2:	87 ee       	ldi	r24, 0xE7	; 231
 5d4:	92 e0       	ldi	r25, 0x02	; 2
 5d6:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
		UART_sendChar(data);
 5da:	8c 2f       	mov	r24, r28
 5dc:	0e 94 0b 01 	call	0x216	; 0x216 <UART_sendChar>
		UART_sendString("\r\n");
 5e0:	82 e9       	ldi	r24, 0x92	; 146
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 5e8:	5a c0       	rjmp	.+180    	; 0x69e <__vector_18+0x184>
	}
	
	// Recepción de caracter de dato
	else if(ins_byte2_received)
 5ea:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <ins_byte2_received>
 5ee:	88 23       	and	r24, r24
 5f0:	99 f0       	breq	.+38     	; 0x618 <__vector_18+0xfe>
	{
		// Bajar la bandera de recepción del segundo byte de instrucción
		ins_byte2_received = 0;
 5f2:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <ins_byte2_received>
		
		// Guardar el byte en la posición 2 del arreglo
		received_data[2] = data;
 5f6:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
		
		// Levantar la bandera de caracter de dato recibido
		data_byte_received = 1;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <__data_end>
		
		// Indicador de prueba
		UART_sendString("Caracter de Datos Recibido: ");
 600:	82 e1       	ldi	r24, 0x12	; 18
 602:	93 e0       	ldi	r25, 0x03	; 3
 604:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
		UART_sendChar(data);
 608:	8c 2f       	mov	r24, r28
 60a:	0e 94 0b 01 	call	0x216	; 0x216 <UART_sendChar>
		UART_sendString("\r\n");
 60e:	82 e9       	ldi	r24, 0x92	; 146
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
 616:	43 c0       	rjmp	.+134    	; 0x69e <__vector_18+0x184>
	}
	
	// Fin de transmisión
	else if((data == RXTX_END) && (data_byte_received))
 618:	ca 35       	cpi	r28, 0x5A	; 90
 61a:	b1 f5       	brne	.+108    	; 0x688 <__vector_18+0x16e>
 61c:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <__data_end>
 620:	88 23       	and	r24, r24
 622:	91 f1       	breq	.+100    	; 0x688 <__vector_18+0x16e>
	{
		// Bajar la bandera de recepción del byte de dato
		data_byte_received = 0;
 624:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <__data_end>
		
		// Levantar la bandera de recepción terminada
		reception_ended = 1;
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <reception_ended>
		
		// Indicador de prueba
		UART_sendString("Fin de Frame de Información: ");
 62e:	8f e2       	ldi	r24, 0x2F	; 47
 630:	93 e0       	ldi	r25, 0x03	; 3
 632:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
		UART_sendChar(data);
 636:	8c 2f       	mov	r24, r28
 638:	0e 94 0b 01 	call	0x216	; 0x216 <UART_sendChar>
		UART_sendString("\r\n");
 63c:	82 e9       	ldi	r24, 0x92	; 146
 63e:	91 e0       	ldi	r25, 0x01	; 1
 640:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
		UART_sendString("Arreglo de Datos: [");
 644:	8d e4       	ldi	r24, 0x4D	; 77
 646:	93 e0       	ldi	r25, 0x03	; 3
 648:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
		UART_sendChar(received_data[0]);
 64c:	c0 e0       	ldi	r28, 0x00	; 0
 64e:	d1 e0       	ldi	r29, 0x01	; 1
 650:	88 81       	ld	r24, Y
 652:	0e 94 0b 01 	call	0x216	; 0x216 <UART_sendChar>
		UART_sendString(", ");
 656:	81 e6       	ldi	r24, 0x61	; 97
 658:	93 e0       	ldi	r25, 0x03	; 3
 65a:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
		UART_sendChar(received_data[1]);
 65e:	89 81       	ldd	r24, Y+1	; 0x01
 660:	0e 94 0b 01 	call	0x216	; 0x216 <UART_sendChar>
		UART_sendString(", ");
 664:	81 e6       	ldi	r24, 0x61	; 97
 666:	93 e0       	ldi	r25, 0x03	; 3
 668:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
		UART_sendChar(received_data[2]);
 66c:	8a 81       	ldd	r24, Y+2	; 0x02
 66e:	0e 94 0b 01 	call	0x216	; 0x216 <UART_sendChar>
		UART_sendString("] ");
 672:	84 e6       	ldi	r24, 0x64	; 100
 674:	93 e0       	ldi	r25, 0x03	; 3
 676:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
		UART_sendString("\r\n");
 67a:	82 e9       	ldi	r24, 0x92	; 146
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
		
		// PROCESAR INSTRUCCIÓN!!!!
		process_instruction_uart();
 682:	0e 94 2a 01 	call	0x254	; 0x254 <process_instruction_uart>
 686:	0b c0       	rjmp	.+22     	; 0x69e <__vector_18+0x184>
	}
	else
	{
		// Indicador de prueba
		UART_sendString("Caracter Inválido: ");
 688:	87 e6       	ldi	r24, 0x67	; 103
 68a:	93 e0       	ldi	r25, 0x03	; 3
 68c:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
		UART_sendChar(data);
 690:	8c 2f       	mov	r24, r28
 692:	0e 94 0b 01 	call	0x216	; 0x216 <UART_sendChar>
		UART_sendString("\r\n");
 696:	82 e9       	ldi	r24, 0x92	; 146
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	0e 94 12 01 	call	0x224	; 0x224 <UART_sendString>
	}
}
 69e:	ff 91       	pop	r31
 6a0:	ef 91       	pop	r30
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	bf 91       	pop	r27
 6a8:	af 91       	pop	r26
 6aa:	9f 91       	pop	r25
 6ac:	8f 91       	pop	r24
 6ae:	7f 91       	pop	r23
 6b0:	6f 91       	pop	r22
 6b2:	5f 91       	pop	r21
 6b4:	4f 91       	pop	r20
 6b6:	3f 91       	pop	r19
 6b8:	2f 91       	pop	r18
 6ba:	0f 90       	pop	r0
 6bc:	0f be       	out	0x3f, r0	; 63
 6be:	0f 90       	pop	r0
 6c0:	1f 90       	pop	r1
 6c2:	18 95       	reti

000006c4 <__umulhisi3>:
 6c4:	a2 9f       	mul	r26, r18
 6c6:	b0 01       	movw	r22, r0
 6c8:	b3 9f       	mul	r27, r19
 6ca:	c0 01       	movw	r24, r0
 6cc:	a3 9f       	mul	r26, r19
 6ce:	70 0d       	add	r23, r0
 6d0:	81 1d       	adc	r24, r1
 6d2:	11 24       	eor	r1, r1
 6d4:	91 1d       	adc	r25, r1
 6d6:	b2 9f       	mul	r27, r18
 6d8:	70 0d       	add	r23, r0
 6da:	81 1d       	adc	r24, r1
 6dc:	11 24       	eor	r1, r1
 6de:	91 1d       	adc	r25, r1
 6e0:	08 95       	ret

000006e2 <_exit>:
 6e2:	f8 94       	cli

000006e4 <__stop_program>:
 6e4:	ff cf       	rjmp	.-2      	; 0x6e4 <__stop_program>
