
Proyecto2_VersionSimp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003f8  00800100  0000082a  000008be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000082a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  008004f8  008004f8  00000cb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ce8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001936  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa1  00000000  00000000  000027ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ea0  00000000  00000000  0000328f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  00004130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000781  00000000  00000000  00004448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f8  00000000  00000000  00004bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000052c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	14 e0       	ldi	r17, 0x04	; 4
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3f       	cpi	r26, 0xF8	; 248
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a8 ef       	ldi	r26, 0xF8	; 248
  8e:	b4 e0       	ldi	r27, 0x04	; 4
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 38 03 	call	0x670	; 0x670 <main>
  9e:	0c 94 13 04 	jmp	0x826	; 0x826 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <EEPROM_write>:
#include "Libreria_EEPROM.h"

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
  a6:	f9 99       	sbic	0x1f, 1	; 31
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <EEPROM_write>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
  aa:	92 bd       	out	0x22, r25	; 34
  ac:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
  ae:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
  b0:	8f b3       	in	r24, 0x1f	; 31
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
  b6:	8f b3       	in	r24, 0x1f	; 31
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	8f bb       	out	0x1f, r24	; 31
  bc:	08 95       	ret

000000be <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
  be:	f9 99       	sbic	0x1f, 1	; 31
  c0:	fe cf       	rjmp	.-4      	; 0xbe <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
  c2:	92 bd       	out	0x22, r25	; 34
  c4:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
  c6:	8f b3       	in	r24, 0x1f	; 31
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8f bb       	out	0x1f, r24	; 31
	/* Return data from Data Register */
	return EEDR;
  cc:	80 b5       	in	r24, 0x20	; 32
  ce:	08 95       	ret

000000d0 <setup_adc>:
#include "LibreriaADC.h"

void setup_adc(void)
{
	// Formato de datos y voltaje de referencia
	ADMUX |= (1 << ADLAR) | (1 << REFS0);   // Ajuste a la izquierda (ADLAR), Referencia AVCC (REFS0)
  d0:	ec e7       	ldi	r30, 0x7C	; 124
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 66       	ori	r24, 0x60	; 96
  d8:	80 83       	st	Z, r24
	
	// Habilitación de ADC e interrupciones por conversión completada
	ADCSRA |= (1 << ADEN) | (1 << ADIE);    // Habilitar ADC y habilitar interrupción ADC
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 68       	ori	r24, 0x88	; 136
  e2:	80 83       	st	Z, r24
	
	// Prescaler
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);  // Prescaler de 64
  e4:	80 81       	ld	r24, Z
  e6:	86 60       	ori	r24, 0x06	; 6
  e8:	80 83       	st	Z, r24
	
	// Configuraciones para Auto Trigger
	ADCSRA |= (1 << ADATE);					// Habilitar Auto Trigger
  ea:	80 81       	ld	r24, Z
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS2) | (1 << ADTS1);	// Trigger Source Timer/Counter0 Overflow
  f0:	ab e7       	ldi	r26, 0x7B	; 123
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	8c 91       	ld	r24, X
  f6:	86 60       	ori	r24, 0x06	; 6
  f8:	8c 93       	st	X, r24
	
	// Iniciar conversión
	ADCSRA |= (1 << ADSC);
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <adc_set_channel>:
}

// Establecer canal en ADC
void adc_set_channel(unsigned char channel)
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);  // Limpiar bits de canal y asignar nuevo canal
 102:	ec e7       	ldi	r30, 0x7C	; 124
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	90 81       	ld	r25, Z
 108:	90 7f       	andi	r25, 0xF0	; 240
 10a:	8f 70       	andi	r24, 0x0F	; 15
 10c:	89 2b       	or	r24, r25
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <init_HBridgePins>:
	PORTD &= ~(1 << PD2);  // IN1 = LOW
	PORTD |= (1 << PD3);   // IN2 = HIGH
}

void motorA_stop(void) {
	PORTD &= ~((1 << PD2) | (1 << PD3));  // IN1 = LOW, IN2 = LOW
 112:	8a b1       	in	r24, 0x0a	; 10
 114:	8c 60       	ori	r24, 0x0C	; 12
 116:	8a b9       	out	0x0a, r24	; 10
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	80 69       	ori	r24, 0x90	; 144
 11c:	8a b9       	out	0x0a, r24	; 10
 11e:	08 95       	ret

00000120 <motorA_forward>:
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	84 60       	ori	r24, 0x04	; 4
 124:	8b b9       	out	0x0b, r24	; 11
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	87 7f       	andi	r24, 0xF7	; 247
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	08 95       	ret

0000012e <motorA_backward>:
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	88 60       	ori	r24, 0x08	; 8
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	08 95       	ret

0000013c <motorB_forward>:
}

// Control de dirección - Motor B
void motorB_forward(void) {
	PORTD |= (1 << PD4);   // IN3 = HIGH
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	80 61       	ori	r24, 0x10	; 16
 140:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD7);  // IN4 = LOW
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	8f 77       	andi	r24, 0x7F	; 127
 146:	8b b9       	out	0x0b, r24	; 11
 148:	08 95       	ret

0000014a <motorB_backward>:
}

void motorB_backward(void) {
	PORTD &= ~(1 << PD4);  // IN3 = LOW
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	8f 7e       	andi	r24, 0xEF	; 239
 14e:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PD7);   // IN4 = HIGH
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	80 68       	ori	r24, 0x80	; 128
 154:	8b b9       	out	0x0b, r24	; 11
 156:	08 95       	ret

00000158 <init_timer0>:

// Inicialización de TIMER0 - PWM
void init_timer0(void)
{
    // Modo Fast PWM, TOP = 255, salida no invertida en OC0A y OC0B
    TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
 158:	84 b5       	in	r24, 0x24	; 36
 15a:	83 6a       	ori	r24, 0xA3	; 163
 15c:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1 << CS01); // Prescaler de 8 (~7.8kHz con F_CPU = 16MHz)
 15e:	85 b5       	in	r24, 0x25	; 37
 160:	82 60       	ori	r24, 0x02	; 2
 162:	85 bd       	out	0x25, r24	; 37

    DDRD |= (1 << DDD6); // PD6 como salida (OC0A)
 164:	8a b1       	in	r24, 0x0a	; 10
 166:	80 64       	ori	r24, 0x40	; 64
 168:	8a b9       	out	0x0a, r24	; 10
    DDRD |= (1 << DDD5); // PD5 como salida (OC0B)
 16a:	8a b1       	in	r24, 0x0a	; 10
 16c:	80 62       	ori	r24, 0x20	; 32
 16e:	8a b9       	out	0x0a, r24	; 10
 170:	08 95       	ret

00000172 <TIMER0_PWMA_set_PW>:
}

// Establecer ancho de pulso en OC0A
void TIMER0_PWMA_set_PW(uint8_t value)
{
    OCR0A = 255 - value;
 172:	80 95       	com	r24
 174:	87 bd       	out	0x27, r24	; 39
 176:	08 95       	ret

00000178 <TIMER0_PWMB_set_PW>:
}

// Establecer ancho de pulso en OC0B
void TIMER0_PWMB_set_PW(uint8_t value)
{
    OCR0B = 255 - value;
 178:	80 95       	com	r24
 17a:	88 bd       	out	0x28, r24	; 40
 17c:	08 95       	ret

0000017e <init_timer1>:
#include "LibreriaTimer1PWM.h"

// Inicialización de Timer1
void init_timer1(void)
{
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Fast PWM, OC1A y OC1B no invertido
 17e:	e0 e8       	ldi	r30, 0x80	; 128
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	82 6a       	ori	r24, 0xA2	; 162
 186:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Prescaler de 8, Fast PWM
 188:	e1 e8       	ldi	r30, 0x81	; 129
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	8a 61       	ori	r24, 0x1A	; 26
 190:	80 83       	st	Z, r24
	ICR1 = 39999;							// Establecer TOP a 39999 (Frecuencia de 50 Hz, 20ms)
 192:	8f e3       	ldi	r24, 0x3F	; 63
 194:	9c e9       	ldi	r25, 0x9C	; 156
 196:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 19a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << DDB1) | (1 << DDB2);		// Configurar PB1 y PB2 como salida (OC1A y OC1B)
 19e:	84 b1       	in	r24, 0x04	; 4
 1a0:	86 60       	ori	r24, 0x06	; 6
 1a2:	84 b9       	out	0x04, r24	; 4
 1a4:	08 95       	ret

000001a6 <TIMER1_PWMA_set_servo_PW>:
}

// PWM para servo en canal A (PB1)
void TIMER1_PWMA_set_servo_PW(uint8_t value)
{
	uint16_t ticks = ((uint32_t)value * 3277) / 256 + 3276;
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	ad ec       	ldi	r26, 0xCD	; 205
 1ac:	bc e0       	ldi	r27, 0x0C	; 12
 1ae:	0e 94 04 04 	call	0x808	; 0x808 <__umulhisi3>
 1b2:	bb 27       	eor	r27, r27
 1b4:	a9 2f       	mov	r26, r25
 1b6:	98 2f       	mov	r25, r24
 1b8:	87 2f       	mov	r24, r23
 1ba:	bc 01       	movw	r22, r24
 1bc:	64 53       	subi	r22, 0x34	; 52
 1be:	73 4f       	sbci	r23, 0xF3	; 243
	if (ticks > ICR1) ticks = ICR1;
 1c0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1c4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1c8:	86 17       	cp	r24, r22
 1ca:	97 07       	cpc	r25, r23
 1cc:	20 f4       	brcc	.+8      	; 0x1d6 <TIMER1_PWMA_set_servo_PW+0x30>
 1ce:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1d2:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	OCR1A = ticks;
 1d6:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1da:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1de:	08 95       	ret

000001e0 <TIMER1_PWMB_set_servo_PW>:
}

// PWM para servo en canal B (PB2)
void TIMER1_PWMB_set_servo_PW(uint8_t value)
{
	uint16_t ticks = ((uint32_t)value * 3277) / 256 + 3276;
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	ad ec       	ldi	r26, 0xCD	; 205
 1e6:	bc e0       	ldi	r27, 0x0C	; 12
 1e8:	0e 94 04 04 	call	0x808	; 0x808 <__umulhisi3>
 1ec:	bb 27       	eor	r27, r27
 1ee:	a9 2f       	mov	r26, r25
 1f0:	98 2f       	mov	r25, r24
 1f2:	87 2f       	mov	r24, r23
 1f4:	bc 01       	movw	r22, r24
 1f6:	64 53       	subi	r22, 0x34	; 52
 1f8:	73 4f       	sbci	r23, 0xF3	; 243
	if (ticks > ICR1) ticks = ICR1;
 1fa:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1fe:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 202:	86 17       	cp	r24, r22
 204:	97 07       	cpc	r25, r23
 206:	20 f4       	brcc	.+8      	; 0x210 <TIMER1_PWMB_set_servo_PW+0x30>
 208:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 20c:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	OCR1B = ticks;
 210:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 214:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 218:	08 95       	ret

0000021a <UART_init>:
#include "Libreria_UART.h"

// Inicialización UART a 9600 baudios
void UART_init(void) {
	// Configura TX como salida, RX como entrada
	DDRD |= (1 << PD1);   // TX
 21a:	8a b1       	in	r24, 0x0a	; 10
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD0);  // RX
 220:	8a b1       	in	r24, 0x0a	; 10
 222:	8e 7f       	andi	r24, 0xFE	; 254
 224:	8a b9       	out	0x0a, r24	; 10

	// Configura baud rate a 9600 (F_CPU = 16 MHz)
	// UBRR = (F_CPU / (16 * BAUD)) - 1 = 103
	UBRR0 = 103;
 226:	87 e6       	ldi	r24, 0x67	; 103
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 22e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita recepción, transmisión e interrupción de recepción
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 232:	88 e9       	ldi	r24, 0x98	; 152
 234:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8 bits, 1 bit de stop, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 23e:	08 95       	ret

00000240 <UART_sendChar>:
}

// Enviar un carácter
void UART_sendChar(char c) {
	while (!(UCSR0A & (1 << UDRE0)));  // Espera buffer libre
 240:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 244:	95 ff       	sbrs	r25, 5
 246:	fc cf       	rjmp	.-8      	; 0x240 <UART_sendChar>
	UDR0 = c;
 248:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 24c:	08 95       	ret

0000024e <UART_sendString>:
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
	while (*str)
 254:	03 c0       	rjmp	.+6      	; 0x25c <UART_sendString+0xe>
	{
		UART_sendChar(*str++);
 256:	21 96       	adiw	r28, 0x01	; 1
 258:	0e 94 20 01 	call	0x240	; 0x240 <UART_sendChar>
	UDR0 = c;
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
	while (*str)
 25c:	88 81       	ld	r24, Y
 25e:	81 11       	cpse	r24, r1
 260:	fa cf       	rjmp	.-12     	; 0x256 <UART_sendString+0x8>
	{
		UART_sendChar(*str++);
	}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <setup>:
/* SETUP Y MAINLOOP                                                     */
/************************************************************************/
void setup(void)
{
	// Deshabilitar interrupciones
	cli();
 268:	f8 94       	cli
	
	// Inicializar cosas en librerías
	init_timer0();			// Timer0
 26a:	0e 94 ac 00 	call	0x158	; 0x158 <init_timer0>
	init_timer1();			// Timer1
 26e:	0e 94 bf 00 	call	0x17e	; 0x17e <init_timer1>
	init_HBridgePins();		// Puente H
 272:	0e 94 89 00 	call	0x112	; 0x112 <init_HBridgePins>
	setup_adc();			// ADC
 276:	0e 94 68 00 	call	0xd0	; 0xd0 <setup_adc>
	UART_init();			// UART
 27a:	0e 94 0d 01 	call	0x21a	; 0x21a <UART_init>
	
	// Habilitar Interrupciones
	sei();
 27e:	78 94       	sei
 280:	08 95       	ret

00000282 <process_instruction_uart>:


// Procesar Instrucciones (A partir del arreglo de datos recibido) - SOLO CUANDO MODO UART ESTÁ ACTIVADO!!!
// Esta rutina es exclusiva para ISR(USART_RX_vect) y no se usa para ninguna otra parte del código
void process_instruction_uart(void)
{
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
	// Número de 16 bits de caracteres de instrucción
	uint16_t	instruction = ((uint16_t)received_data[0] << 8) | received_data[1];
 288:	e0 e0       	ldi	r30, 0x00	; 0
 28a:	f5 e0       	ldi	r31, 0x05	; 5
 28c:	c0 81       	ld	r28, Z
 28e:	d0 e0       	ldi	r29, 0x00	; 0
 290:	dc 2f       	mov	r29, r28
 292:	cc 27       	eor	r28, r28
 294:	81 81       	ldd	r24, Z+1	; 0x01
 296:	c8 2b       	or	r28, r24
	
	// Caracter de datos
	char		data_char = received_data[2];
 298:	12 81       	ldd	r17, Z+2	; 0x02
	
	// Logs de prueba para monitor serial
	UART_sendString("Instrucción recibida: ");
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
	
	switch(instruction)
 2a2:	c4 34       	cpi	r28, 0x44	; 68
 2a4:	84 e4       	ldi	r24, 0x44	; 68
 2a6:	d8 07       	cpc	r29, r24
 2a8:	d1 f1       	breq	.+116    	; 0x31e <process_instruction_uart+0x9c>
 2aa:	68 f4       	brcc	.+26     	; 0x2c6 <process_instruction_uart+0x44>
 2ac:	c2 34       	cpi	r28, 0x42	; 66
 2ae:	82 e4       	ldi	r24, 0x42	; 66
 2b0:	d8 07       	cpc	r29, r24
 2b2:	29 f1       	breq	.+74     	; 0x2fe <process_instruction_uart+0x7c>
 2b4:	c3 34       	cpi	r28, 0x43	; 67
 2b6:	83 e4       	ldi	r24, 0x43	; 67
 2b8:	d8 07       	cpc	r29, r24
 2ba:	49 f1       	breq	.+82     	; 0x30e <process_instruction_uart+0x8c>
 2bc:	c1 34       	cpi	r28, 0x41	; 65
 2be:	d1 44       	sbci	r29, 0x41	; 65
 2c0:	09 f0       	breq	.+2      	; 0x2c4 <process_instruction_uart+0x42>
 2c2:	22 c1       	rjmp	.+580    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 2c4:	14 c0       	rjmp	.+40     	; 0x2ee <process_instruction_uart+0x6c>
 2c6:	c6 34       	cpi	r28, 0x46	; 70
 2c8:	86 e4       	ldi	r24, 0x46	; 70
 2ca:	d8 07       	cpc	r29, r24
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <process_instruction_uart+0x4e>
 2ce:	9d c0       	rjmp	.+314    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 2d0:	20 f4       	brcc	.+8      	; 0x2da <process_instruction_uart+0x58>
 2d2:	c5 34       	cpi	r28, 0x45	; 69
 2d4:	d5 44       	sbci	r29, 0x45	; 69
 2d6:	59 f1       	breq	.+86     	; 0x32e <process_instruction_uart+0xac>
 2d8:	17 c1       	rjmp	.+558    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 2da:	c7 34       	cpi	r28, 0x47	; 71
 2dc:	87 e4       	ldi	r24, 0x47	; 71
 2de:	d8 07       	cpc	r29, r24
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <process_instruction_uart+0x62>
 2e2:	03 c1       	rjmp	.+518    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 2e4:	c8 34       	cpi	r28, 0x48	; 72
 2e6:	d8 44       	sbci	r29, 0x48	; 72
 2e8:	09 f4       	brne	.+2      	; 0x2ec <process_instruction_uart+0x6a>
 2ea:	07 c1       	rjmp	.+526    	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 2ec:	0d c1       	rjmp	.+538    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
	{
		case MOTORREDUCTOR_X:
		UART_sendString("MOTORREDUCTOR X - ");
 2ee:	87 e1       	ldi	r24, 0x17	; 23
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		TIMER0_PWMA_set_PW(data_char);
 2f6:	81 2f       	mov	r24, r17
 2f8:	0e 94 b9 00 	call	0x172	; 0x172 <TIMER0_PWMA_set_PW>
		break;
 2fc:	09 c1       	rjmp	.+530    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		
		case MOTORREDUCTOR_Y:
		UART_sendString("MOTORREDUCTOR Y - ");
 2fe:	8a e2       	ldi	r24, 0x2A	; 42
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		TIMER0_PWMB_set_PW(data_char);
 306:	81 2f       	mov	r24, r17
 308:	0e 94 bc 00 	call	0x178	; 0x178 <TIMER0_PWMB_set_PW>
		break;
 30c:	01 c1       	rjmp	.+514    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		
		case SERVOMOTOR_X:
		UART_sendString("SERVOMOTOR X - ");
 30e:	8d e3       	ldi	r24, 0x3D	; 61
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		TIMER1_PWMA_set_servo_PW(data_char);
 316:	81 2f       	mov	r24, r17
 318:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <TIMER1_PWMA_set_servo_PW>
		break;
 31c:	f9 c0       	rjmp	.+498    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		
		case SERVOMOTOR_Y:
		UART_sendString("SERVOMOTOR Y - ");
 31e:	8d e4       	ldi	r24, 0x4D	; 77
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		TIMER1_PWMB_set_servo_PW(data_char);
 326:	81 2f       	mov	r24, r17
 328:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TIMER1_PWMB_set_servo_PW>
		break;
 32c:	f1 c0       	rjmp	.+482    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		
		// LECTURA DE EEPROM - Mostrar Posiciones en Servomotores
		case EEPROM_READ:
		UART_sendString("EEPROM READ - ");
 32e:	8d e5       	ldi	r24, 0x5D	; 93
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		
		char eeprom_dataA = 0;
		char eeprom_dataB = 0;
		
		// Leemos dos posiciones dependiendo del valor de la entrada
		switch(data_char)
 336:	12 33       	cpi	r17, 0x32	; 50
 338:	c1 f0       	breq	.+48     	; 0x36a <process_instruction_uart+0xe8>
 33a:	18 f4       	brcc	.+6      	; 0x342 <process_instruction_uart+0xc0>
 33c:	11 33       	cpi	r17, 0x31	; 49
 33e:	31 f0       	breq	.+12     	; 0x34c <process_instruction_uart+0xca>
 340:	41 c0       	rjmp	.+130    	; 0x3c4 <process_instruction_uart+0x142>
 342:	13 33       	cpi	r17, 0x33	; 51
 344:	09 f1       	breq	.+66     	; 0x388 <process_instruction_uart+0x106>
 346:	14 33       	cpi	r17, 0x34	; 52
 348:	71 f1       	breq	.+92     	; 0x3a6 <process_instruction_uart+0x124>
 34a:	3c c0       	rjmp	.+120    	; 0x3c4 <process_instruction_uart+0x142>
		{
			case '1':
			UART_sendString("Leyendo datos en dirección No. 1");
 34c:	8c e6       	ldi	r24, 0x6C	; 108
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
			eeprom_dataA = EEPROM_read(EEPROM_ADDRESS1A);
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 35c:	d8 2f       	mov	r29, r24
			eeprom_dataB = EEPROM_read(EEPROM_ADDRESS1B);
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 366:	c8 2f       	mov	r28, r24
			break;
 368:	33 c0       	rjmp	.+102    	; 0x3d0 <process_instruction_uart+0x14e>
			
			case '2':
			UART_sendString("Leyendo datos en dirección No. 2");
 36a:	8d e8       	ldi	r24, 0x8D	; 141
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
			eeprom_dataA = EEPROM_read(EEPROM_ADDRESS2A);
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 37a:	d8 2f       	mov	r29, r24
			eeprom_dataB = EEPROM_read(EEPROM_ADDRESS2B);
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 384:	c8 2f       	mov	r28, r24
			break;
 386:	24 c0       	rjmp	.+72     	; 0x3d0 <process_instruction_uart+0x14e>
			
			case '3':
			UART_sendString("Leyendo datos en dirección No. 3");
 388:	8e ea       	ldi	r24, 0xAE	; 174
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
			eeprom_dataA = EEPROM_read(EEPROM_ADDRESS3A);
 390:	84 e0       	ldi	r24, 0x04	; 4
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 398:	d8 2f       	mov	r29, r24
			eeprom_dataB = EEPROM_read(EEPROM_ADDRESS3B);
 39a:	85 e0       	ldi	r24, 0x05	; 5
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 3a2:	c8 2f       	mov	r28, r24
			break;
 3a4:	15 c0       	rjmp	.+42     	; 0x3d0 <process_instruction_uart+0x14e>
			
			case '4':
			UART_sendString("Leyendo datos en dirección No. 4");
 3a6:	8f ec       	ldi	r24, 0xCF	; 207
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
			eeprom_dataA = EEPROM_read(EEPROM_ADDRESS4A);
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 3b6:	d8 2f       	mov	r29, r24
			eeprom_dataB = EEPROM_read(EEPROM_ADDRESS4B);
 3b8:	87 e0       	ldi	r24, 0x07	; 7
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 3c0:	c8 2f       	mov	r28, r24
			break;
 3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <process_instruction_uart+0x14e>
			
			default:
			UART_sendString("Dirección Inválida");
 3c4:	80 ef       	ldi	r24, 0xF0	; 240
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		// LECTURA DE EEPROM - Mostrar Posiciones en Servomotores
		case EEPROM_READ:
		UART_sendString("EEPROM READ - ");
		
		char eeprom_dataA = 0;
		char eeprom_dataB = 0;
 3cc:	c0 e0       	ldi	r28, 0x00	; 0
		
		// LECTURA DE EEPROM - Mostrar Posiciones en Servomotores
		case EEPROM_READ:
		UART_sendString("EEPROM READ - ");
		
		char eeprom_dataA = 0;
 3ce:	d0 e0       	ldi	r29, 0x00	; 0
			default:
			UART_sendString("Dirección Inválida");
			break;
		}
		
		UART_sendString("\r\n");
 3d0:	86 e4       	ldi	r24, 0x46	; 70
 3d2:	93 e0       	ldi	r25, 0x03	; 3
 3d4:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		UART_sendString("Datos Recibidos: ");
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	92 e0       	ldi	r25, 0x02	; 2
 3dc:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		UART_sendChar(eeprom_dataA);
 3e0:	8d 2f       	mov	r24, r29
 3e2:	0e 94 20 01 	call	0x240	; 0x240 <UART_sendChar>
		UART_sendString(" - ");
 3e6:	89 e2       	ldi	r24, 0x29	; 41
 3e8:	93 e0       	ldi	r25, 0x03	; 3
 3ea:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		UART_sendChar(eeprom_dataB);
 3ee:	8c 2f       	mov	r24, r28
 3f0:	0e 94 20 01 	call	0x240	; 0x240 <UART_sendChar>
		UART_sendString("\r\n");
 3f4:	86 e4       	ldi	r24, 0x46	; 70
 3f6:	93 e0       	ldi	r25, 0x03	; 3
 3f8:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		
		// Mostramos las posiciones en los servomotores
		TIMER1_PWMA_set_servo_PW(eeprom_dataA);
 3fc:	8d 2f       	mov	r24, r29
 3fe:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <TIMER1_PWMA_set_servo_PW>
		TIMER1_PWMB_set_servo_PW(eeprom_dataB);
 402:	8c 2f       	mov	r24, r28
 404:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TIMER1_PWMB_set_servo_PW>
		break;
 408:	83 c0       	rjmp	.+262    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		
		// Escribir en EEPROM
		case EEPROM_WRITE:
		UART_sendString("EEPROM WRITE - ");
 40a:	85 e1       	ldi	r24, 0x15	; 21
 40c:	92 e0       	ldi	r25, 0x02	; 2
 40e:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		
		
		switch(data_char)
 412:	12 33       	cpi	r17, 0x32	; 50
 414:	d1 f0       	breq	.+52     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 416:	18 f4       	brcc	.+6      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 418:	11 33       	cpi	r17, 0x31	; 49
 41a:	31 f0       	breq	.+12     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 41c:	49 c0       	rjmp	.+146    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 41e:	13 33       	cpi	r17, 0x33	; 51
 420:	29 f1       	breq	.+74     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 422:	14 33       	cpi	r17, 0x34	; 52
 424:	a1 f1       	breq	.+104    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 426:	44 c0       	rjmp	.+136    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
		{
			case '1':
			UART_sendString("Guardando datos en dirección No. 1");
 428:	85 e2       	ldi	r24, 0x25	; 37
 42a:	92 e0       	ldi	r25, 0x02	; 2
 42c:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
			EEPROM_write(EEPROM_ADDRESS1A, adc_value_chan0);
 430:	60 91 fe 04 	lds	r22, 0x04FE	; 0x8004fe <adc_value_chan0>
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			EEPROM_write(EEPROM_ADDRESS1B, adc_value_chan1);
 43c:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <adc_value_chan1>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			break;
 448:	37 c0       	rjmp	.+110    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
			
			case '2':
			UART_sendString("Guardando datos en dirección No. 2");
 44a:	88 e4       	ldi	r24, 0x48	; 72
 44c:	92 e0       	ldi	r25, 0x02	; 2
 44e:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
			EEPROM_write(EEPROM_ADDRESS2A, adc_value_chan0);
 452:	60 91 fe 04 	lds	r22, 0x04FE	; 0x8004fe <adc_value_chan0>
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			EEPROM_write(EEPROM_ADDRESS2B, adc_value_chan1);
 45e:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <adc_value_chan1>
 462:	83 e0       	ldi	r24, 0x03	; 3
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			break;
 46a:	26 c0       	rjmp	.+76     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
			
			case '3':
			UART_sendString("Guardando datos en dirección No. 3");
 46c:	8b e6       	ldi	r24, 0x6B	; 107
 46e:	92 e0       	ldi	r25, 0x02	; 2
 470:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
			EEPROM_write(EEPROM_ADDRESS3A, adc_value_chan0);
 474:	60 91 fe 04 	lds	r22, 0x04FE	; 0x8004fe <adc_value_chan0>
 478:	84 e0       	ldi	r24, 0x04	; 4
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			EEPROM_write(EEPROM_ADDRESS3B, adc_value_chan1);
 480:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <adc_value_chan1>
 484:	85 e0       	ldi	r24, 0x05	; 5
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			break;
 48c:	15 c0       	rjmp	.+42     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
			
			case '4':
			UART_sendString("Guardando datos en dirección No. 4");
 48e:	8e e8       	ldi	r24, 0x8E	; 142
 490:	92 e0       	ldi	r25, 0x02	; 2
 492:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
			EEPROM_write(EEPROM_ADDRESS4A, adc_value_chan0);
 496:	60 91 fe 04 	lds	r22, 0x04FE	; 0x8004fe <adc_value_chan0>
 49a:	86 e0       	ldi	r24, 0x06	; 6
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			EEPROM_write(EEPROM_ADDRESS4B, adc_value_chan1);
 4a2:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <adc_value_chan1>
 4a6:	87 e0       	ldi	r24, 0x07	; 7
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			break;
 4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
			
			default:
			UART_sendString("Dirección Inválida");
 4b0:	80 ef       	ldi	r24, 0xF0	; 240
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		}
		
		UART_sendString("\r\n");
 4b8:	86 e4       	ldi	r24, 0x46	; 70
 4ba:	93 e0       	ldi	r25, 0x03	; 3
 4bc:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		UART_sendString("Datos Escritos: ");
 4c0:	81 eb       	ldi	r24, 0xB1	; 177
 4c2:	92 e0       	ldi	r25, 0x02	; 2
 4c4:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		UART_sendChar(adc_value_chan0);
 4c8:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <adc_value_chan0>
 4cc:	0e 94 20 01 	call	0x240	; 0x240 <UART_sendChar>
		UART_sendString(" - ");
 4d0:	89 e2       	ldi	r24, 0x29	; 41
 4d2:	93 e0       	ldi	r25, 0x03	; 3
 4d4:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		UART_sendChar(adc_value_chan1);
 4d8:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <adc_value_chan1>
 4dc:	0e 94 20 01 	call	0x240	; 0x240 <UART_sendChar>
		UART_sendString("\r\n");
 4e0:	86 e4       	ldi	r24, 0x46	; 70
 4e2:	93 e0       	ldi	r25, 0x03	; 3
 4e4:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		break;
 4e8:	13 c0       	rjmp	.+38     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		
		// Habilitar y deshabilitar modo manual
		case MANUAL_ENABLE:
		UART_sendString("MANUAL ENABLE - Habilitando modo manual");
 4ea:	82 ec       	ldi	r24, 0xC2	; 194
 4ec:	92 e0       	ldi	r25, 0x02	; 2
 4ee:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		manual_mode_enabled = 1;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <manual_mode_enabled>
		break;
 4f8:	0b c0       	rjmp	.+22     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		
		case MANUAL_DISABLE:
		UART_sendString("MANUAL ENABLE - Deshabilitando modo manual");
 4fa:	8a ee       	ldi	r24, 0xEA	; 234
 4fc:	92 e0       	ldi	r25, 0x02	; 2
 4fe:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		manual_mode_enabled = 0;
 502:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <manual_mode_enabled>
		break;
 506:	04 c0       	rjmp	.+8      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		
		default:
		UART_sendString("INSTRUCCIÓN INVÁLIDA - ");
 508:	85 e1       	ldi	r24, 0x15	; 21
 50a:	93 e0       	ldi	r25, 0x03	; 3
 50c:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		break;
	}
	
	UART_sendChar(data_char);
 510:	81 2f       	mov	r24, r17
 512:	0e 94 20 01 	call	0x240	; 0x240 <UART_sendChar>
	UART_sendString("\r\n");
 516:	86 e4       	ldi	r24, 0x46	; 70
 518:	93 e0       	ldi	r25, 0x03	; 3
 51a:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
	UART_sendString("\r\n");
 51e:	86 e4       	ldi	r24, 0x46	; 70
 520:	93 e0       	ldi	r25, 0x03	; 3
 522:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
}
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	08 95       	ret

0000052e <show_instruction_ASCII>:

// Mostrar ASCII de instrucciones
void show_instruction_ASCII(void)
{
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
	UART_sendString("INSTRUCCIONES (EN ASCII) \r\n");
 536:	8d e2       	ldi	r24, 0x2D	; 45
 538:	93 e0       	ldi	r25, 0x03	; 3
 53a:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
	UART_sendString("Para ejecutar las siguientes instrucciones, coloque el caracter mostrado dos veces \r\n");
 53e:	89 e4       	ldi	r24, 0x49	; 73
 540:	93 e0       	ldi	r25, 0x03	; 3
 542:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
	for (size_t i = 0; i < num_instrucciones; ++i) {
 546:	00 e0       	ldi	r16, 0x00	; 0
 548:	10 e0       	ldi	r17, 0x00	; 0
 54a:	19 c0       	rjmp	.+50     	; 0x57e <show_instruction_ASCII+0x50>
		UART_sendString(nombres_instrucciones[i]);		// Mostrar nombre de instrucción
 54c:	e8 01       	movw	r28, r16
 54e:	cc 0f       	add	r28, r28
 550:	dd 1f       	adc	r29, r29
 552:	fe 01       	movw	r30, r28
 554:	e9 52       	subi	r30, 0x29	; 41
 556:	fb 4f       	sbci	r31, 0xFB	; 251
 558:	80 81       	ld	r24, Z
 55a:	91 81       	ldd	r25, Z+1	; 0x01
 55c:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		UART_sendString(" : ");							// Espacio
 560:	8f e9       	ldi	r24, 0x9F	; 159
 562:	93 e0       	ldi	r25, 0x03	; 3
 564:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
		UART_sendChar(instrucciones[i] >> 8);			// Mostrar instrucción
 568:	c9 51       	subi	r28, 0x19	; 25
 56a:	db 4f       	sbci	r29, 0xFB	; 251
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	0e 94 20 01 	call	0x240	; 0x240 <UART_sendChar>
		UART_sendString("\r\n");
 572:	86 e4       	ldi	r24, 0x46	; 70
 574:	93 e0       	ldi	r25, 0x03	; 3
 576:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
// Mostrar ASCII de instrucciones
void show_instruction_ASCII(void)
{
	UART_sendString("INSTRUCCIONES (EN ASCII) \r\n");
	UART_sendString("Para ejecutar las siguientes instrucciones, coloque el caracter mostrado dos veces \r\n");
	for (size_t i = 0; i < num_instrucciones; ++i) {
 57a:	0f 5f       	subi	r16, 0xFF	; 255
 57c:	1f 4f       	sbci	r17, 0xFF	; 255
 57e:	08 30       	cpi	r16, 0x08	; 8
 580:	11 05       	cpc	r17, r1
 582:	20 f3       	brcs	.-56     	; 0x54c <show_instruction_ASCII+0x1e>
		UART_sendString(nombres_instrucciones[i]);		// Mostrar nombre de instrucción
		UART_sendString(" : ");							// Espacio
		UART_sendChar(instrucciones[i] >> 8);			// Mostrar instrucción
		UART_sendString("\r\n");
	}
	UART_sendString("\r\n");
 584:	86 e4       	ldi	r24, 0x46	; 70
 586:	93 e0       	ldi	r25, 0x03	; 3
 588:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
	UART_sendString("Para iniciar y terminar frames de 3 bytes \r\n");
 58c:	83 ea       	ldi	r24, 0xA3	; 163
 58e:	93 e0       	ldi	r25, 0x03	; 3
 590:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
	UART_sendString("Inicio: 0 \r\n");
 594:	80 ed       	ldi	r24, 0xD0	; 208
 596:	93 e0       	ldi	r25, 0x03	; 3
 598:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
	UART_sendString("Fin: Z \r\n");
 59c:	8d ed       	ldi	r24, 0xDD	; 221
 59e:	93 e0       	ldi	r25, 0x03	; 3
 5a0:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
	UART_sendString("\r\n");
 5a4:	86 e4       	ldi	r24, 0x46	; 70
 5a6:	93 e0       	ldi	r25, 0x03	; 3
 5a8:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
	UART_sendString("Ingrese un caracter para accionar el sistema. \r\n");
 5ac:	87 ee       	ldi	r24, 0xE7	; 231
 5ae:	93 e0       	ldi	r25, 0x03	; 3
 5b0:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
}
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	08 95       	ret

000005be <normalize_input>:

// Normalizar entrada (0 a 255 -> -128 a 127)
int8_t normalize_input(char valor)
{
	return ((int16_t)valor - 128); // Convierte 0255 en -128 a 127
}
 5be:	80 58       	subi	r24, 0x80	; 128
 5c0:	08 95       	ret

000005c2 <move_differential>:

// Movimiento de ruedas diferenciales - Permite traslación y rotación con entradas analógicas
void move_differential(int8_t traslacion, int8_t rotacion)
{
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
	int16_t vel_izq = traslacion - rotacion;
 5ca:	c8 2f       	mov	r28, r24
 5cc:	88 0f       	add	r24, r24
 5ce:	dd 0b       	sbc	r29, r29
 5d0:	06 2e       	mov	r0, r22
 5d2:	00 0c       	add	r0, r0
 5d4:	77 0b       	sbc	r23, r23
 5d6:	8e 01       	movw	r16, r28
 5d8:	06 1b       	sub	r16, r22
 5da:	17 0b       	sbc	r17, r23
	int16_t vel_der = traslacion + rotacion;
 5dc:	c6 0f       	add	r28, r22
 5de:	d7 1f       	adc	r29, r23

	// Saturación
	if (vel_izq > 255) vel_izq = 255;
	if (vel_izq < -255) vel_izq = -255;
 5e0:	01 30       	cpi	r16, 0x01	; 1
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	18 07       	cpc	r17, r24
 5e6:	14 f4       	brge	.+4      	; 0x5ec <move_differential+0x2a>
 5e8:	01 e0       	ldi	r16, 0x01	; 1
 5ea:	1f ef       	ldi	r17, 0xFF	; 255
	if (vel_der > 255) vel_der = 255;
	if (vel_der < -255) vel_der = -255;
 5ec:	c1 30       	cpi	r28, 0x01	; 1
 5ee:	8f ef       	ldi	r24, 0xFF	; 255
 5f0:	d8 07       	cpc	r29, r24
 5f2:	14 f4       	brge	.+4      	; 0x5f8 <move_differential+0x36>
 5f4:	c1 e0       	ldi	r28, 0x01	; 1
 5f6:	df ef       	ldi	r29, 0xFF	; 255

	// Motor izquierdo
	if (vel_izq >= 0) {
 5f8:	11 23       	and	r17, r17
 5fa:	34 f0       	brlt	.+12     	; 0x608 <move_differential+0x46>
		motorA_forward();
 5fc:	0e 94 90 00 	call	0x120	; 0x120 <motorA_forward>
		TIMER0_PWMA_set_PW((uint8_t)vel_izq);
 600:	80 2f       	mov	r24, r16
 602:	0e 94 b9 00 	call	0x172	; 0x172 <TIMER0_PWMA_set_PW>
 606:	06 c0       	rjmp	.+12     	; 0x614 <move_differential+0x52>
		} else {
		motorA_backward();
 608:	0e 94 97 00 	call	0x12e	; 0x12e <motorA_backward>
		TIMER0_PWMA_set_PW((uint8_t)(-vel_izq));
 60c:	80 2f       	mov	r24, r16
 60e:	81 95       	neg	r24
 610:	0e 94 b9 00 	call	0x172	; 0x172 <TIMER0_PWMA_set_PW>
	}

	// Motor derecho
	if (vel_der >= 0) {
 614:	dd 23       	and	r29, r29
 616:	34 f0       	brlt	.+12     	; 0x624 <move_differential+0x62>
		motorB_forward();
 618:	0e 94 9e 00 	call	0x13c	; 0x13c <motorB_forward>
		TIMER0_PWMB_set_PW((uint8_t)vel_der);
 61c:	8c 2f       	mov	r24, r28
 61e:	0e 94 bc 00 	call	0x178	; 0x178 <TIMER0_PWMB_set_PW>
 622:	06 c0       	rjmp	.+12     	; 0x630 <move_differential+0x6e>
		} else {
		motorB_backward();
 624:	0e 94 a5 00 	call	0x14a	; 0x14a <motorB_backward>
		TIMER0_PWMB_set_PW((uint8_t)(-vel_der));
 628:	8c 2f       	mov	r24, r28
 62a:	81 95       	neg	r24
 62c:	0e 94 bc 00 	call	0x178	; 0x178 <TIMER0_PWMB_set_PW>
	}
}
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	1f 91       	pop	r17
 636:	0f 91       	pop	r16
 638:	08 95       	ret

0000063a <manual_mode_movement>:

/************************************************************************/
/* RUTINAS NO DE INTERRUPCIÓN                                           */
/************************************************************************/
void manual_mode_movement(char Mx, char My, char Sx, char Sy)
{
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	c8 2f       	mov	r28, r24
 642:	d6 2f       	mov	r29, r22
 644:	84 2f       	mov	r24, r20
 646:	12 2f       	mov	r17, r18
	// Mover servomotores
	TIMER1_PWMA_set_servo_PW(Sx);
 648:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <TIMER1_PWMA_set_servo_PW>
	TIMER1_PWMB_set_servo_PW(Sy);
 64c:	81 2f       	mov	r24, r17
 64e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TIMER1_PWMB_set_servo_PW>
	
	// Mover motorreductores (ruedas diferenciales)
	int8_t traslacion = normalize_input(Mx);
 652:	8c 2f       	mov	r24, r28
 654:	0e 94 df 02 	call	0x5be	; 0x5be <normalize_input>
 658:	c8 2f       	mov	r28, r24
	int8_t rotacion   = normalize_input(My);
 65a:	8d 2f       	mov	r24, r29
 65c:	0e 94 df 02 	call	0x5be	; 0x5be <normalize_input>
	move_differential(traslacion, rotacion);
 660:	68 2f       	mov	r22, r24
 662:	8c 2f       	mov	r24, r28
 664:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <move_differential>
}
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	1f 91       	pop	r17
 66e:	08 95       	ret

00000670 <main>:
	sei();
}

int main(void)
{
	setup();
 670:	0e 94 34 01 	call	0x268	; 0x268 <setup>
	UART_sendString("PROGRAMACIÓN DE MICROCONTROLADORES - PROYECTO 2 - RECEPTOR \r\n");
 674:	88 e1       	ldi	r24, 0x18	; 24
 676:	94 e0       	ldi	r25, 0x04	; 4
 678:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
	show_instruction_ASCII();
 67c:	0e 94 97 02 	call	0x52e	; 0x52e <show_instruction_ASCII>
	PORTB |= (1 << PORTB1);
 680:	85 b1       	in	r24, 0x05	; 5
 682:	82 60       	ori	r24, 0x02	; 2
 684:	85 b9       	out	0x05, r24	; 5
	while (1)
	{
		// Si hay un frame listo, procesar la instrucción
		if (frame_ready) {
 686:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <__data_end>
 68a:	88 23       	and	r24, r24
 68c:	e1 f0       	breq	.+56     	; 0x6c6 <main+0x56>
			UART_sendString("Frame recibido: ");
 68e:	86 e5       	ldi	r24, 0x56	; 86
 690:	94 e0       	ldi	r25, 0x04	; 4
 692:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
			for (uint8_t i = 0; i < FRAME_SIZE; i++) {
 696:	c0 e0       	ldi	r28, 0x00	; 0
 698:	0c c0       	rjmp	.+24     	; 0x6b2 <main+0x42>
				UART_sendChar(received_data[i]);
 69a:	ec 2f       	mov	r30, r28
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	e0 50       	subi	r30, 0x00	; 0
 6a0:	fb 4f       	sbci	r31, 0xFB	; 251
 6a2:	80 81       	ld	r24, Z
 6a4:	0e 94 20 01 	call	0x240	; 0x240 <UART_sendChar>
				UART_sendString(" ");
 6a8:	8b e2       	ldi	r24, 0x2B	; 43
 6aa:	93 e0       	ldi	r25, 0x03	; 3
 6ac:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>
	while (1)
	{
		// Si hay un frame listo, procesar la instrucción
		if (frame_ready) {
			UART_sendString("Frame recibido: ");
			for (uint8_t i = 0; i < FRAME_SIZE; i++) {
 6b0:	cf 5f       	subi	r28, 0xFF	; 255
 6b2:	c3 30       	cpi	r28, 0x03	; 3
 6b4:	90 f3       	brcs	.-28     	; 0x69a <main+0x2a>
				UART_sendChar(received_data[i]);
				UART_sendString(" ");
			}
			UART_sendString("\r\n");
 6b6:	86 e4       	ldi	r24, 0x46	; 70
 6b8:	93 e0       	ldi	r25, 0x03	; 3
 6ba:	0e 94 27 01 	call	0x24e	; 0x24e <UART_sendString>

			process_instruction_uart();  // Usa received_data
 6be:	0e 94 41 01 	call	0x282	; 0x282 <process_instruction_uart>

			frame_ready = 0;
 6c2:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <__data_end>
		}
		
		// Si el modo manual está activo, hacer algo
		if (manual_mode_enabled) {
 6c6:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <manual_mode_enabled>
 6ca:	88 23       	and	r24, r24
 6cc:	e1 f2       	breq	.-72     	; 0x686 <main+0x16>
			manual_mode_movement(adc_value_chan0, adc_value_chan1, adc_value_chan2, adc_value_chan3);
 6ce:	20 91 fb 04 	lds	r18, 0x04FB	; 0x8004fb <adc_value_chan3>
 6d2:	40 91 fc 04 	lds	r20, 0x04FC	; 0x8004fc <adc_value_chan2>
 6d6:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <adc_value_chan1>
 6da:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <adc_value_chan0>
 6de:	0e 94 1d 03 	call	0x63a	; 0x63a <manual_mode_movement>
 6e2:	d1 cf       	rjmp	.-94     	; 0x686 <main+0x16>

000006e4 <__vector_21>:
/************************************************************************/
/* RUTINAS DE INTERRUPCIÓN                                              */
/************************************************************************/
// Interrupción por conversión completa en el ADC - Lectura y Multiplexado de canales
ISR(ADC_vect)
{
 6e4:	1f 92       	push	r1
 6e6:	0f 92       	push	r0
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	0f 92       	push	r0
 6ec:	11 24       	eor	r1, r1
 6ee:	2f 93       	push	r18
 6f0:	3f 93       	push	r19
 6f2:	4f 93       	push	r20
 6f4:	5f 93       	push	r21
 6f6:	6f 93       	push	r22
 6f8:	7f 93       	push	r23
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
 702:	ef 93       	push	r30
 704:	ff 93       	push	r31
	// Hacer multiplexado de canal
	switch(current_channel)
 706:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <current_channel>
 70a:	81 30       	cpi	r24, 0x01	; 1
 70c:	81 f0       	breq	.+32     	; 0x72e <__vector_21+0x4a>
 70e:	28 f0       	brcs	.+10     	; 0x71a <__vector_21+0x36>
 710:	82 30       	cpi	r24, 0x02	; 2
 712:	b9 f0       	breq	.+46     	; 0x742 <__vector_21+0x5e>
 714:	83 30       	cpi	r24, 0x03	; 3
 716:	f9 f0       	breq	.+62     	; 0x756 <__vector_21+0x72>
 718:	28 c0       	rjmp	.+80     	; 0x76a <__vector_21+0x86>
	{
		case 0:
		adc_value_chan0 = ADCH;		// Guardar valor para canal 0
 71a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 71e:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <adc_value_chan0>
		current_channel = 1;
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <current_channel>
		adc_set_channel(1);			// Cambiar al canal 1
 728:	0e 94 81 00 	call	0x102	; 0x102 <adc_set_channel>
		break;
 72c:	27 c0       	rjmp	.+78     	; 0x77c <__vector_21+0x98>
		
		case 1:
		adc_value_chan1 = ADCH;		// Guardar valor para canal 1
 72e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 732:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <adc_value_chan1>
		current_channel = 2;
 736:	82 e0       	ldi	r24, 0x02	; 2
 738:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <current_channel>
		adc_set_channel(2);			// Cambiar al canal 2
 73c:	0e 94 81 00 	call	0x102	; 0x102 <adc_set_channel>
		break;
 740:	1d c0       	rjmp	.+58     	; 0x77c <__vector_21+0x98>
		
		case 2:
		adc_value_chan2 = ADCH;		// Guardar valor para canal 2
 742:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 746:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <adc_value_chan2>
		current_channel = 3;
 74a:	83 e0       	ldi	r24, 0x03	; 3
 74c:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <current_channel>
		adc_set_channel(3);			// Cambiar al canal 3
 750:	0e 94 81 00 	call	0x102	; 0x102 <adc_set_channel>
		break;
 754:	13 c0       	rjmp	.+38     	; 0x77c <__vector_21+0x98>
		
		case 3:
		adc_value_chan3 = ADCH;		// Guardar valor para canal 3
 756:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 75a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <adc_value_chan3>
		current_channel = 0;
 75e:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <current_channel>
		adc_set_channel(0);			// Cambiar al canal 0
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	0e 94 81 00 	call	0x102	; 0x102 <adc_set_channel>
		break;
 768:	09 c0       	rjmp	.+18     	; 0x77c <__vector_21+0x98>
		
		default:
		adc_value_chan0 = ADCH;		// Guardar valor para canal 0
 76a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 76e:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <adc_value_chan0>
		current_channel = 0;
 772:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <current_channel>
		adc_set_channel(0);			// En cualquier otro caso regresar al canal 0
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	0e 94 81 00 	call	0x102	; 0x102 <adc_set_channel>
		break;
	}
}
 77c:	ff 91       	pop	r31
 77e:	ef 91       	pop	r30
 780:	bf 91       	pop	r27
 782:	af 91       	pop	r26
 784:	9f 91       	pop	r25
 786:	8f 91       	pop	r24
 788:	7f 91       	pop	r23
 78a:	6f 91       	pop	r22
 78c:	5f 91       	pop	r21
 78e:	4f 91       	pop	r20
 790:	3f 91       	pop	r19
 792:	2f 91       	pop	r18
 794:	0f 90       	pop	r0
 796:	0f be       	out	0x3f, r0	; 63
 798:	0f 90       	pop	r0
 79a:	1f 90       	pop	r1
 79c:	18 95       	reti

0000079e <__vector_18>:


// RECEPCIÓN DE DATOS EN UART
ISR(USART_RX_vect)
{
 79e:	1f 92       	push	r1
 7a0:	0f 92       	push	r0
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	0f 92       	push	r0
 7a6:	11 24       	eor	r1, r1
 7a8:	8f 93       	push	r24
 7aa:	9f 93       	push	r25
 7ac:	ef 93       	push	r30
 7ae:	ff 93       	push	r31
	char data = UDR0;
 7b0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (!frame_ready) {
 7b4:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <__data_end>
 7b8:	91 11       	cpse	r25, r1
 7ba:	1d c0       	rjmp	.+58     	; 0x7f6 <__vector_18+0x58>
		if (data == RXTX_START) {
 7bc:	80 33       	cpi	r24, 0x30	; 48
 7be:	19 f4       	brne	.+6      	; 0x7c6 <__vector_18+0x28>
			reception_index = 0;
 7c0:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <reception_index>
 7c4:	18 c0       	rjmp	.+48     	; 0x7f6 <__vector_18+0x58>
		}
		else if (data == RXTX_END && reception_index == FRAME_SIZE) {
 7c6:	8a 35       	cpi	r24, 0x5A	; 90
 7c8:	41 f4       	brne	.+16     	; 0x7da <__vector_18+0x3c>
 7ca:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <reception_index>
 7ce:	93 30       	cpi	r25, 0x03	; 3
 7d0:	21 f4       	brne	.+8      	; 0x7da <__vector_18+0x3c>
			frame_ready = 1;
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <__data_end>
 7d8:	0e c0       	rjmp	.+28     	; 0x7f6 <__vector_18+0x58>
		}
		else if (reception_index < FRAME_SIZE) {
 7da:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <reception_index>
 7de:	93 30       	cpi	r25, 0x03	; 3
 7e0:	50 f4       	brcc	.+20     	; 0x7f6 <__vector_18+0x58>
			received_data[reception_index++] = data;
 7e2:	e0 91 f9 04 	lds	r30, 0x04F9	; 0x8004f9 <reception_index>
 7e6:	91 e0       	ldi	r25, 0x01	; 1
 7e8:	9e 0f       	add	r25, r30
 7ea:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <reception_index>
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	e0 50       	subi	r30, 0x00	; 0
 7f2:	fb 4f       	sbci	r31, 0xFB	; 251
 7f4:	80 83       	st	Z, r24
		}
	}
 7f6:	ff 91       	pop	r31
 7f8:	ef 91       	pop	r30
 7fa:	9f 91       	pop	r25
 7fc:	8f 91       	pop	r24
 7fe:	0f 90       	pop	r0
 800:	0f be       	out	0x3f, r0	; 63
 802:	0f 90       	pop	r0
 804:	1f 90       	pop	r1
 806:	18 95       	reti

00000808 <__umulhisi3>:
 808:	a2 9f       	mul	r26, r18
 80a:	b0 01       	movw	r22, r0
 80c:	b3 9f       	mul	r27, r19
 80e:	c0 01       	movw	r24, r0
 810:	a3 9f       	mul	r26, r19
 812:	70 0d       	add	r23, r0
 814:	81 1d       	adc	r24, r1
 816:	11 24       	eor	r1, r1
 818:	91 1d       	adc	r25, r1
 81a:	b2 9f       	mul	r27, r18
 81c:	70 0d       	add	r23, r0
 81e:	81 1d       	adc	r24, r1
 820:	11 24       	eor	r1, r1
 822:	91 1d       	adc	r25, r1
 824:	08 95       	ret

00000826 <_exit>:
 826:	f8 94       	cli

00000828 <__stop_program>:
 828:	ff cf       	rjmp	.-2      	; 0x828 <__stop_program>
