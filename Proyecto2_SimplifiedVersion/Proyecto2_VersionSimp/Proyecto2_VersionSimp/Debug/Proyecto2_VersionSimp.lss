
Proyecto2_VersionSimp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000062c  000006c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000062c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800102  00800102  000006c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e4  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3f  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c0b  00000000  00000000  000025df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  000031ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000721  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000605  00000000  00000000  00003bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000041f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 42 02 	call	0x484	; 0x484 <main>
  9e:	0c 94 14 03 	jmp	0x628	; 0x628 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <EEPROM_write>:
#include "Libreria_EEPROM.h"

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
  a6:	f9 99       	sbic	0x1f, 1	; 31
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <EEPROM_write>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
  aa:	92 bd       	out	0x22, r25	; 34
  ac:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
  ae:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
  b0:	8f b3       	in	r24, 0x1f	; 31
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
  b6:	8f b3       	in	r24, 0x1f	; 31
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	8f bb       	out	0x1f, r24	; 31
  bc:	08 95       	ret

000000be <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
  be:	f9 99       	sbic	0x1f, 1	; 31
  c0:	fe cf       	rjmp	.-4      	; 0xbe <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
  c2:	92 bd       	out	0x22, r25	; 34
  c4:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
  c6:	8f b3       	in	r24, 0x1f	; 31
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8f bb       	out	0x1f, r24	; 31
	/* Return data from Data Register */
	return EEDR;
  cc:	80 b5       	in	r24, 0x20	; 32
  ce:	08 95       	ret

000000d0 <setup_adc>:

#include "LibreriaADC.h"

void setup_adc(void)
{
	ADMUX  = (1 << REFS0) | (1 << ADLAR);  // AVCC, resultado a la izquierda
  d0:	80 e6       	ldi	r24, 0x60	; 96
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADATE) | (1 << ADPS2) | (1 << ADPS1);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	8e ea       	ldi	r24, 0xAE	; 174
  dc:	80 83       	st	Z, r24
	ADCSRB = 0x00;                         // Modo de Trigger Libre
  de:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADCSRA |= (1 << ADSC);                 // Iniciar la conversión
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <adc_set_channel>:


// Establecer canal en ADC
void adc_set_channel(unsigned char channel)
{
	ADMUX = (1 << ADLAR) | (1 << REFS0) | (channel & 0x0F); // Limpiar bits de canal y asignar nuevo canal
  ea:	8f 70       	andi	r24, 0x0F	; 15
  ec:	80 66       	ori	r24, 0x60	; 96
  ee:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  f2:	08 95       	ret

000000f4 <init_HBridgePins>:

// Inicialización de pines de salida
void init_HBridgePins(void)
{
	// Configura IN1 e IN2 como salidas
	DDRD |= (1 << PD2) | (1 << PD3);
  f4:	8a b1       	in	r24, 0x0a	; 10
  f6:	8c 60       	ori	r24, 0x0C	; 12
  f8:	8a b9       	out	0x0a, r24	; 10
	
	// Configura IN3 e IN4 como salidas
	DDRD |= (1 << PD4) | (1 << PD7);
  fa:	8a b1       	in	r24, 0x0a	; 10
  fc:	80 69       	ori	r24, 0x90	; 144
  fe:	8a b9       	out	0x0a, r24	; 10
 100:	08 95       	ret

00000102 <motorA_forward>:
}

// Control de dirección - Motor A
void motorA_forward(void) {
	PORTD |= (1 << PD2);   // IN1 = HIGH
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	84 60       	ori	r24, 0x04	; 4
 106:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD3);  // IN2 = LOW
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	87 7f       	andi	r24, 0xF7	; 247
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	08 95       	ret

00000110 <motorA_backward>:
}

void motorA_backward(void) {
	PORTD &= ~(1 << PD2);  // IN1 = LOW
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PD3);   // IN2 = HIGH
 116:	8b b1       	in	r24, 0x0b	; 11
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	08 95       	ret

0000011e <motorA_stop>:
}

void motorA_stop(void) {
	PORTD &= ~((1 << PD2) | (1 << PD3));  // IN1 = LOW, IN2 = LOW
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	83 7f       	andi	r24, 0xF3	; 243
 122:	8b b9       	out	0x0b, r24	; 11
 124:	08 95       	ret

00000126 <motorB_forward>:
}

// Control de dirección - Motor B
void motorB_forward(void) {
	PORTD |= (1 << PD4);   // IN3 = HIGH
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD7);  // IN4 = LOW
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	8f 77       	andi	r24, 0x7F	; 127
 130:	8b b9       	out	0x0b, r24	; 11
 132:	08 95       	ret

00000134 <motorB_backward>:
}

void motorB_backward(void) {
	PORTD &= ~(1 << PD4);  // IN3 = LOW
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7e       	andi	r24, 0xEF	; 239
 138:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PD7);   // IN4 = HIGH
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	08 95       	ret

00000142 <motorB_stop>:
}

void motorB_stop(void) {
	PORTD &= ~((1 << PD4) | (1 << PD7));  // IN3 = LOW, IN3 = LOW
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	8f 76       	andi	r24, 0x6F	; 111
 146:	8b b9       	out	0x0b, r24	; 11
 148:	08 95       	ret

0000014a <init_timer0>:

// Inicialización de TIMER0 - PWM
void init_timer0(void)
{
	// Fast PWM, OC0A y OC0B no invertidos
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
 14a:	84 b5       	in	r24, 0x24	; 36
 14c:	83 6a       	ori	r24, 0xA3	; 163
 14e:	84 bd       	out	0x24, r24	; 36

	// Limpiar bits del prescaler
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
 150:	85 b5       	in	r24, 0x25	; 37
 152:	88 7f       	andi	r24, 0xF8	; 248
 154:	85 bd       	out	0x25, r24	; 37

	// Establecer prescaler = 128 (no está directamente soportado por hardware)
	// Usamos 256 mejor (estándar en AVR), para obtener 244 Hz
	TCCR0B |= (1 << CS02); // prescaler = 256
 156:	85 b5       	in	r24, 0x25	; 37
 158:	84 60       	ori	r24, 0x04	; 4
 15a:	85 bd       	out	0x25, r24	; 37

	// Salidas PWM
	DDRD |= (1 << DDD6); // OC0A - Motor A
 15c:	8a b1       	in	r24, 0x0a	; 10
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD5); // OC0B - Motor B
 162:	8a b1       	in	r24, 0x0a	; 10
 164:	80 62       	ori	r24, 0x20	; 32
 166:	8a b9       	out	0x0a, r24	; 10
 168:	08 95       	ret

0000016a <TIMER0_PWMA_set_PW>:
}

// Establecer ancho de pulso en OC0A
void TIMER0_PWMA_set_PW(uint8_t value)
{
    OCR0A = 255 - value;
 16a:	80 95       	com	r24
 16c:	87 bd       	out	0x27, r24	; 39
 16e:	08 95       	ret

00000170 <TIMER0_PWMB_set_PW>:
}

// Establecer ancho de pulso en OC0B
void TIMER0_PWMB_set_PW(uint8_t value)
{
    OCR0B = 255 - value;
 170:	80 95       	com	r24
 172:	88 bd       	out	0x28, r24	; 40
 174:	08 95       	ret

00000176 <init_timer1>:
#include "LibreriaTimer1PWM.h"

// Inicialización de Timer1
void init_timer1(void)
{
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Fast PWM, OC1A y OC1B no invertido
 176:	e0 e8       	ldi	r30, 0x80	; 128
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	82 6a       	ori	r24, 0xA2	; 162
 17e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Prescaler de 8, Fast PWM
 180:	e1 e8       	ldi	r30, 0x81	; 129
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8a 61       	ori	r24, 0x1A	; 26
 188:	80 83       	st	Z, r24
	ICR1 = 39999;							// Establecer TOP a 39999 (Frecuencia de 50 Hz, 20ms)
 18a:	8f e3       	ldi	r24, 0x3F	; 63
 18c:	9c e9       	ldi	r25, 0x9C	; 156
 18e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 192:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << DDB1) | (1 << DDB2);		// Configurar PB1 y PB2 como salida (OC1A y OC1B)
 196:	84 b1       	in	r24, 0x04	; 4
 198:	86 60       	ori	r24, 0x06	; 6
 19a:	84 b9       	out	0x04, r24	; 4
 19c:	08 95       	ret

0000019e <TIMER1_PWMA_set_servo_PW>:
}

// PWM para servo en canal A (PB1)
void TIMER1_PWMA_set_servo_PW(uint8_t value)
{
	uint16_t ticks = ((uint32_t)value * 4000) / 255 + 1000;
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	a0 ea       	ldi	r26, 0xA0	; 160
 1a4:	bf e0       	ldi	r27, 0x0F	; 15
 1a6:	0e 94 05 03 	call	0x60a	; 0x60a <__umulhisi3>
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__udivmodsi4>
 1b6:	28 51       	subi	r18, 0x18	; 24
 1b8:	3c 4f       	sbci	r19, 0xFC	; 252
	OCR1A = ticks;
 1ba:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1be:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1c2:	08 95       	ret

000001c4 <TIMER1_PWMB_set_servo_PW>:
}

// PWM para servo en canal B (PB2)
void TIMER1_PWMB_set_servo_PW(uint8_t value)
{
	uint16_t ticks = ((uint32_t)value * 4000) / 255 + 1000;
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	a0 ea       	ldi	r26, 0xA0	; 160
 1ca:	bf e0       	ldi	r27, 0x0F	; 15
 1cc:	0e 94 05 03 	call	0x60a	; 0x60a <__umulhisi3>
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__udivmodsi4>
 1dc:	28 51       	subi	r18, 0x18	; 24
 1de:	3c 4f       	sbci	r19, 0xFC	; 252
	OCR1B = ticks;
 1e0:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1e4:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1e8:	08 95       	ret

000001ea <UART_init>:
#include "Libreria_UART.h"

// Inicialización UART a 9600 baudios
void UART_init(void) {
	// Configura TX como salida, RX como entrada
	DDRD |= (1 << PD1);   // TX
 1ea:	8a b1       	in	r24, 0x0a	; 10
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD0);  // RX
 1f0:	8a b1       	in	r24, 0x0a	; 10
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	8a b9       	out	0x0a, r24	; 10

	// Configura baud rate a 9600 (F_CPU = 16 MHz)
	// UBRR = (F_CPU / (16 * BAUD)) - 1 = 103
	UBRR0 = 103;
 1f6:	87 e6       	ldi	r24, 0x67	; 103
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita recepción, transmisión e interrupción de recepción
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 202:	88 e9       	ldi	r24, 0x98	; 152
 204:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8 bits, 1 bit de stop, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 208:	86 e0       	ldi	r24, 0x06	; 6
 20a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 20e:	08 95       	ret

00000210 <normalize_input>:
/* FUNCIONES AUXILIARES                                                 */
/************************************************************************/

int8_t normalize_input(char valor) {
	return ((int16_t)valor - 128);
}
 210:	80 58       	subi	r24, 0x80	; 128
 212:	08 95       	ret

00000214 <move_differential>:

void move_differential(int8_t traslacion, int8_t rotacion) {
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
	int16_t vel_izq = traslacion - rotacion;
 21c:	c8 2f       	mov	r28, r24
 21e:	08 2e       	mov	r0, r24
 220:	00 0c       	add	r0, r0
 222:	dd 0b       	sbc	r29, r29
 224:	26 2f       	mov	r18, r22
 226:	06 2e       	mov	r0, r22
 228:	00 0c       	add	r0, r0
 22a:	33 0b       	sbc	r19, r19
 22c:	8e 01       	movw	r16, r28
 22e:	02 1b       	sub	r16, r18
 230:	13 0b       	sbc	r17, r19
	int16_t vel_der = traslacion + rotacion;
 232:	c2 0f       	add	r28, r18
 234:	d3 1f       	adc	r29, r19

	if (vel_izq > 255) vel_izq = 255;
	if (vel_izq < -255) vel_izq = -255;
 236:	01 30       	cpi	r16, 0x01	; 1
 238:	9f ef       	ldi	r25, 0xFF	; 255
 23a:	19 07       	cpc	r17, r25
 23c:	14 f4       	brge	.+4      	; 0x242 <move_differential+0x2e>
 23e:	01 e0       	ldi	r16, 0x01	; 1
 240:	1f ef       	ldi	r17, 0xFF	; 255
	if (vel_der > 255) vel_der = 255;
	if (vel_der < -255) vel_der = -255;
 242:	c1 30       	cpi	r28, 0x01	; 1
 244:	9f ef       	ldi	r25, 0xFF	; 255
 246:	d9 07       	cpc	r29, r25
 248:	14 f4       	brge	.+4      	; 0x24e <move_differential+0x3a>
 24a:	c1 e0       	ldi	r28, 0x01	; 1
 24c:	df ef       	ldi	r29, 0xFF	; 255

	if (traslacion > -10 && traslacion < 10 && rotacion > -10 && rotacion < 10) {
 24e:	87 5f       	subi	r24, 0xF7	; 247
 250:	83 31       	cpi	r24, 0x13	; 19
 252:	78 f4       	brcc	.+30     	; 0x272 <move_differential+0x5e>
 254:	67 3f       	cpi	r22, 0xF7	; 247
 256:	6c f0       	brlt	.+26     	; 0x272 <move_differential+0x5e>
 258:	6a 30       	cpi	r22, 0x0A	; 10
 25a:	5c f4       	brge	.+22     	; 0x272 <move_differential+0x5e>
		motorA_stop();
 25c:	0e 94 8f 00 	call	0x11e	; 0x11e <motorA_stop>
		motorB_stop();
 260:	0e 94 a1 00 	call	0x142	; 0x142 <motorB_stop>
		TIMER0_PWMA_set_PW(0);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 b5 00 	call	0x16a	; 0x16a <TIMER0_PWMA_set_PW>
		TIMER0_PWMB_set_PW(0);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 b8 00 	call	0x170	; 0x170 <TIMER0_PWMB_set_PW>
		return;
 270:	1c c0       	rjmp	.+56     	; 0x2aa <move_differential+0x96>
	}

	if (vel_izq >= 0) {
 272:	11 23       	and	r17, r17
 274:	34 f0       	brlt	.+12     	; 0x282 <move_differential+0x6e>
		motorA_forward();
 276:	0e 94 81 00 	call	0x102	; 0x102 <motorA_forward>
		TIMER0_PWMA_set_PW((uint8_t)vel_izq);
 27a:	80 2f       	mov	r24, r16
 27c:	0e 94 b5 00 	call	0x16a	; 0x16a <TIMER0_PWMA_set_PW>
 280:	06 c0       	rjmp	.+12     	; 0x28e <move_differential+0x7a>
		} else {
		motorA_backward();
 282:	0e 94 88 00 	call	0x110	; 0x110 <motorA_backward>
		TIMER0_PWMA_set_PW((uint8_t)(-vel_izq));
 286:	80 2f       	mov	r24, r16
 288:	81 95       	neg	r24
 28a:	0e 94 b5 00 	call	0x16a	; 0x16a <TIMER0_PWMA_set_PW>
	}

	if (vel_der >= 0) {
 28e:	dd 23       	and	r29, r29
 290:	34 f0       	brlt	.+12     	; 0x29e <move_differential+0x8a>
		motorB_forward();
 292:	0e 94 93 00 	call	0x126	; 0x126 <motorB_forward>
		TIMER0_PWMB_set_PW((uint8_t)vel_der);
 296:	8c 2f       	mov	r24, r28
 298:	0e 94 b8 00 	call	0x170	; 0x170 <TIMER0_PWMB_set_PW>
 29c:	06 c0       	rjmp	.+12     	; 0x2aa <move_differential+0x96>
		} else {
		motorB_backward();
 29e:	0e 94 9a 00 	call	0x134	; 0x134 <motorB_backward>
		TIMER0_PWMB_set_PW((uint8_t)(-vel_der));
 2a2:	8c 2f       	mov	r24, r28
 2a4:	81 95       	neg	r24
 2a6:	0e 94 b8 00 	call	0x170	; 0x170 <TIMER0_PWMB_set_PW>
	}
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	08 95       	ret

000002b4 <manual_mode_movement>:

void manual_mode_movement(char Mx, char My, char Sx, char Sy) {
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	c8 2f       	mov	r28, r24
 2bc:	d6 2f       	mov	r29, r22
 2be:	84 2f       	mov	r24, r20
 2c0:	12 2f       	mov	r17, r18
	TIMER1_PWMA_set_servo_PW(Sx);
 2c2:	0e 94 cf 00 	call	0x19e	; 0x19e <TIMER1_PWMA_set_servo_PW>
	TIMER1_PWMB_set_servo_PW(Sy);
 2c6:	81 2f       	mov	r24, r17
 2c8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <TIMER1_PWMB_set_servo_PW>
	int8_t traslacion = normalize_input(Mx);
 2cc:	8c 2f       	mov	r24, r28
 2ce:	0e 94 08 01 	call	0x210	; 0x210 <normalize_input>
 2d2:	c8 2f       	mov	r28, r24
	int8_t rotacion = normalize_input(My);
 2d4:	8d 2f       	mov	r24, r29
 2d6:	0e 94 08 01 	call	0x210	; 0x210 <normalize_input>
	move_differential(traslacion, rotacion);
 2da:	68 2f       	mov	r22, r24
 2dc:	8c 2f       	mov	r24, r28
 2de:	0e 94 0a 01 	call	0x214	; 0x214 <move_differential>
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	08 95       	ret

000002ea <process_instruction_uart>:

/************************************************************************/
/* COMUNICACIÓN UART - Procesamiento de Frame                           */
/************************************************************************/
void process_instruction_uart(void) {
	uint16_t instruction = ((uint16_t)received_data[0] << 8) | received_data[1];
 2ea:	e9 e0       	ldi	r30, 0x09	; 9
 2ec:	f1 e0       	ldi	r31, 0x01	; 1
 2ee:	20 81       	ld	r18, Z
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	32 2f       	mov	r19, r18
 2f4:	22 27       	eor	r18, r18
 2f6:	81 81       	ldd	r24, Z+1	; 0x01
 2f8:	28 2b       	or	r18, r24
	char data_char = received_data[2];
 2fa:	82 81       	ldd	r24, Z+2	; 0x02

	switch (instruction) {
 2fc:	24 34       	cpi	r18, 0x44	; 68
 2fe:	94 e4       	ldi	r25, 0x44	; 68
 300:	39 07       	cpc	r19, r25
 302:	59 f1       	breq	.+86     	; 0x35a <process_instruction_uart+0x70>
 304:	68 f4       	brcc	.+26     	; 0x320 <process_instruction_uart+0x36>
 306:	22 34       	cpi	r18, 0x42	; 66
 308:	92 e4       	ldi	r25, 0x42	; 66
 30a:	39 07       	cpc	r19, r25
 30c:	01 f1       	breq	.+64     	; 0x34e <process_instruction_uart+0x64>
 30e:	23 34       	cpi	r18, 0x43	; 67
 310:	93 e4       	ldi	r25, 0x43	; 67
 312:	39 07       	cpc	r19, r25
 314:	f9 f0       	breq	.+62     	; 0x354 <process_instruction_uart+0x6a>
 316:	21 34       	cpi	r18, 0x41	; 65
 318:	31 44       	sbci	r19, 0x41	; 65
 31a:	09 f0       	breq	.+2      	; 0x31e <process_instruction_uart+0x34>
 31c:	a5 c0       	rjmp	.+330    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 31e:	14 c0       	rjmp	.+40     	; 0x348 <process_instruction_uart+0x5e>
 320:	26 34       	cpi	r18, 0x46	; 70
 322:	96 e4       	ldi	r25, 0x46	; 70
 324:	39 07       	cpc	r19, r25
 326:	09 f4       	brne	.+2      	; 0x32a <process_instruction_uart+0x40>
 328:	5a c0       	rjmp	.+180    	; 0x3de <process_instruction_uart+0xf4>
 32a:	20 f4       	brcc	.+8      	; 0x334 <process_instruction_uart+0x4a>
 32c:	25 34       	cpi	r18, 0x45	; 69
 32e:	35 44       	sbci	r19, 0x45	; 69
 330:	b9 f0       	breq	.+46     	; 0x360 <process_instruction_uart+0x76>
 332:	08 95       	ret
 334:	27 34       	cpi	r18, 0x47	; 71
 336:	87 e4       	ldi	r24, 0x47	; 71
 338:	38 07       	cpc	r19, r24
 33a:	09 f4       	brne	.+2      	; 0x33e <process_instruction_uart+0x54>
 33c:	8f c0       	rjmp	.+286    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 33e:	28 34       	cpi	r18, 0x48	; 72
 340:	38 44       	sbci	r19, 0x48	; 72
 342:	09 f4       	brne	.+2      	; 0x346 <process_instruction_uart+0x5c>
 344:	8f c0       	rjmp	.+286    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 346:	08 95       	ret
		case MOTORREDUCTOR_X:
		TIMER0_PWMA_set_PW(data_char);
 348:	0e 94 b5 00 	call	0x16a	; 0x16a <TIMER0_PWMA_set_PW>
		break;
 34c:	08 95       	ret
		case MOTORREDUCTOR_Y:
		TIMER0_PWMB_set_PW(data_char);
 34e:	0e 94 b8 00 	call	0x170	; 0x170 <TIMER0_PWMB_set_PW>
		break;
 352:	08 95       	ret
		case SERVOMOTOR_X:
		TIMER1_PWMA_set_servo_PW(data_char);
 354:	0e 94 cf 00 	call	0x19e	; 0x19e <TIMER1_PWMA_set_servo_PW>
		break;
 358:	08 95       	ret
		case SERVOMOTOR_Y:
		TIMER1_PWMB_set_servo_PW(data_char);
 35a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <TIMER1_PWMB_set_servo_PW>
		break;
 35e:	08 95       	ret
		case EEPROM_READ:
		switch (data_char) {
 360:	82 33       	cpi	r24, 0x32	; 50
 362:	b1 f0       	breq	.+44     	; 0x390 <process_instruction_uart+0xa6>
 364:	18 f4       	brcc	.+6      	; 0x36c <process_instruction_uart+0x82>
 366:	81 33       	cpi	r24, 0x31	; 49
 368:	31 f0       	breq	.+12     	; 0x376 <process_instruction_uart+0x8c>
 36a:	08 95       	ret
 36c:	83 33       	cpi	r24, 0x33	; 51
 36e:	e9 f0       	breq	.+58     	; 0x3aa <process_instruction_uart+0xc0>
 370:	84 33       	cpi	r24, 0x34	; 52
 372:	41 f1       	breq	.+80     	; 0x3c4 <process_instruction_uart+0xda>
 374:	08 95       	ret
			case '1':
			TIMER1_PWMA_set_servo_PW(EEPROM_read(EEPROM_ADDRESS1A));
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 37e:	0e 94 cf 00 	call	0x19e	; 0x19e <TIMER1_PWMA_set_servo_PW>
			TIMER1_PWMB_set_servo_PW(EEPROM_read(EEPROM_ADDRESS1B));
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 38a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <TIMER1_PWMB_set_servo_PW>
			break;
 38e:	08 95       	ret
			case '2':
			TIMER1_PWMA_set_servo_PW(EEPROM_read(EEPROM_ADDRESS2A));
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 398:	0e 94 cf 00 	call	0x19e	; 0x19e <TIMER1_PWMA_set_servo_PW>
			TIMER1_PWMB_set_servo_PW(EEPROM_read(EEPROM_ADDRESS2B));
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 3a4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <TIMER1_PWMB_set_servo_PW>
			break;
 3a8:	08 95       	ret
			case '3':
			TIMER1_PWMA_set_servo_PW(EEPROM_read(EEPROM_ADDRESS3A));
 3aa:	84 e0       	ldi	r24, 0x04	; 4
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 3b2:	0e 94 cf 00 	call	0x19e	; 0x19e <TIMER1_PWMA_set_servo_PW>
			TIMER1_PWMB_set_servo_PW(EEPROM_read(EEPROM_ADDRESS3B));
 3b6:	85 e0       	ldi	r24, 0x05	; 5
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 3be:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <TIMER1_PWMB_set_servo_PW>
			break;
 3c2:	08 95       	ret
			case '4':
			TIMER1_PWMA_set_servo_PW(EEPROM_read(EEPROM_ADDRESS4A));
 3c4:	86 e0       	ldi	r24, 0x06	; 6
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 3cc:	0e 94 cf 00 	call	0x19e	; 0x19e <TIMER1_PWMA_set_servo_PW>
			TIMER1_PWMB_set_servo_PW(EEPROM_read(EEPROM_ADDRESS4B));
 3d0:	87 e0       	ldi	r24, 0x07	; 7
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_read>
 3d8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <TIMER1_PWMB_set_servo_PW>
			break;
 3dc:	08 95       	ret
		}
		break;
		case EEPROM_WRITE:
		switch (data_char) {
 3de:	82 33       	cpi	r24, 0x32	; 50
 3e0:	b1 f0       	breq	.+44     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3e2:	18 f4       	brcc	.+6      	; 0x3ea <process_instruction_uart+0x100>
 3e4:	81 33       	cpi	r24, 0x31	; 49
 3e6:	31 f0       	breq	.+12     	; 0x3f4 <process_instruction_uart+0x10a>
 3e8:	08 95       	ret
 3ea:	83 33       	cpi	r24, 0x33	; 51
 3ec:	e9 f0       	breq	.+58     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3ee:	84 33       	cpi	r24, 0x34	; 52
 3f0:	41 f1       	breq	.+80     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 3f2:	08 95       	ret
			case '1':
			EEPROM_write(EEPROM_ADDRESS1A, adc_value_chan0);
 3f4:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <adc_value_chan0>
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			EEPROM_write(EEPROM_ADDRESS1B, adc_value_chan1);
 400:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <adc_value_chan1>
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			break;
 40c:	08 95       	ret
			case '2':
			EEPROM_write(EEPROM_ADDRESS2A, adc_value_chan0);
 40e:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <adc_value_chan0>
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			EEPROM_write(EEPROM_ADDRESS2B, adc_value_chan1);
 41a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <adc_value_chan1>
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			break;
 426:	08 95       	ret
			case '3':
			EEPROM_write(EEPROM_ADDRESS3A, adc_value_chan0);
 428:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <adc_value_chan0>
 42c:	84 e0       	ldi	r24, 0x04	; 4
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			EEPROM_write(EEPROM_ADDRESS3B, adc_value_chan1);
 434:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <adc_value_chan1>
 438:	85 e0       	ldi	r24, 0x05	; 5
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			break;
 440:	08 95       	ret
			case '4':
			EEPROM_write(EEPROM_ADDRESS4A, adc_value_chan0);
 442:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <adc_value_chan0>
 446:	86 e0       	ldi	r24, 0x06	; 6
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			EEPROM_write(EEPROM_ADDRESS4B, adc_value_chan1);
 44e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <adc_value_chan1>
 452:	87 e0       	ldi	r24, 0x07	; 7
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
			break;
 45a:	08 95       	ret
		}
		break;
		case MANUAL_ENABLE:
		manual_mode_enabled = 1;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 462:	08 95       	ret
		case MANUAL_DISABLE:
		manual_mode_enabled = 0;
 464:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 468:	08 95       	ret

0000046a <setup>:

/************************************************************************/
/* CONFIGURACIÓN Y MAIN LOOP                                            */
/************************************************************************/
void setup(void) {
	cli();
 46a:	f8 94       	cli
	init_timer0();
 46c:	0e 94 a5 00 	call	0x14a	; 0x14a <init_timer0>
	init_timer1();
 470:	0e 94 bb 00 	call	0x176	; 0x176 <init_timer1>
	init_HBridgePins();
 474:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_HBridgePins>
	setup_adc();
 478:	0e 94 68 00 	call	0xd0	; 0xd0 <setup_adc>
	UART_init();
 47c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <UART_init>
	sei();
 480:	78 94       	sei
 482:	08 95       	ret

00000484 <main>:
}

int main(void) {
	setup();
 484:	0e 94 35 02 	call	0x46a	; 0x46a <setup>

	while (1) {
		if (frame_ready) {
 488:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 48c:	88 23       	and	r24, r24
 48e:	21 f0       	breq	.+8      	; 0x498 <main+0x14>
			process_instruction_uart();
 490:	0e 94 75 01 	call	0x2ea	; 0x2ea <process_instruction_uart>
			frame_ready = 0;
 494:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		}

		if (manual_mode_enabled) {
 498:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 49c:	88 23       	and	r24, r24
 49e:	a1 f3       	breq	.-24     	; 0x488 <main+0x4>
			manual_mode_movement(adc_value_chan0, adc_value_chan1, adc_value_chan2, adc_value_chan3);
 4a0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <adc_value_chan3>
 4a4:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <adc_value_chan2>
 4a8:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <adc_value_chan1>
 4ac:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adc_value_chan0>
 4b0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <manual_mode_movement>
 4b4:	e9 cf       	rjmp	.-46     	; 0x488 <main+0x4>

000004b6 <__vector_21>:
}

/************************************************************************/
/* INTERRUPCIONES                                                       */
/************************************************************************/
ISR(ADC_vect) {
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	2f 93       	push	r18
 4c2:	3f 93       	push	r19
 4c4:	4f 93       	push	r20
 4c6:	5f 93       	push	r21
 4c8:	6f 93       	push	r22
 4ca:	7f 93       	push	r23
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
 4d0:	af 93       	push	r26
 4d2:	bf 93       	push	r27
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
	switch (current_channel) {
 4d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <current_channel>
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	81 f0       	breq	.+32     	; 0x500 <__vector_21+0x4a>
 4e0:	28 f0       	brcs	.+10     	; 0x4ec <__vector_21+0x36>
 4e2:	82 30       	cpi	r24, 0x02	; 2
 4e4:	b9 f0       	breq	.+46     	; 0x514 <__vector_21+0x5e>
 4e6:	83 30       	cpi	r24, 0x03	; 3
 4e8:	f9 f0       	breq	.+62     	; 0x528 <__vector_21+0x72>
 4ea:	27 c0       	rjmp	.+78     	; 0x53a <__vector_21+0x84>
		case 0: adc_value_chan0 = ADCH; current_channel = 1; adc_set_channel(1); break;
 4ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4f0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adc_value_chan0>
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <current_channel>
 4fa:	0e 94 75 00 	call	0xea	; 0xea <adc_set_channel>
 4fe:	1d c0       	rjmp	.+58     	; 0x53a <__vector_21+0x84>
		case 1: adc_value_chan1 = ADCH; current_channel = 2; adc_set_channel(2); break;
 500:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 504:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adc_value_chan1>
 508:	82 e0       	ldi	r24, 0x02	; 2
 50a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <current_channel>
 50e:	0e 94 75 00 	call	0xea	; 0xea <adc_set_channel>
 512:	13 c0       	rjmp	.+38     	; 0x53a <__vector_21+0x84>
		case 2: adc_value_chan2 = ADCH; current_channel = 3; adc_set_channel(3); break;
 514:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 518:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <adc_value_chan2>
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <current_channel>
 522:	0e 94 75 00 	call	0xea	; 0xea <adc_set_channel>
 526:	09 c0       	rjmp	.+18     	; 0x53a <__vector_21+0x84>
		case 3: adc_value_chan3 = ADCH; current_channel = 0; adc_set_channel(0); break;
 528:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 52c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc_value_chan3>
 530:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <current_channel>
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	0e 94 75 00 	call	0xea	; 0xea <adc_set_channel>
	}
}
 53a:	ff 91       	pop	r31
 53c:	ef 91       	pop	r30
 53e:	bf 91       	pop	r27
 540:	af 91       	pop	r26
 542:	9f 91       	pop	r25
 544:	8f 91       	pop	r24
 546:	7f 91       	pop	r23
 548:	6f 91       	pop	r22
 54a:	5f 91       	pop	r21
 54c:	4f 91       	pop	r20
 54e:	3f 91       	pop	r19
 550:	2f 91       	pop	r18
 552:	0f 90       	pop	r0
 554:	0f be       	out	0x3f, r0	; 63
 556:	0f 90       	pop	r0
 558:	1f 90       	pop	r1
 55a:	18 95       	reti

0000055c <__vector_18>:

ISR(USART_RX_vect) {
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
 566:	8f 93       	push	r24
 568:	9f 93       	push	r25
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
	char data = UDR0;
 56e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (!frame_ready) {
 572:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 576:	91 11       	cpse	r25, r1
 578:	1d c0       	rjmp	.+58     	; 0x5b4 <__vector_18+0x58>
		if (data == RXTX_START) {
 57a:	80 33       	cpi	r24, 0x30	; 48
 57c:	19 f4       	brne	.+6      	; 0x584 <__vector_18+0x28>
			reception_index = 0;
 57e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <reception_index>
 582:	18 c0       	rjmp	.+48     	; 0x5b4 <__vector_18+0x58>
			} else if (data == RXTX_END && reception_index == FRAME_SIZE) {
 584:	8a 35       	cpi	r24, 0x5A	; 90
 586:	41 f4       	brne	.+16     	; 0x598 <__vector_18+0x3c>
 588:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <reception_index>
 58c:	93 30       	cpi	r25, 0x03	; 3
 58e:	21 f4       	brne	.+8      	; 0x598 <__vector_18+0x3c>
			frame_ready = 1;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 596:	0e c0       	rjmp	.+28     	; 0x5b4 <__vector_18+0x58>
			} else if (reception_index < FRAME_SIZE) {
 598:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <reception_index>
 59c:	93 30       	cpi	r25, 0x03	; 3
 59e:	50 f4       	brcc	.+20     	; 0x5b4 <__vector_18+0x58>
			received_data[reception_index++] = data;
 5a0:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <reception_index>
 5a4:	91 e0       	ldi	r25, 0x01	; 1
 5a6:	9e 0f       	add	r25, r30
 5a8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <reception_index>
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	e7 5f       	subi	r30, 0xF7	; 247
 5b0:	fe 4f       	sbci	r31, 0xFE	; 254
 5b2:	80 83       	st	Z, r24
		}
	}
}
 5b4:	ff 91       	pop	r31
 5b6:	ef 91       	pop	r30
 5b8:	9f 91       	pop	r25
 5ba:	8f 91       	pop	r24
 5bc:	0f 90       	pop	r0
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	0f 90       	pop	r0
 5c2:	1f 90       	pop	r1
 5c4:	18 95       	reti

000005c6 <__udivmodsi4>:
 5c6:	a1 e2       	ldi	r26, 0x21	; 33
 5c8:	1a 2e       	mov	r1, r26
 5ca:	aa 1b       	sub	r26, r26
 5cc:	bb 1b       	sub	r27, r27
 5ce:	fd 01       	movw	r30, r26
 5d0:	0d c0       	rjmp	.+26     	; 0x5ec <__udivmodsi4_ep>

000005d2 <__udivmodsi4_loop>:
 5d2:	aa 1f       	adc	r26, r26
 5d4:	bb 1f       	adc	r27, r27
 5d6:	ee 1f       	adc	r30, r30
 5d8:	ff 1f       	adc	r31, r31
 5da:	a2 17       	cp	r26, r18
 5dc:	b3 07       	cpc	r27, r19
 5de:	e4 07       	cpc	r30, r20
 5e0:	f5 07       	cpc	r31, r21
 5e2:	20 f0       	brcs	.+8      	; 0x5ec <__udivmodsi4_ep>
 5e4:	a2 1b       	sub	r26, r18
 5e6:	b3 0b       	sbc	r27, r19
 5e8:	e4 0b       	sbc	r30, r20
 5ea:	f5 0b       	sbc	r31, r21

000005ec <__udivmodsi4_ep>:
 5ec:	66 1f       	adc	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	1a 94       	dec	r1
 5f6:	69 f7       	brne	.-38     	; 0x5d2 <__udivmodsi4_loop>
 5f8:	60 95       	com	r22
 5fa:	70 95       	com	r23
 5fc:	80 95       	com	r24
 5fe:	90 95       	com	r25
 600:	9b 01       	movw	r18, r22
 602:	ac 01       	movw	r20, r24
 604:	bd 01       	movw	r22, r26
 606:	cf 01       	movw	r24, r30
 608:	08 95       	ret

0000060a <__umulhisi3>:
 60a:	a2 9f       	mul	r26, r18
 60c:	b0 01       	movw	r22, r0
 60e:	b3 9f       	mul	r27, r19
 610:	c0 01       	movw	r24, r0
 612:	a3 9f       	mul	r26, r19
 614:	70 0d       	add	r23, r0
 616:	81 1d       	adc	r24, r1
 618:	11 24       	eor	r1, r1
 61a:	91 1d       	adc	r25, r1
 61c:	b2 9f       	mul	r27, r18
 61e:	70 0d       	add	r23, r0
 620:	81 1d       	adc	r24, r1
 622:	11 24       	eor	r1, r1
 624:	91 1d       	adc	r25, r1
 626:	08 95       	ret

00000628 <_exit>:
 628:	f8 94       	cli

0000062a <__stop_program>:
 62a:	ff cf       	rjmp	.-2      	; 0x62a <__stop_program>
