
Proyecto2_Transmisor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800136  00800136  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b20  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000816  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000669  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004be  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d0  00000000  00000000  000023ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000025be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 33       	cpi	r26, 0x3B	; 59
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  9e:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_adc>:
#include "LibreriaADC.h"

void setup_adc(void)
{
	// Formato de datos y voltaje de referencia
	ADMUX |= (1 << ADLAR) | (1 << REFS0);   // Ajuste a la izquierda (ADLAR), Referencia AVCC (REFS0)
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 66       	ori	r24, 0x60	; 96
  ae:	80 83       	st	Z, r24
	
	// Habilitación de ADC e interrupciones por conversión completada
	ADCSRA |= (1 << ADEN) | (1 << ADIE);    // Habilitar ADC y habilitar interrupción ADC
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 68       	ori	r24, 0x88	; 136
  b8:	80 83       	st	Z, r24
	
	// Prescaler
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);  // Prescaler de 64
  ba:	80 81       	ld	r24, Z
  bc:	86 60       	ori	r24, 0x06	; 6
  be:	80 83       	st	Z, r24
	
	// Configuraciones para Auto Trigger
	ADCSRA |= (1 << ADATE);					// Habilitar Auto Trigger
  c0:	80 81       	ld	r24, Z
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS2);					// Trigger Source Timer/Counter0 Overflow
  c6:	ab e7       	ldi	r26, 0x7B	; 123
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	8c 91       	ld	r24, X
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	8c 93       	st	X, r24
	
	// Iniciar conversión
	ADCSRA |= (1 << ADSC);
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <adc_set_channel>:
}

// Establecer canal en ADC
void adc_set_channel(unsigned char channel)
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);  // Limpiar bits de canal y asignar nuevo canal
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	90 7f       	andi	r25, 0xF0	; 240
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	89 2b       	or	r24, r25
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <init_timer0>:

// Inicialización de TIMER 0 - Disparo de conversión
void init_timer0(void)
{
	// Operamos el temporizador en modo NORMAL
	TCCR0B |= (1 << CS01) | (1 << CS00);	// Prescaler de 64
  e8:	85 b5       	in	r24, 0x25	; 37
  ea:	83 60       	ori	r24, 0x03	; 3
  ec:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
  ee:	16 bc       	out	0x26, r1	; 38
	
	// Habilitar interrupciones por overflow de TIMER0
	TIMSK0 |= (1 << TOIE0);
  f0:	ee e6       	ldi	r30, 0x6E	; 110
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret

000000fc <UART_init>:
#include "Libreria_UART.h"

// Inicialización UART a 9600 baudios
void UART_init(void) {
	// Configura TX como salida, RX como entrada
	DDRD |= (1 << PD1);   // TX
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD0);  // RX
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	8a b9       	out	0x0a, r24	; 10

	// Configura baud rate a 9600 (F_CPU = 16 MHz)
	// UBRR = (F_CPU / (16 * BAUD)) - 1 = 103
	UBRR0 = 103;
 108:	87 e6       	ldi	r24, 0x67	; 103
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 110:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita recepción, transmisión e interrupción de recepción
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 114:	88 e9       	ldi	r24, 0x98	; 152
 116:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8 bits, 1 bit de stop, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 120:	08 95       	ret

00000122 <UART_sendChar>:
}

// Enviar un carácter
void UART_sendChar(char c) {
	while (!(UCSR0A & (1 << UDRE0)));  // Espera buffer libre
 122:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 126:	95 ff       	sbrs	r25, 5
 128:	fc cf       	rjmp	.-8      	; 0x122 <UART_sendChar>
	UDR0 = c;
 12a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 12e:	08 95       	ret

00000130 <UART_sendString>:
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	ec 01       	movw	r28, r24
	while (*str)
 136:	03 c0       	rjmp	.+6      	; 0x13e <UART_sendString+0xe>
	{
		UART_sendChar(*str++);
 138:	21 96       	adiw	r28, 0x01	; 1
 13a:	0e 94 91 00 	call	0x122	; 0x122 <UART_sendChar>
	UDR0 = c;
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
	while (*str)
 13e:	88 81       	ld	r24, Y
 140:	81 11       	cpse	r24, r1
 142:	fa cf       	rjmp	.-12     	; 0x138 <UART_sendString+0x8>
	{
		UART_sendChar(*str++);
	}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <setup>:

	// Mostrar el nibble bajo de `data` (los 4 bits más bajos) en PORTD (PD2-PD5)
	PORTD |= (data & 0x0F) << 2;  // Escribir solo el nibble bajo (los 4 bits más bajos)

	// Mostrar el nibble alto de `data` (los 4 bits más altos) en PORTB (PB0-PB3)
	PORTB = (data & 0xF0) >> 4;  // Escribir el nibble alto en PB0-PB3
 14a:	f8 94       	cli
 14c:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_adc>
 150:	0e 94 74 00 	call	0xe8	; 0xe8 <init_timer0>
 154:	0e 94 7e 00 	call	0xfc	; 0xfc <UART_init>
 158:	8a b1       	in	r24, 0x0a	; 10
 15a:	8c 63       	ori	r24, 0x3C	; 60
 15c:	8a b9       	out	0x0a, r24	; 10
 15e:	8f e0       	ldi	r24, 0x0F	; 15
 160:	84 b9       	out	0x04, r24	; 4
 162:	78 94       	sei
 164:	08 95       	ret

00000166 <main>:
 166:	0e 94 a5 00 	call	0x14a	; 0x14a <setup>
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 98 00 	call	0x130	; 0x130 <UART_sendString>
 172:	ff cf       	rjmp	.-2      	; 0x172 <main+0xc>

00000174 <__vector_21>:
}


// Interrupción por conversión completa en el ADC - Lectura y Multiplexado de canales
ISR(ADC_vect)
{	
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	// Hacer multiplexado de canal
	switch(current_channel)
 196:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <current_channel>
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	81 f0       	breq	.+32     	; 0x1be <__vector_21+0x4a>
 19e:	28 f0       	brcs	.+10     	; 0x1aa <__vector_21+0x36>
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	b9 f0       	breq	.+46     	; 0x1d2 <__vector_21+0x5e>
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	f9 f0       	breq	.+62     	; 0x1e6 <__vector_21+0x72>
 1a8:	28 c0       	rjmp	.+80     	; 0x1fa <__vector_21+0x86>
	{
		case 0:
			adc_value_chan0 = ADCH;		// Guardar valor para canal 0
 1aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1ae:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <adc_value_chan0>
			current_channel = 1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <current_channel>
			adc_set_channel(1);			// Cambiar al canal 1
 1b8:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_set_channel>
			break;
 1bc:	27 c0       	rjmp	.+78     	; 0x20c <__vector_21+0x98>
			
		case 1:
			adc_value_chan1 = ADCH;		// Guardar valor para canal 1
 1be:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1c2:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <adc_value_chan1>
			current_channel = 2;
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <current_channel>
			adc_set_channel(2);			// Cambiar al canal 2
 1cc:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_set_channel>
			break;
 1d0:	1d c0       	rjmp	.+58     	; 0x20c <__vector_21+0x98>
			
		case 2:
			adc_value_chan2 = ADCH;		// Guardar valor para canal 2
 1d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1d6:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <adc_value_chan2>
			current_channel = 3;
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <current_channel>
			adc_set_channel(3);			// Cambiar al canal 3
 1e0:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_set_channel>
			break;
 1e4:	13 c0       	rjmp	.+38     	; 0x20c <__vector_21+0x98>
		
		case 3:
			adc_value_chan3 = ADCH;		// Guardar valor para canal 3
 1e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1ea:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
			current_channel = 0;
 1ee:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <current_channel>
			adc_set_channel(0);			// Cambiar al canal 0
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_set_channel>
			break;
 1f8:	09 c0       	rjmp	.+18     	; 0x20c <__vector_21+0x98>
		
		default:
			adc_value_chan0 = ADCH;		// Guardar valor para canal 0
 1fa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1fe:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <adc_value_chan0>
			current_channel = 0;
 202:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <current_channel>
			adc_set_channel(0);			// En cualquier otro caso regresar al canal 0
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_set_channel>
			break;
	}
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
