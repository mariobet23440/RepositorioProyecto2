
Proyecto2_ModoManual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000002ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f04  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099b  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098f  00000000  00000000  00001d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  000026ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000647  00000000  00000000  0000291c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037e  00000000  00000000  00002f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000032e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  9e:	0c 94 21 01 	jmp	0x242	; 0x242 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_adc>:

#include "LibreriaADC.h"

void setup_adc(void)
{
	ADMUX  = (1 << REFS0) | (1 << ADLAR);  // AVCC, resultado a la izquierda
  a6:	80 e6       	ldi	r24, 0x60	; 96
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADATE) | (1 << ADPS2) | (1 << ADPS1);
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	8e ea       	ldi	r24, 0xAE	; 174
  b2:	80 83       	st	Z, r24
	ADCSRB = 0x00;                         // Modo de Trigger Libre
  b4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADCSRA |= (1 << ADSC);                 // Iniciar la conversión
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <adc_set_channel>:


// Establecer canal en ADC
void adc_set_channel(unsigned char channel)
{
	ADMUX = (1 << ADLAR) | (1 << REFS0) | (channel & 0x0F); // Limpiar bits de canal y asignar nuevo canal
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	80 66       	ori	r24, 0x60	; 96
  c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  c8:	08 95       	ret

000000ca <init_HBridgePins>:
	PORTD &= ~(1 << PD2);  // IN1 = LOW
	PORTD |= (1 << PD3);   // IN2 = HIGH
}

void motorA_stop(void) {
	PORTD &= ~((1 << PD2) | (1 << PD3));  // IN1 = LOW, IN2 = LOW
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	8c 60       	ori	r24, 0x0C	; 12
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	80 69       	ori	r24, 0x90	; 144
  d4:	8a b9       	out	0x0a, r24	; 10
  d6:	08 95       	ret

000000d8 <motorA_forward>:
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	8b b9       	out	0x0b, r24	; 11
  de:	8b b1       	in	r24, 0x0b	; 11
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	8b b9       	out	0x0b, r24	; 11
  e4:	08 95       	ret

000000e6 <motorB_forward>:
}

// Control de dirección - Motor B
void motorB_forward(void) {
	PORTD |= (1 << PD4);   // IN3 = HIGH
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD7);  // IN4 = LOW
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	8f 77       	andi	r24, 0x7F	; 127
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	08 95       	ret

000000f4 <init_timer0>:

// Inicialización de TIMER0 - PWM
void init_timer0(void)
{
    // Modo Fast PWM, TOP = 255, salida no invertida en OC0A y OC0B
    TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
  f4:	84 b5       	in	r24, 0x24	; 36
  f6:	83 6a       	ori	r24, 0xA3	; 163
  f8:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1 << CS01); // Prescaler de 8 (~7.8kHz con F_CPU = 16MHz)
  fa:	85 b5       	in	r24, 0x25	; 37
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	85 bd       	out	0x25, r24	; 37

    DDRD |= (1 << DDD6); // PD6 como salida (OC0A)
 100:	8a b1       	in	r24, 0x0a	; 10
 102:	80 64       	ori	r24, 0x40	; 64
 104:	8a b9       	out	0x0a, r24	; 10
    DDRD |= (1 << DDD5); // PD5 como salida (OC0B)
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	8a b9       	out	0x0a, r24	; 10
 10c:	08 95       	ret

0000010e <TIMER0_PWMA_set_PW>:
}

// Establecer ancho de pulso en OC0A
void TIMER0_PWMA_set_PW(uint8_t value)
{
    OCR0A = 255 - value;
 10e:	80 95       	com	r24
 110:	87 bd       	out	0x27, r24	; 39
 112:	08 95       	ret

00000114 <TIMER0_PWMB_set_PW>:
}

// Establecer ancho de pulso en OC0B
void TIMER0_PWMB_set_PW(uint8_t value)
{
    OCR0B = 255 - value;
 114:	80 95       	com	r24
 116:	88 bd       	out	0x28, r24	; 40
 118:	08 95       	ret

0000011a <init_timer1>:
#include "LibreriaTimer1PWM.h"

// Inicialización de Timer1
void init_timer1(void)
{
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Fast PWM, OC1A y OC1B no invertido
 11a:	e0 e8       	ldi	r30, 0x80	; 128
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	82 6a       	ori	r24, 0xA2	; 162
 122:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Prescaler de 8, Fast PWM
 124:	e1 e8       	ldi	r30, 0x81	; 129
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	8a 61       	ori	r24, 0x1A	; 26
 12c:	80 83       	st	Z, r24
	ICR1 = 39999;							// Establecer TOP a 39999 (Frecuencia de 50 Hz, 20ms)
 12e:	8f e3       	ldi	r24, 0x3F	; 63
 130:	9c e9       	ldi	r25, 0x9C	; 156
 132:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 136:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << DDB1) | (1 << DDB2);		// Configurar PB1 y PB2 como salida (OC1A y OC1B)
 13a:	84 b1       	in	r24, 0x04	; 4
 13c:	86 60       	ori	r24, 0x06	; 6
 13e:	84 b9       	out	0x04, r24	; 4
 140:	08 95       	ret

00000142 <UART_init>:
#include "Libreria_UART.h"

// Inicialización UART a 9600 baudios
void UART_init(void) {
	// Configura TX como salida, RX como entrada
	DDRD |= (1 << PD1);   // TX
 142:	8a b1       	in	r24, 0x0a	; 10
 144:	82 60       	ori	r24, 0x02	; 2
 146:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD0);  // RX
 148:	8a b1       	in	r24, 0x0a	; 10
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	8a b9       	out	0x0a, r24	; 10

	// Configura baud rate a 9600 (F_CPU = 16 MHz)
	// UBRR = (F_CPU / (16 * BAUD)) - 1 = 103
	UBRR0 = 103;
 14e:	87 e6       	ldi	r24, 0x67	; 103
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 156:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita recepción, transmisión e interrupción de recepción
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 15a:	88 e9       	ldi	r24, 0x98	; 152
 15c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8 bits, 1 bit de stop, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 166:	08 95       	ret

00000168 <setup>:
/**
 * Función de configuración del sistema.
 * Inicializa todos los periféricos necesarios.
 */
void setup(void) {
	cli(); // Deshabilitar interrupciones globales
 168:	f8 94       	cli

	// Inicialización de periféricos
	init_timer0();          // PWM para motores
 16a:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_timer0>
	init_timer1();          // PWM para servos
 16e:	0e 94 8d 00 	call	0x11a	; 0x11a <init_timer1>
	init_HBridgePins();     // Pines de dirección del puente H
 172:	0e 94 65 00 	call	0xca	; 0xca <init_HBridgePins>
	setup_adc();            // Configuración del ADC
 176:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_adc>
	UART_init();
 17a:	0e 94 a1 00 	call	0x142	; 0x142 <UART_init>

	sei(); // Habilitar interrupciones globales
 17e:	78 94       	sei
 180:	08 95       	ret

00000182 <main>:
 * Función principal del programa.
 * Ejecuta un bucle infinito donde lee entradas analógicas
 * y mueve los motores en base a eso.
 */
int main(void) {
	setup(); // Inicializar el sistema
 182:	0e 94 b4 00 	call	0x168	; 0x168 <setup>

	while (1) {
		// Movimiento controlado por potenciómetros
		//manual_mode_movement(adc_value_chan0, adc_value_chan1, adc_value_chan2, adc_value_chan3);
		
		motorA_forward();
 186:	0e 94 6c 00 	call	0xd8	; 0xd8 <motorA_forward>
		motorB_forward();
 18a:	0e 94 73 00 	call	0xe6	; 0xe6 <motorB_forward>
		TIMER0_PWMA_set_PW(255); // Máxima potencia para motor A
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	0e 94 87 00 	call	0x10e	; 0x10e <TIMER0_PWMA_set_PW>
		TIMER0_PWMB_set_PW(255); // Máxima potencia para motor B
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	0e 94 8a 00 	call	0x114	; 0x114 <TIMER0_PWMB_set_PW>
 19a:	f5 cf       	rjmp	.-22     	; 0x186 <main+0x4>

0000019c <__vector_21>:
/**
 * Interrupción del ADC.
 * Se encarga de cambiar de canal cada vez que se completa una conversión.
 * Esto permite leer múltiples canales secuencialmente.
 */
ISR(ADC_vect) {
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	switch(current_channel) {
 1be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_channel>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	81 f0       	breq	.+32     	; 0x1e6 <__vector_21+0x4a>
 1c6:	28 f0       	brcs	.+10     	; 0x1d2 <__vector_21+0x36>
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	b9 f0       	breq	.+46     	; 0x1fa <__vector_21+0x5e>
 1cc:	83 30       	cpi	r24, 0x03	; 3
 1ce:	f9 f0       	breq	.+62     	; 0x20e <__vector_21+0x72>
 1d0:	27 c0       	rjmp	.+78     	; 0x220 <__vector_21+0x84>
		case 0:
			adc_value_chan0 = ADCH;       // Leer canal 0
 1d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1d6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adc_value_chan0>
			current_channel = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_channel>
			adc_set_channel(1);           // Cambiar a canal 1
 1e0:	0e 94 60 00 	call	0xc0	; 0xc0 <adc_set_channel>
			break;
 1e4:	1d c0       	rjmp	.+58     	; 0x220 <__vector_21+0x84>
		case 1:
			adc_value_chan1 = ADCH;       // Leer canal 1
 1e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_value_chan1>
			current_channel = 2;
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_channel>
			adc_set_channel(2);
 1f4:	0e 94 60 00 	call	0xc0	; 0xc0 <adc_set_channel>
			break;
 1f8:	13 c0       	rjmp	.+38     	; 0x220 <__vector_21+0x84>
		case 2:
			adc_value_chan2 = ADCH;       // Leer canal 2
 1fa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_value_chan2>
			current_channel = 3;
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_channel>
			adc_set_channel(3);
 208:	0e 94 60 00 	call	0xc0	; 0xc0 <adc_set_channel>
			break;
 20c:	09 c0       	rjmp	.+18     	; 0x220 <__vector_21+0x84>
		case 3:
			adc_value_chan3 = ADCH;       // Leer canal 3
 20e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			current_channel = 0;
 216:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <current_channel>
			adc_set_channel(0);           // Regresar al canal 0
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 60 00 	call	0xc0	; 0xc0 <adc_set_channel>
			break;
	}
}
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
