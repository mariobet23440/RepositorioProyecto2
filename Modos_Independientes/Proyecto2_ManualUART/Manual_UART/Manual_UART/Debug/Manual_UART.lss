
Manual_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000226  00800100  0000098c  00000a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000098c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800326  00800326  00000c46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bb4  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b40  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d7b  00000000  00000000  00003534  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  000042b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073b  00000000  00000000  000045b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d5  00000000  00000000  00004cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000054c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 33       	cpi	r26, 0x32	; 50
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b6 03 	call	0x76c	; 0x76c <main>
  9e:	0c 94 c4 04 	jmp	0x988	; 0x988 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_adc>:

#include "LibreriaADC.h"

void setup_adc(void)
{
	ADMUX  = (1 << REFS0) | (1 << ADLAR);  // AVCC, resultado a la izquierda
  a6:	80 e6       	ldi	r24, 0x60	; 96
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADATE) | (1 << ADPS2) | (1 << ADPS1);
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	8e ea       	ldi	r24, 0xAE	; 174
  b2:	80 83       	st	Z, r24
	ADCSRB = 0x00;                         // Modo de Trigger Libre
  b4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADCSRA |= (1 << ADSC);                 // Iniciar la conversión
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <adc_set_channel>:


// Establecer canal en ADC
void adc_set_channel(unsigned char channel)
{
	ADMUX = (1 << ADLAR) | (1 << REFS0) | (channel & 0x0F); // Limpiar bits de canal y asignar nuevo canal
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	80 66       	ori	r24, 0x60	; 96
  c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  c8:	08 95       	ret

000000ca <init_timer1>:
#include "LibreriaTimer1PWM.h"

// Inicialización de Timer1
void init_timer1(void)
{
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Fast PWM, OC1A y OC1B no invertido
  ca:	e0 e8       	ldi	r30, 0x80	; 128
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 6a       	ori	r24, 0xA2	; 162
  d2:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Prescaler de 8, Fast PWM
  d4:	e1 e8       	ldi	r30, 0x81	; 129
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	8a 61       	ori	r24, 0x1A	; 26
  dc:	80 83       	st	Z, r24
	ICR1 = 39999;							// Establecer TOP a 39999 (Frecuencia de 50 Hz, 20ms)
  de:	8f e3       	ldi	r24, 0x3F	; 63
  e0:	9c e9       	ldi	r25, 0x9C	; 156
  e2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  e6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << DDB1) | (1 << DDB2);		// Configurar PB1 y PB2 como salida (OC1A y OC1B)
  ea:	84 b1       	in	r24, 0x04	; 4
  ec:	86 60       	ori	r24, 0x06	; 6
  ee:	84 b9       	out	0x04, r24	; 4
  f0:	08 95       	ret

000000f2 <TIMER1_PWMA_set_servo_PW>:
}

// PWM para servo en canal A (PB1)
void TIMER1_PWMA_set_servo_PW(uint8_t value)
{
	uint16_t ticks = ((uint32_t)value * 4000) / 255 + 1000;
  f2:	28 2f       	mov	r18, r24
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	a0 ea       	ldi	r26, 0xA0	; 160
  f8:	bf e0       	ldi	r27, 0x0F	; 15
  fa:	0e 94 80 04 	call	0x900	; 0x900 <__umulhisi3>
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__udivmodsi4>
 10a:	28 51       	subi	r18, 0x18	; 24
 10c:	3c 4f       	sbci	r19, 0xFC	; 252
	OCR1A = ticks;
 10e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 112:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 116:	08 95       	ret

00000118 <TIMER1_PWMB_set_servo_PW>:
}

// PWM para servo en canal B (PB2)
void TIMER1_PWMB_set_servo_PW(uint8_t value)
{
	uint16_t ticks = ((uint32_t)value * 4000) / 255 + 1000;
 118:	28 2f       	mov	r18, r24
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	a0 ea       	ldi	r26, 0xA0	; 160
 11e:	bf e0       	ldi	r27, 0x0F	; 15
 120:	0e 94 80 04 	call	0x900	; 0x900 <__umulhisi3>
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__udivmodsi4>
 130:	28 51       	subi	r18, 0x18	; 24
 132:	3c 4f       	sbci	r19, 0xFC	; 252
	OCR1B = ticks;
 134:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 138:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 13c:	08 95       	ret

0000013e <EEPROM_write>:
#include "Libreria_EEPROM.h"

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 13e:	f9 99       	sbic	0x1f, 1	; 31
 140:	fe cf       	rjmp	.-4      	; 0x13e <EEPROM_write>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
 142:	92 bd       	out	0x22, r25	; 34
 144:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
 146:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
 148:	8f b3       	in	r24, 0x1f	; 31
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
 14e:	8f b3       	in	r24, 0x1f	; 31
 150:	82 60       	ori	r24, 0x02	; 2
 152:	8f bb       	out	0x1f, r24	; 31
 154:	08 95       	ret

00000156 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 156:	f9 99       	sbic	0x1f, 1	; 31
 158:	fe cf       	rjmp	.-4      	; 0x156 <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
 15a:	92 bd       	out	0x22, r25	; 34
 15c:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 15e:	8f b3       	in	r24, 0x1f	; 31
 160:	81 60       	ori	r24, 0x01	; 1
 162:	8f bb       	out	0x1f, r24	; 31
	/* Return data from Data Register */
	return EEDR;
 164:	80 b5       	in	r24, 0x20	; 32
 166:	08 95       	ret

00000168 <init_HBridgePins>:

// Inicialización de pines de salida
void init_HBridgePins(void)
{
	// Configura IN1 e IN2 como salidas
	DDRD |= (1 << PD2) | (1 << PD3);
 168:	8a b1       	in	r24, 0x0a	; 10
 16a:	8c 60       	ori	r24, 0x0C	; 12
 16c:	8a b9       	out	0x0a, r24	; 10
	
	// Configura IN3 e IN4 como salidas
	DDRD |= (1 << PD4) | (1 << PD7);
 16e:	8a b1       	in	r24, 0x0a	; 10
 170:	80 69       	ori	r24, 0x90	; 144
 172:	8a b9       	out	0x0a, r24	; 10
 174:	08 95       	ret

00000176 <motorA_forward>:
}

// Control de dirección - Motor A
void motorA_forward(void) {
	PORTD |= (1 << PD2);   // IN1 = HIGH
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	84 60       	ori	r24, 0x04	; 4
 17a:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD3);  // IN2 = LOW
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	87 7f       	andi	r24, 0xF7	; 247
 180:	8b b9       	out	0x0b, r24	; 11
 182:	08 95       	ret

00000184 <motorA_backward>:
}

void motorA_backward(void) {
	PORTD &= ~(1 << PD2);  // IN1 = LOW
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8b 7f       	andi	r24, 0xFB	; 251
 188:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PD3);   // IN2 = HIGH
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	88 60       	ori	r24, 0x08	; 8
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	08 95       	ret

00000192 <motorA_stop>:
}

void motorA_stop(void) {
	PORTD &= ~((1 << PD2) | (1 << PD3));  // IN1 = LOW, IN2 = LOW
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	83 7f       	andi	r24, 0xF3	; 243
 196:	8b b9       	out	0x0b, r24	; 11
 198:	08 95       	ret

0000019a <motorB_forward>:
}

// Control de dirección - Motor B
void motorB_forward(void) {
	PORTD |= (1 << PD4);   // IN3 = HIGH
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	80 61       	ori	r24, 0x10	; 16
 19e:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD7);  // IN4 = LOW
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	8f 77       	andi	r24, 0x7F	; 127
 1a4:	8b b9       	out	0x0b, r24	; 11
 1a6:	08 95       	ret

000001a8 <motorB_backward>:
}

void motorB_backward(void) {
	PORTD &= ~(1 << PD4);  // IN3 = LOW
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	8f 7e       	andi	r24, 0xEF	; 239
 1ac:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PD7);   // IN4 = HIGH
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	80 68       	ori	r24, 0x80	; 128
 1b2:	8b b9       	out	0x0b, r24	; 11
 1b4:	08 95       	ret

000001b6 <motorB_stop>:
}

void motorB_stop(void) {
	PORTD &= ~((1 << PD4) | (1 << PD7));  // IN3 = LOW, IN3 = LOW
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	8f 76       	andi	r24, 0x6F	; 111
 1ba:	8b b9       	out	0x0b, r24	; 11
 1bc:	08 95       	ret

000001be <init_timer0>:

// Inicialización de TIMER0 - PWM
void init_timer0(void)
{
	// Fast PWM, OC0A y OC0B no invertidos
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
 1be:	84 b5       	in	r24, 0x24	; 36
 1c0:	83 6a       	ori	r24, 0xA3	; 163
 1c2:	84 bd       	out	0x24, r24	; 36

	// Limpiar bits del prescaler
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
 1c4:	85 b5       	in	r24, 0x25	; 37
 1c6:	88 7f       	andi	r24, 0xF8	; 248
 1c8:	85 bd       	out	0x25, r24	; 37

	// Establecer prescaler = 128 (no está directamente soportado por hardware)
	// Usamos 256 mejor (estándar en AVR), para obtener 244 Hz
	TCCR0B |= (1 << CS02); // prescaler = 256
 1ca:	85 b5       	in	r24, 0x25	; 37
 1cc:	84 60       	ori	r24, 0x04	; 4
 1ce:	85 bd       	out	0x25, r24	; 37

	// Salidas PWM
	DDRD |= (1 << DDD6); // OC0A - Motor A
 1d0:	8a b1       	in	r24, 0x0a	; 10
 1d2:	80 64       	ori	r24, 0x40	; 64
 1d4:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD5); // OC0B - Motor B
 1d6:	8a b1       	in	r24, 0x0a	; 10
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	8a b9       	out	0x0a, r24	; 10
 1dc:	08 95       	ret

000001de <TIMER0_PWMA_set_PW>:
}

// Establecer ancho de pulso en OC0A
void TIMER0_PWMA_set_PW(uint8_t value)
{
    OCR0A = 255 - value;
 1de:	80 95       	com	r24
 1e0:	87 bd       	out	0x27, r24	; 39
 1e2:	08 95       	ret

000001e4 <TIMER0_PWMB_set_PW>:
}

// Establecer ancho de pulso en OC0B
void TIMER0_PWMB_set_PW(uint8_t value)
{
    OCR0B = 255 - value;
 1e4:	80 95       	com	r24
 1e6:	88 bd       	out	0x28, r24	; 40
 1e8:	08 95       	ret

000001ea <UART_init>:
#include "Libreria_UART.h"

// Inicialización UART a 9600 baudios
void UART_init(void) {
	// Configura TX como salida, RX como entrada
	DDRD |= (1 << PD1);   // TX
 1ea:	8a b1       	in	r24, 0x0a	; 10
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD0);  // RX
 1f0:	8a b1       	in	r24, 0x0a	; 10
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	8a b9       	out	0x0a, r24	; 10

	// Configura baud rate a 9600 (F_CPU = 16 MHz)
	// UBRR = (F_CPU / (16 * BAUD)) - 1 = 103
	UBRR0 = 103;
 1f6:	87 e6       	ldi	r24, 0x67	; 103
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita recepción, transmisión e interrupción de recepción
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 202:	88 e9       	ldi	r24, 0x98	; 152
 204:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8 bits, 1 bit de stop, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 208:	86 e0       	ldi	r24, 0x06	; 6
 20a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 20e:	08 95       	ret

00000210 <UART_sendChar>:
}

// Enviar un carácter
void UART_sendChar(char c) {
	while (!(UCSR0A & (1 << UDRE0)));  // Espera buffer libre
 210:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 214:	95 ff       	sbrs	r25, 5
 216:	fc cf       	rjmp	.-8      	; 0x210 <UART_sendChar>
	UDR0 = c;
 218:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 21c:	08 95       	ret

0000021e <UART_sendString>:
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	ec 01       	movw	r28, r24
	while (*str)
 224:	03 c0       	rjmp	.+6      	; 0x22c <UART_sendString+0xe>
	{
		UART_sendChar(*str++);
 226:	21 96       	adiw	r28, 0x01	; 1
 228:	0e 94 08 01 	call	0x210	; 0x210 <UART_sendChar>
	UDR0 = c;
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
	while (*str)
 22c:	88 81       	ld	r24, Y
 22e:	81 11       	cpse	r24, r1
 230:	fa cf       	rjmp	.-12     	; 0x226 <UART_sendString+0x8>
	{
		UART_sendChar(*str++);
	}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <normalize_input>:
/* FUNCIONES AUXILIARES                                                 */
/************************************************************************/

int8_t normalize_input(char valor) {
	return ((int16_t)valor - 128);
}
 238:	80 58       	subi	r24, 0x80	; 128
 23a:	08 95       	ret

0000023c <move_differential>:

void move_differential(int8_t traslacion, int8_t rotacion) {
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
	int16_t vel_izq = traslacion - rotacion;
 244:	c8 2f       	mov	r28, r24
 246:	08 2e       	mov	r0, r24
 248:	00 0c       	add	r0, r0
 24a:	dd 0b       	sbc	r29, r29
 24c:	26 2f       	mov	r18, r22
 24e:	06 2e       	mov	r0, r22
 250:	00 0c       	add	r0, r0
 252:	33 0b       	sbc	r19, r19
 254:	8e 01       	movw	r16, r28
 256:	02 1b       	sub	r16, r18
 258:	13 0b       	sbc	r17, r19
	int16_t vel_der = traslacion + rotacion;
 25a:	c2 0f       	add	r28, r18
 25c:	d3 1f       	adc	r29, r19

	if (vel_izq > 255) vel_izq = 255;
	if (vel_izq < -255) vel_izq = -255;
 25e:	01 30       	cpi	r16, 0x01	; 1
 260:	9f ef       	ldi	r25, 0xFF	; 255
 262:	19 07       	cpc	r17, r25
 264:	14 f4       	brge	.+4      	; 0x26a <move_differential+0x2e>
 266:	01 e0       	ldi	r16, 0x01	; 1
 268:	1f ef       	ldi	r17, 0xFF	; 255
	if (vel_der > 255) vel_der = 255;
	if (vel_der < -255) vel_der = -255;
 26a:	c1 30       	cpi	r28, 0x01	; 1
 26c:	9f ef       	ldi	r25, 0xFF	; 255
 26e:	d9 07       	cpc	r29, r25
 270:	14 f4       	brge	.+4      	; 0x276 <move_differential+0x3a>
 272:	c1 e0       	ldi	r28, 0x01	; 1
 274:	df ef       	ldi	r29, 0xFF	; 255

	if (traslacion > -10 && traslacion < 10 && rotacion > -10 && rotacion < 10) {
 276:	87 5f       	subi	r24, 0xF7	; 247
 278:	83 31       	cpi	r24, 0x13	; 19
 27a:	78 f4       	brcc	.+30     	; 0x29a <move_differential+0x5e>
 27c:	67 3f       	cpi	r22, 0xF7	; 247
 27e:	6c f0       	brlt	.+26     	; 0x29a <move_differential+0x5e>
 280:	6a 30       	cpi	r22, 0x0A	; 10
 282:	5c f4       	brge	.+22     	; 0x29a <move_differential+0x5e>
		motorA_stop();
 284:	0e 94 c9 00 	call	0x192	; 0x192 <motorA_stop>
		motorB_stop();
 288:	0e 94 db 00 	call	0x1b6	; 0x1b6 <motorB_stop>
		TIMER0_PWMA_set_PW(0);
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 ef 00 	call	0x1de	; 0x1de <TIMER0_PWMA_set_PW>
		TIMER0_PWMB_set_PW(0);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TIMER0_PWMB_set_PW>
		return;
 298:	1c c0       	rjmp	.+56     	; 0x2d2 <move_differential+0x96>
	}

	if (vel_izq >= 0) {
 29a:	11 23       	and	r17, r17
 29c:	34 f0       	brlt	.+12     	; 0x2aa <move_differential+0x6e>
		motorA_forward();
 29e:	0e 94 bb 00 	call	0x176	; 0x176 <motorA_forward>
		TIMER0_PWMA_set_PW((uint8_t)vel_izq);
 2a2:	80 2f       	mov	r24, r16
 2a4:	0e 94 ef 00 	call	0x1de	; 0x1de <TIMER0_PWMA_set_PW>
 2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <move_differential+0x7a>
		} else {
		motorA_backward();
 2aa:	0e 94 c2 00 	call	0x184	; 0x184 <motorA_backward>
		TIMER0_PWMA_set_PW((uint8_t)(-vel_izq));
 2ae:	80 2f       	mov	r24, r16
 2b0:	81 95       	neg	r24
 2b2:	0e 94 ef 00 	call	0x1de	; 0x1de <TIMER0_PWMA_set_PW>
	}

	if (vel_der >= 0) {
 2b6:	dd 23       	and	r29, r29
 2b8:	34 f0       	brlt	.+12     	; 0x2c6 <move_differential+0x8a>
		motorB_forward();
 2ba:	0e 94 cd 00 	call	0x19a	; 0x19a <motorB_forward>
		TIMER0_PWMB_set_PW((uint8_t)vel_der);
 2be:	8c 2f       	mov	r24, r28
 2c0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TIMER0_PWMB_set_PW>
 2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <move_differential+0x96>
		} else {
		motorB_backward();
 2c6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <motorB_backward>
		TIMER0_PWMB_set_PW((uint8_t)(-vel_der));
 2ca:	8c 2f       	mov	r24, r28
 2cc:	81 95       	neg	r24
 2ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TIMER0_PWMB_set_PW>
	}
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	08 95       	ret

000002dc <manual_mode_movement>:

void manual_mode_movement(char Mx, char My, char Sx, char Sy) {
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	c8 2f       	mov	r28, r24
 2e4:	d6 2f       	mov	r29, r22
 2e6:	84 2f       	mov	r24, r20
 2e8:	12 2f       	mov	r17, r18
	TIMER1_PWMA_set_servo_PW(Sx);
 2ea:	0e 94 79 00 	call	0xf2	; 0xf2 <TIMER1_PWMA_set_servo_PW>
	TIMER1_PWMB_set_servo_PW(Sy);
 2ee:	81 2f       	mov	r24, r17
 2f0:	0e 94 8c 00 	call	0x118	; 0x118 <TIMER1_PWMB_set_servo_PW>
	int8_t traslacion = normalize_input(Mx);
 2f4:	8c 2f       	mov	r24, r28
 2f6:	0e 94 1c 01 	call	0x238	; 0x238 <normalize_input>
 2fa:	c8 2f       	mov	r28, r24
	int8_t rotacion = normalize_input(My);
 2fc:	8d 2f       	mov	r24, r29
 2fe:	0e 94 1c 01 	call	0x238	; 0x238 <normalize_input>
	move_differential(traslacion, rotacion);
 302:	68 2f       	mov	r22, r24
 304:	8c 2f       	mov	r24, r28
 306:	0e 94 1e 01 	call	0x23c	; 0x23c <move_differential>
}
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	08 95       	ret

00000312 <process_instruction_uart>:

/************************************************************************/
/* COMUNICACIÓN UART - Procesamiento de Frame                           */
/************************************************************************/
void process_instruction_uart(void) {
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	60 97       	sbiw	r28, 0x10	; 16
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
	uint16_t instruction = ((uint16_t)received_data[0] << 8) | received_data[1];
 32c:	ef e2       	ldi	r30, 0x2F	; 47
 32e:	f3 e0       	ldi	r31, 0x03	; 3
 330:	00 81       	ld	r16, Z
 332:	10 e0       	ldi	r17, 0x00	; 0
 334:	10 2f       	mov	r17, r16
 336:	00 27       	eor	r16, r16
 338:	81 81       	ldd	r24, Z+1	; 0x01
 33a:	08 2b       	or	r16, r24
	char data_char = received_data[2];
 33c:	f2 80       	ldd	r15, Z+2	; 0x02

	char buffer[8];

	UART_sendString("\r\n[UART] RX START: ");
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 346:	40 e1       	ldi	r20, 0x10	; 16
 348:	be 01       	movw	r22, r28
 34a:	6f 5f       	subi	r22, 0xFF	; 255
 34c:	7f 4f       	sbci	r23, 0xFF	; 255
 34e:	80 e3       	ldi	r24, 0x30	; 48
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 8f 04 	call	0x91e	; 0x91e <__itoa_ncheck>
	itoa(RXTX_START, buffer, 16);
	UART_sendString("0x");
 356:	89 e2       	ldi	r24, 0x29	; 41
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
	UART_sendString(buffer);
 35e:	ce 01       	movw	r24, r28
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>

	UART_sendString(", INSTR: 0x");
 366:	85 e1       	ldi	r24, 0x15	; 21
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
 36e:	40 e1       	ldi	r20, 0x10	; 16
 370:	be 01       	movw	r22, r28
 372:	6f 5f       	subi	r22, 0xFF	; 255
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	c8 01       	movw	r24, r16
 378:	0e 94 8f 04 	call	0x91e	; 0x91e <__itoa_ncheck>
	itoa(instruction, buffer, 16);
	UART_sendString(buffer);
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>

	UART_sendString(", DATA: 0x");
 384:	81 e2       	ldi	r24, 0x21	; 33
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
 38c:	40 e1       	ldi	r20, 0x10	; 16
 38e:	be 01       	movw	r22, r28
 390:	6f 5f       	subi	r22, 0xFF	; 255
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	8f 2d       	mov	r24, r15
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 8f 04 	call	0x91e	; 0x91e <__itoa_ncheck>
	itoa(data_char, buffer, 16);
	UART_sendString(buffer);
 39c:	ce 01       	movw	r24, r28
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>

	UART_sendString(", RX END: ");
 3a4:	8c e2       	ldi	r24, 0x2C	; 44
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
 3ac:	40 e1       	ldi	r20, 0x10	; 16
 3ae:	be 01       	movw	r22, r28
 3b0:	6f 5f       	subi	r22, 0xFF	; 255
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	8a e5       	ldi	r24, 0x5A	; 90
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 8f 04 	call	0x91e	; 0x91e <__itoa_ncheck>
	itoa(RXTX_END, buffer, 16);
	UART_sendString("0x");
 3bc:	89 e2       	ldi	r24, 0x29	; 41
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
	UART_sendString(buffer);
 3c4:	ce 01       	movw	r24, r28
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
	UART_sendString("\r\n");
 3cc:	8e ed       	ldi	r24, 0xDE	; 222
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
	
	PORTC &= ~(1 << PORTC5); // Apagar LED EEPROM
 3d4:	88 b1       	in	r24, 0x08	; 8
 3d6:	8f 7d       	andi	r24, 0xDF	; 223
 3d8:	88 b9       	out	0x08, r24	; 8

	switch (instruction) {
 3da:	04 34       	cpi	r16, 0x44	; 68
 3dc:	84 e4       	ldi	r24, 0x44	; 68
 3de:	18 07       	cpc	r17, r24
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <process_instruction_uart+0xd2>
 3e2:	68 c0       	rjmp	.+208    	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 3e4:	70 f4       	brcc	.+28     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3e6:	02 34       	cpi	r16, 0x42	; 66
 3e8:	82 e4       	ldi	r24, 0x42	; 66
 3ea:	18 07       	cpc	r17, r24
 3ec:	e1 f1       	breq	.+120    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 3ee:	03 34       	cpi	r16, 0x43	; 67
 3f0:	83 e4       	ldi	r24, 0x43	; 67
 3f2:	18 07       	cpc	r17, r24
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <process_instruction_uart+0xe6>
 3f6:	54 c0       	rjmp	.+168    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 3f8:	01 34       	cpi	r16, 0x41	; 65
 3fa:	11 44       	sbci	r17, 0x41	; 65
 3fc:	09 f0       	breq	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	81 c1       	rjmp	.+770    	; 0x702 <__EEPROM_REGION_LENGTH__+0x302>
 400:	15 c0       	rjmp	.+42     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 402:	06 34       	cpi	r16, 0x46	; 70
 404:	86 e4       	ldi	r24, 0x46	; 70
 406:	18 07       	cpc	r17, r24
 408:	09 f4       	brne	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40a:	e0 c0       	rjmp	.+448    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
 40c:	28 f4       	brcc	.+10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 40e:	05 34       	cpi	r16, 0x45	; 69
 410:	15 44       	sbci	r17, 0x45	; 69
 412:	09 f4       	brne	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 414:	59 c0       	rjmp	.+178    	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 416:	75 c1       	rjmp	.+746    	; 0x702 <__EEPROM_REGION_LENGTH__+0x302>
 418:	07 34       	cpi	r16, 0x47	; 71
 41a:	87 e4       	ldi	r24, 0x47	; 71
 41c:	18 07       	cpc	r17, r24
 41e:	09 f4       	brne	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 420:	5b c1       	rjmp	.+694    	; 0x6d8 <__EEPROM_REGION_LENGTH__+0x2d8>
 422:	08 34       	cpi	r16, 0x48	; 72
 424:	18 44       	sbci	r17, 0x48	; 72
 426:	09 f4       	brne	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 428:	62 c1       	rjmp	.+708    	; 0x6ee <__EEPROM_REGION_LENGTH__+0x2ee>
 42a:	6b c1       	rjmp	.+726    	; 0x702 <__EEPROM_REGION_LENGTH__+0x302>
		case MOTORREDUCTOR_X:
		UART_sendString("[LOG] Ejecutando: MOTORREDUCTOR_X\r\n");
 42c:	87 e3       	ldi	r24, 0x37	; 55
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		if (data_char > 127) {
 434:	ff 20       	and	r15, r15
 436:	3c f4       	brge	.+14     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
			motorA_forward();
 438:	0e 94 bb 00 	call	0x176	; 0x176 <motorA_forward>
			TIMER0_PWMA_set_PW(data_char - 128);
 43c:	80 e8       	ldi	r24, 0x80	; 128
 43e:	8f 0d       	add	r24, r15
 440:	0e 94 ef 00 	call	0x1de	; 0x1de <TIMER0_PWMA_set_PW>
 444:	62 c1       	rjmp	.+708    	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
			} else if (data_char < 127) {
 446:	8e e7       	ldi	r24, 0x7E	; 126
 448:	8f 15       	cp	r24, r15
 44a:	38 f0       	brcs	.+14     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			motorA_backward();
 44c:	0e 94 c2 00 	call	0x184	; 0x184 <motorA_backward>
			TIMER0_PWMA_set_PW(127 - data_char);
 450:	8f e7       	ldi	r24, 0x7F	; 127
 452:	8f 19       	sub	r24, r15
 454:	0e 94 ef 00 	call	0x1de	; 0x1de <TIMER0_PWMA_set_PW>
 458:	58 c1       	rjmp	.+688    	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
			} else {
			motorA_stop();
 45a:	0e 94 c9 00 	call	0x192	; 0x192 <motorA_stop>
			TIMER0_PWMA_set_PW(0);
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 ef 00 	call	0x1de	; 0x1de <TIMER0_PWMA_set_PW>
 464:	52 c1       	rjmp	.+676    	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
		}
		break;
		
		case MOTORREDUCTOR_Y:
		UART_sendString("[LOG] Ejecutando: MOTORREDUCTOR_Y\r\n");
 466:	8b e5       	ldi	r24, 0x5B	; 91
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		if (data_char > 127) {
 46e:	ff 20       	and	r15, r15
 470:	3c f4       	brge	.+14     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			motorB_forward();
 472:	0e 94 cd 00 	call	0x19a	; 0x19a <motorB_forward>
			TIMER0_PWMB_set_PW(data_char - 128);
 476:	80 e8       	ldi	r24, 0x80	; 128
 478:	8f 0d       	add	r24, r15
 47a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TIMER0_PWMB_set_PW>
 47e:	45 c1       	rjmp	.+650    	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
			} else if (data_char < 127) {
 480:	8e e7       	ldi	r24, 0x7E	; 126
 482:	8f 15       	cp	r24, r15
 484:	38 f0       	brcs	.+14     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
			motorB_backward();
 486:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <motorB_backward>
			TIMER0_PWMB_set_PW(127 - data_char);
 48a:	8f e7       	ldi	r24, 0x7F	; 127
 48c:	8f 19       	sub	r24, r15
 48e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TIMER0_PWMB_set_PW>
 492:	3b c1       	rjmp	.+630    	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
			} else {
			motorA_stop();
 494:	0e 94 c9 00 	call	0x192	; 0x192 <motorA_stop>
			TIMER0_PWMA_set_PW(0);
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	0e 94 ef 00 	call	0x1de	; 0x1de <TIMER0_PWMA_set_PW>
 49e:	35 c1       	rjmp	.+618    	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
		}
		break;
		
		case SERVOMOTOR_X:
		UART_sendString("[LOG] Ejecutando: SERVOMOTOR_X\r\n");
 4a0:	8f e7       	ldi	r24, 0x7F	; 127
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		TIMER1_PWMA_set_servo_PW(data_char);
 4a8:	8f 2d       	mov	r24, r15
 4aa:	0e 94 79 00 	call	0xf2	; 0xf2 <TIMER1_PWMA_set_servo_PW>
		servoX_current_position = data_char;
 4ae:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <servoX_current_position>
		break;
 4b2:	2b c1       	rjmp	.+598    	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
		
		case SERVOMOTOR_Y:
		UART_sendString("[LOG] Ejecutando: SERVOMOTOR_Y\r\n");
 4b4:	80 ea       	ldi	r24, 0xA0	; 160
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		TIMER1_PWMB_set_servo_PW(data_char);
 4bc:	8f 2d       	mov	r24, r15
 4be:	0e 94 8c 00 	call	0x118	; 0x118 <TIMER1_PWMB_set_servo_PW>
		servoY_current_position = data_char;
 4c2:	f0 92 26 03 	sts	0x0326, r15	; 0x800326 <__data_end>
		break;
 4c6:	21 c1       	rjmp	.+578    	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
		
		case EEPROM_READ:
		PORTC |= (1 << PORTC5);	// Encender LED EEPROM	
 4c8:	88 b1       	in	r24, 0x08	; 8
 4ca:	80 62       	ori	r24, 0x20	; 32
 4cc:	88 b9       	out	0x08, r24	; 8
		UART_sendString("[LOG] Ejecutando: EEPROM_READ\r\n");
 4ce:	81 ec       	ldi	r24, 0xC1	; 193
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		UART_sendString("[LOG] Leyendo EEPROM bloque: ");
 4d6:	81 ee       	ldi	r24, 0xE1	; 225
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		UART_sendChar(data_char);
 4de:	8f 2d       	mov	r24, r15
 4e0:	0e 94 08 01 	call	0x210	; 0x210 <UART_sendChar>
		UART_sendString("\r\n");
 4e4:	8e ed       	ldi	r24, 0xDE	; 222
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>

		char read_buffer[8];
		uint8_t valA, valB;

		switch (data_char) {
 4ec:	82 e3       	ldi	r24, 0x32	; 50
 4ee:	f8 16       	cp	r15, r24
 4f0:	c1 f0       	breq	.+48     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 4f2:	8f 15       	cp	r24, r15
 4f4:	20 f0       	brcs	.+8      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4f6:	81 e3       	ldi	r24, 0x31	; 49
 4f8:	f8 16       	cp	r15, r24
 4fa:	41 f0       	breq	.+16     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4fc:	33 c0       	rjmp	.+102    	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
 4fe:	83 e3       	ldi	r24, 0x33	; 51
 500:	f8 16       	cp	r15, r24
 502:	d1 f0       	breq	.+52     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 504:	84 e3       	ldi	r24, 0x34	; 52
 506:	f8 16       	cp	r15, r24
 508:	11 f1       	breq	.+68     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
 50a:	2c c0       	rjmp	.+88     	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
			case '1':
			valA = EEPROM_read(EEPROM_ADDRESS1A);
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 ab 00 	call	0x156	; 0x156 <EEPROM_read>
 514:	08 2f       	mov	r16, r24
			valB = EEPROM_read(EEPROM_ADDRESS1B);
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 ab 00 	call	0x156	; 0x156 <EEPROM_read>
 51e:	18 2f       	mov	r17, r24
			break;
 520:	26 c0       	rjmp	.+76     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
			case '2':
			valA = EEPROM_read(EEPROM_ADDRESS2A);
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 ab 00 	call	0x156	; 0x156 <EEPROM_read>
 52a:	08 2f       	mov	r16, r24
			valB = EEPROM_read(EEPROM_ADDRESS2B);
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 ab 00 	call	0x156	; 0x156 <EEPROM_read>
 534:	18 2f       	mov	r17, r24
			break;
 536:	1b c0       	rjmp	.+54     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
			case '3':
			valA = EEPROM_read(EEPROM_ADDRESS3A);
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 ab 00 	call	0x156	; 0x156 <EEPROM_read>
 540:	08 2f       	mov	r16, r24
			valB = EEPROM_read(EEPROM_ADDRESS3B);
 542:	85 e0       	ldi	r24, 0x05	; 5
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 ab 00 	call	0x156	; 0x156 <EEPROM_read>
 54a:	18 2f       	mov	r17, r24
			break;
 54c:	10 c0       	rjmp	.+32     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
			case '4':
			valA = EEPROM_read(EEPROM_ADDRESS4A);
 54e:	86 e0       	ldi	r24, 0x06	; 6
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 ab 00 	call	0x156	; 0x156 <EEPROM_read>
 556:	08 2f       	mov	r16, r24
			valB = EEPROM_read(EEPROM_ADDRESS4B);
 558:	87 e0       	ldi	r24, 0x07	; 7
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 ab 00 	call	0x156	; 0x156 <EEPROM_read>
 560:	18 2f       	mov	r17, r24
			break;
 562:	05 c0       	rjmp	.+10     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
			default:
			UART_sendString("[ERROR] Bloque EEPROM inválido\r\n");
 564:	8f ef       	ldi	r24, 0xFF	; 255
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
			return;
 56c:	ce c0       	rjmp	.+412    	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
		}

		// Mostrar valores leídos en hexadecimal
		UART_sendString("[LOG] Valor A leído: 0x");
 56e:	80 e2       	ldi	r24, 0x20	; 32
 570:	92 e0       	ldi	r25, 0x02	; 2
 572:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
 576:	40 e1       	ldi	r20, 0x10	; 16
 578:	be 01       	movw	r22, r28
 57a:	67 5f       	subi	r22, 0xF7	; 247
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	80 2f       	mov	r24, r16
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 8f 04 	call	0x91e	; 0x91e <__itoa_ncheck>
		itoa(valA, read_buffer, 16);
		UART_sendString(read_buffer);
 586:	ce 01       	movw	r24, r28
 588:	09 96       	adiw	r24, 0x09	; 9
 58a:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		UART_sendString("\r\n");
 58e:	8e ed       	ldi	r24, 0xDE	; 222
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>

		UART_sendString("[LOG] Valor B leído: 0x");
 596:	88 e3       	ldi	r24, 0x38	; 56
 598:	92 e0       	ldi	r25, 0x02	; 2
 59a:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
 59e:	40 e1       	ldi	r20, 0x10	; 16
 5a0:	be 01       	movw	r22, r28
 5a2:	67 5f       	subi	r22, 0xF7	; 247
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	81 2f       	mov	r24, r17
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 8f 04 	call	0x91e	; 0x91e <__itoa_ncheck>
		itoa(valB, read_buffer, 16);
		UART_sendString(read_buffer);
 5ae:	ce 01       	movw	r24, r28
 5b0:	09 96       	adiw	r24, 0x09	; 9
 5b2:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		UART_sendString("\r\n");
 5b6:	8e ed       	ldi	r24, 0xDE	; 222
 5b8:	91 e0       	ldi	r25, 0x01	; 1
 5ba:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>

		// Aplicar valores a servos
		TIMER1_PWMA_set_servo_PW(valA);
 5be:	80 2f       	mov	r24, r16
 5c0:	0e 94 79 00 	call	0xf2	; 0xf2 <TIMER1_PWMA_set_servo_PW>
		TIMER1_PWMB_set_servo_PW(valB);
 5c4:	81 2f       	mov	r24, r17
 5c6:	0e 94 8c 00 	call	0x118	; 0x118 <TIMER1_PWMB_set_servo_PW>
		break;
 5ca:	9f c0       	rjmp	.+318    	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
		
		case EEPROM_WRITE:
		PORTC |= (1 << PORTC5);	// Encender LED EEPROM
 5cc:	88 b1       	in	r24, 0x08	; 8
 5ce:	80 62       	ori	r24, 0x20	; 32
 5d0:	88 b9       	out	0x08, r24	; 8
		UART_sendString("[LOG] Ejecutando: EEPROM_WRITE\r\n");
 5d2:	80 e5       	ldi	r24, 0x50	; 80
 5d4:	92 e0       	ldi	r25, 0x02	; 2
 5d6:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		UART_sendString("[LOG] Escribiendo EEPROM bloque: ");
 5da:	81 e7       	ldi	r24, 0x71	; 113
 5dc:	92 e0       	ldi	r25, 0x02	; 2
 5de:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		UART_sendChar(data_char);
 5e2:	8f 2d       	mov	r24, r15
 5e4:	0e 94 08 01 	call	0x210	; 0x210 <UART_sendChar>
		UART_sendString("\r\n");
 5e8:	8e ed       	ldi	r24, 0xDE	; 222
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>

		char write_buffer[8];

		switch (data_char) {
 5f0:	82 e3       	ldi	r24, 0x32	; 50
 5f2:	f8 16       	cp	r15, r24
 5f4:	d1 f0       	breq	.+52     	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
 5f6:	8f 15       	cp	r24, r15
 5f8:	20 f0       	brcs	.+8      	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
 5fa:	81 e3       	ldi	r24, 0x31	; 49
 5fc:	f8 16       	cp	r15, r24
 5fe:	41 f0       	breq	.+16     	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
 600:	3b c0       	rjmp	.+118    	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
 602:	83 e3       	ldi	r24, 0x33	; 51
 604:	f8 16       	cp	r15, r24
 606:	f1 f0       	breq	.+60     	; 0x644 <__EEPROM_REGION_LENGTH__+0x244>
 608:	84 e3       	ldi	r24, 0x34	; 52
 60a:	f8 16       	cp	r15, r24
 60c:	41 f1       	breq	.+80     	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
 60e:	34 c0       	rjmp	.+104    	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
			case '1':
			EEPROM_write(EEPROM_ADDRESS1A, servoX_current_position);
 610:	60 91 27 03 	lds	r22, 0x0327	; 0x800327 <servoX_current_position>
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 9f 00 	call	0x13e	; 0x13e <EEPROM_write>
			EEPROM_write(EEPROM_ADDRESS1B, servoY_current_position);
 61c:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <__data_end>
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 9f 00 	call	0x13e	; 0x13e <EEPROM_write>
			break;
 628:	2c c0       	rjmp	.+88     	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			case '2':
			EEPROM_write(EEPROM_ADDRESS2A, servoX_current_position);
 62a:	60 91 27 03 	lds	r22, 0x0327	; 0x800327 <servoX_current_position>
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 9f 00 	call	0x13e	; 0x13e <EEPROM_write>
			EEPROM_write(EEPROM_ADDRESS2B, servoY_current_position);
 636:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <__data_end>
 63a:	83 e0       	ldi	r24, 0x03	; 3
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 9f 00 	call	0x13e	; 0x13e <EEPROM_write>
			break;
 642:	1f c0       	rjmp	.+62     	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			case '3':
			EEPROM_write(EEPROM_ADDRESS3A, servoX_current_position);
 644:	60 91 27 03 	lds	r22, 0x0327	; 0x800327 <servoX_current_position>
 648:	84 e0       	ldi	r24, 0x04	; 4
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 9f 00 	call	0x13e	; 0x13e <EEPROM_write>
			EEPROM_write(EEPROM_ADDRESS3B, servoY_current_position);
 650:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <__data_end>
 654:	85 e0       	ldi	r24, 0x05	; 5
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 9f 00 	call	0x13e	; 0x13e <EEPROM_write>
			break;
 65c:	12 c0       	rjmp	.+36     	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			case '4':
			EEPROM_write(EEPROM_ADDRESS4A, servoX_current_position);
 65e:	60 91 27 03 	lds	r22, 0x0327	; 0x800327 <servoX_current_position>
 662:	86 e0       	ldi	r24, 0x06	; 6
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 9f 00 	call	0x13e	; 0x13e <EEPROM_write>
			EEPROM_write(EEPROM_ADDRESS4B, servoY_current_position);
 66a:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <__data_end>
 66e:	87 e0       	ldi	r24, 0x07	; 7
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 9f 00 	call	0x13e	; 0x13e <EEPROM_write>
			break;
 676:	05 c0       	rjmp	.+10     	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			default:
			UART_sendString("[ERROR] Bloque EEPROM inválido\r\n");
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
			return;
 680:	44 c0       	rjmp	.+136    	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
		}

		// Mostrar valores escritos en hexadecimal
		UART_sendString("[LOG] Valor A escrito: 0x");
 682:	83 e9       	ldi	r24, 0x93	; 147
 684:	92 e0       	ldi	r25, 0x02	; 2
 686:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		itoa(servoX_current_position, write_buffer, 16);
 68a:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <servoX_current_position>
 68e:	40 e1       	ldi	r20, 0x10	; 16
 690:	be 01       	movw	r22, r28
 692:	67 5f       	subi	r22, 0xF7	; 247
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 8f 04 	call	0x91e	; 0x91e <__itoa_ncheck>
		UART_sendString(write_buffer);
 69c:	ce 01       	movw	r24, r28
 69e:	09 96       	adiw	r24, 0x09	; 9
 6a0:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		UART_sendString("\r\n");
 6a4:	8e ed       	ldi	r24, 0xDE	; 222
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>

		UART_sendString("[LOG] Valor B escrito: 0x");
 6ac:	8d ea       	ldi	r24, 0xAD	; 173
 6ae:	92 e0       	ldi	r25, 0x02	; 2
 6b0:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		itoa(servoY_current_position, write_buffer, 16);
 6b4:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <__data_end>
 6b8:	40 e1       	ldi	r20, 0x10	; 16
 6ba:	be 01       	movw	r22, r28
 6bc:	67 5f       	subi	r22, 0xF7	; 247
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 8f 04 	call	0x91e	; 0x91e <__itoa_ncheck>
		UART_sendString(write_buffer);
 6c6:	ce 01       	movw	r24, r28
 6c8:	09 96       	adiw	r24, 0x09	; 9
 6ca:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		UART_sendString("\r\n");
 6ce:	8e ed       	ldi	r24, 0xDE	; 222
 6d0:	91 e0       	ldi	r25, 0x01	; 1
 6d2:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>

		break;
 6d6:	19 c0       	rjmp	.+50     	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
		
		case MANUAL_ENABLE:
		UART_sendString("[LOG] Modo manual ACTIVADO\r\n");
 6d8:	87 ec       	ldi	r24, 0xC7	; 199
 6da:	92 e0       	ldi	r25, 0x02	; 2
 6dc:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		PORTC &= ~(1 << PORTC4);	// Apagar LED UART después de procesamiento
 6e0:	88 b1       	in	r24, 0x08	; 8
 6e2:	8f 7e       	andi	r24, 0xEF	; 239
 6e4:	88 b9       	out	0x08, r24	; 8
		manual_mode_enabled = 1;
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 6ec:	0e c0       	rjmp	.+28     	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
		
		case MANUAL_DISABLE:
		UART_sendString("[LOG] Modo manual DESACTIVADO\r\n");
 6ee:	84 ee       	ldi	r24, 0xE4	; 228
 6f0:	92 e0       	ldi	r25, 0x02	; 2
 6f2:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		manual_mode_enabled = 0;
 6f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTC |= (1 << PORTC4);		// Encender LED UART	
 6fa:	88 b1       	in	r24, 0x08	; 8
 6fc:	80 61       	ori	r24, 0x10	; 16
 6fe:	88 b9       	out	0x08, r24	; 8
		break;
 700:	04 c0       	rjmp	.+8      	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
		
		default:
		UART_sendString("[ERROR] Instrucción desconocida\r\n");
 702:	84 e0       	ldi	r24, 0x04	; 4
 704:	93 e0       	ldi	r25, 0x03	; 3
 706:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendString>
		break;
	}
}
 70a:	60 96       	adiw	r28, 0x10	; 16
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	f8 94       	cli
 710:	de bf       	out	0x3e, r29	; 62
 712:	0f be       	out	0x3f, r0	; 63
 714:	cd bf       	out	0x3d, r28	; 61
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	ff 90       	pop	r15
 720:	08 95       	ret

00000722 <setup>:

/************************************************************************/
/* CONFIGURACIÓN Y MAIN LOOP                                            */
/************************************************************************/
void setup(void) {
	cli();
 722:	f8 94       	cli
	init_timer0();
 724:	0e 94 df 00 	call	0x1be	; 0x1be <init_timer0>
	init_timer1();
 728:	0e 94 65 00 	call	0xca	; 0xca <init_timer1>
	init_HBridgePins();
 72c:	0e 94 b4 00 	call	0x168	; 0x168 <init_HBridgePins>
	setup_adc();
 730:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_adc>
	UART_init();
 734:	0e 94 f5 00 	call	0x1ea	; 0x1ea <UART_init>
	
	// Configurar PB5, PC4, PC5 como salidas
	DDRB |= (1 << PB5);   // LED_MANUAL
 738:	84 b1       	in	r24, 0x04	; 4
 73a:	80 62       	ori	r24, 0x20	; 32
 73c:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC4);   // LED_UART
 73e:	87 b1       	in	r24, 0x07	; 7
 740:	80 61       	ori	r24, 0x10	; 16
 742:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PC5);   // LED_EEPROM
 744:	87 b1       	in	r24, 0x07	; 7
 746:	80 62       	ori	r24, 0x20	; 32
 748:	87 b9       	out	0x07, r24	; 7

	// Estado inicial: apagados
	PORTB &= ~(1 << PB5);
 74a:	85 b1       	in	r24, 0x05	; 5
 74c:	8f 7d       	andi	r24, 0xDF	; 223
 74e:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1 << PC4);
 750:	88 b1       	in	r24, 0x08	; 8
 752:	8f 7e       	andi	r24, 0xEF	; 239
 754:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PC5);
 756:	88 b1       	in	r24, 0x08	; 8
 758:	8f 7d       	andi	r24, 0xDF	; 223
 75a:	88 b9       	out	0x08, r24	; 8
	
	TIMER1_PWMA_set_servo_PW(127);
 75c:	8f e7       	ldi	r24, 0x7F	; 127
 75e:	0e 94 79 00 	call	0xf2	; 0xf2 <TIMER1_PWMA_set_servo_PW>
	TIMER1_PWMA_set_servo_PW(127);
 762:	8f e7       	ldi	r24, 0x7F	; 127
 764:	0e 94 79 00 	call	0xf2	; 0xf2 <TIMER1_PWMA_set_servo_PW>
	sei();
 768:	78 94       	sei
 76a:	08 95       	ret

0000076c <main>:
}

int main(void) {
	setup();
 76c:	0e 94 91 03 	call	0x722	; 0x722 <setup>

	while (1) {
		if (frame_ready) {
 770:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <frame_ready>
 774:	88 23       	and	r24, r24
 776:	21 f0       	breq	.+8      	; 0x780 <main+0x14>
			process_instruction_uart();
 778:	0e 94 89 01 	call	0x312	; 0x312 <process_instruction_uart>
			frame_ready = 0;
 77c:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <frame_ready>
		}

		if (manual_mode_enabled) {
 780:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 784:	88 23       	and	r24, r24
 786:	71 f0       	breq	.+28     	; 0x7a4 <main+0x38>
			manual_mode_movement(adc_value_chan0, adc_value_chan1, adc_value_chan2, adc_value_chan3);
 788:	20 91 2a 03 	lds	r18, 0x032A	; 0x80032a <adc_value_chan3>
 78c:	40 91 2b 03 	lds	r20, 0x032B	; 0x80032b <adc_value_chan2>
 790:	60 91 2c 03 	lds	r22, 0x032C	; 0x80032c <adc_value_chan1>
 794:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <adc_value_chan0>
 798:	0e 94 6e 01 	call	0x2dc	; 0x2dc <manual_mode_movement>
			PORTB |= (1 << PORTB5); // Encender LED modo manual
 79c:	85 b1       	in	r24, 0x05	; 5
 79e:	80 62       	ori	r24, 0x20	; 32
 7a0:	85 b9       	out	0x05, r24	; 5
 7a2:	e6 cf       	rjmp	.-52     	; 0x770 <main+0x4>
		}
		else{
			PORTB &= ~(1 << PB5); // Apagar LED si modo manual está desactivado
 7a4:	85 b1       	in	r24, 0x05	; 5
 7a6:	8f 7d       	andi	r24, 0xDF	; 223
 7a8:	85 b9       	out	0x05, r24	; 5
 7aa:	e2 cf       	rjmp	.-60     	; 0x770 <main+0x4>

000007ac <__vector_21>:
}

/************************************************************************/
/* INTERRUPCIONES                                                       */
/************************************************************************/
ISR(ADC_vect) {
 7ac:	1f 92       	push	r1
 7ae:	0f 92       	push	r0
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	0f 92       	push	r0
 7b4:	11 24       	eor	r1, r1
 7b6:	2f 93       	push	r18
 7b8:	3f 93       	push	r19
 7ba:	4f 93       	push	r20
 7bc:	5f 93       	push	r21
 7be:	6f 93       	push	r22
 7c0:	7f 93       	push	r23
 7c2:	8f 93       	push	r24
 7c4:	9f 93       	push	r25
 7c6:	af 93       	push	r26
 7c8:	bf 93       	push	r27
 7ca:	ef 93       	push	r30
 7cc:	ff 93       	push	r31
	switch (current_channel) {
 7ce:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <current_channel>
 7d2:	81 30       	cpi	r24, 0x01	; 1
 7d4:	81 f0       	breq	.+32     	; 0x7f6 <__vector_21+0x4a>
 7d6:	28 f0       	brcs	.+10     	; 0x7e2 <__vector_21+0x36>
 7d8:	82 30       	cpi	r24, 0x02	; 2
 7da:	b9 f0       	breq	.+46     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7dc:	83 30       	cpi	r24, 0x03	; 3
 7de:	f9 f0       	breq	.+62     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7e0:	27 c0       	rjmp	.+78     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		case 0: adc_value_chan0 = ADCH; current_channel = 1; adc_set_channel(1); break;
 7e2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 7e6:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <adc_value_chan0>
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <current_channel>
 7f0:	0e 94 60 00 	call	0xc0	; 0xc0 <adc_set_channel>
 7f4:	1d c0       	rjmp	.+58     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		case 1: adc_value_chan1 = ADCH; current_channel = 2; adc_set_channel(2); break;
 7f6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 7fa:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <adc_value_chan1>
 7fe:	82 e0       	ldi	r24, 0x02	; 2
 800:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <current_channel>
 804:	0e 94 60 00 	call	0xc0	; 0xc0 <adc_set_channel>
 808:	13 c0       	rjmp	.+38     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		case 2: adc_value_chan2 = ADCH; current_channel = 3; adc_set_channel(3); break;
 80a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 80e:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <adc_value_chan2>
 812:	83 e0       	ldi	r24, 0x03	; 3
 814:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <current_channel>
 818:	0e 94 60 00 	call	0xc0	; 0xc0 <adc_set_channel>
 81c:	09 c0       	rjmp	.+18     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		case 3: adc_value_chan3 = ADCH; current_channel = 0; adc_set_channel(0); break;
 81e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 822:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <adc_value_chan3>
 826:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <current_channel>
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	0e 94 60 00 	call	0xc0	; 0xc0 <adc_set_channel>
	}
}
 830:	ff 91       	pop	r31
 832:	ef 91       	pop	r30
 834:	bf 91       	pop	r27
 836:	af 91       	pop	r26
 838:	9f 91       	pop	r25
 83a:	8f 91       	pop	r24
 83c:	7f 91       	pop	r23
 83e:	6f 91       	pop	r22
 840:	5f 91       	pop	r21
 842:	4f 91       	pop	r20
 844:	3f 91       	pop	r19
 846:	2f 91       	pop	r18
 848:	0f 90       	pop	r0
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	0f 90       	pop	r0
 84e:	1f 90       	pop	r1
 850:	18 95       	reti

00000852 <__vector_18>:

ISR(USART_RX_vect) {
 852:	1f 92       	push	r1
 854:	0f 92       	push	r0
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	0f 92       	push	r0
 85a:	11 24       	eor	r1, r1
 85c:	8f 93       	push	r24
 85e:	9f 93       	push	r25
 860:	ef 93       	push	r30
 862:	ff 93       	push	r31
	char data = UDR0;
 864:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (!frame_ready) {
 868:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <frame_ready>
 86c:	91 11       	cpse	r25, r1
 86e:	1d c0       	rjmp	.+58     	; 0x8aa <__vector_18+0x58>
		if (data == RXTX_START) {
 870:	80 33       	cpi	r24, 0x30	; 48
 872:	19 f4       	brne	.+6      	; 0x87a <__vector_18+0x28>
			reception_index = 0;
 874:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <reception_index>
 878:	18 c0       	rjmp	.+48     	; 0x8aa <__vector_18+0x58>
			} else if (data == RXTX_END && reception_index == FRAME_SIZE) {
 87a:	8a 35       	cpi	r24, 0x5A	; 90
 87c:	41 f4       	brne	.+16     	; 0x88e <__vector_18+0x3c>
 87e:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <reception_index>
 882:	93 30       	cpi	r25, 0x03	; 3
 884:	21 f4       	brne	.+8      	; 0x88e <__vector_18+0x3c>
			frame_ready = 1;
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <frame_ready>
 88c:	0e c0       	rjmp	.+28     	; 0x8aa <__vector_18+0x58>
			} else if (reception_index < FRAME_SIZE) {
 88e:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <reception_index>
 892:	93 30       	cpi	r25, 0x03	; 3
 894:	50 f4       	brcc	.+20     	; 0x8aa <__vector_18+0x58>
			received_data[reception_index++] = data;
 896:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <reception_index>
 89a:	91 e0       	ldi	r25, 0x01	; 1
 89c:	9e 0f       	add	r25, r30
 89e:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <reception_index>
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	e1 5d       	subi	r30, 0xD1	; 209
 8a6:	fc 4f       	sbci	r31, 0xFC	; 252
 8a8:	80 83       	st	Z, r24
		}
	}
}
 8aa:	ff 91       	pop	r31
 8ac:	ef 91       	pop	r30
 8ae:	9f 91       	pop	r25
 8b0:	8f 91       	pop	r24
 8b2:	0f 90       	pop	r0
 8b4:	0f be       	out	0x3f, r0	; 63
 8b6:	0f 90       	pop	r0
 8b8:	1f 90       	pop	r1
 8ba:	18 95       	reti

000008bc <__udivmodsi4>:
 8bc:	a1 e2       	ldi	r26, 0x21	; 33
 8be:	1a 2e       	mov	r1, r26
 8c0:	aa 1b       	sub	r26, r26
 8c2:	bb 1b       	sub	r27, r27
 8c4:	fd 01       	movw	r30, r26
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <__udivmodsi4_ep>

000008c8 <__udivmodsi4_loop>:
 8c8:	aa 1f       	adc	r26, r26
 8ca:	bb 1f       	adc	r27, r27
 8cc:	ee 1f       	adc	r30, r30
 8ce:	ff 1f       	adc	r31, r31
 8d0:	a2 17       	cp	r26, r18
 8d2:	b3 07       	cpc	r27, r19
 8d4:	e4 07       	cpc	r30, r20
 8d6:	f5 07       	cpc	r31, r21
 8d8:	20 f0       	brcs	.+8      	; 0x8e2 <__udivmodsi4_ep>
 8da:	a2 1b       	sub	r26, r18
 8dc:	b3 0b       	sbc	r27, r19
 8de:	e4 0b       	sbc	r30, r20
 8e0:	f5 0b       	sbc	r31, r21

000008e2 <__udivmodsi4_ep>:
 8e2:	66 1f       	adc	r22, r22
 8e4:	77 1f       	adc	r23, r23
 8e6:	88 1f       	adc	r24, r24
 8e8:	99 1f       	adc	r25, r25
 8ea:	1a 94       	dec	r1
 8ec:	69 f7       	brne	.-38     	; 0x8c8 <__udivmodsi4_loop>
 8ee:	60 95       	com	r22
 8f0:	70 95       	com	r23
 8f2:	80 95       	com	r24
 8f4:	90 95       	com	r25
 8f6:	9b 01       	movw	r18, r22
 8f8:	ac 01       	movw	r20, r24
 8fa:	bd 01       	movw	r22, r26
 8fc:	cf 01       	movw	r24, r30
 8fe:	08 95       	ret

00000900 <__umulhisi3>:
 900:	a2 9f       	mul	r26, r18
 902:	b0 01       	movw	r22, r0
 904:	b3 9f       	mul	r27, r19
 906:	c0 01       	movw	r24, r0
 908:	a3 9f       	mul	r26, r19
 90a:	70 0d       	add	r23, r0
 90c:	81 1d       	adc	r24, r1
 90e:	11 24       	eor	r1, r1
 910:	91 1d       	adc	r25, r1
 912:	b2 9f       	mul	r27, r18
 914:	70 0d       	add	r23, r0
 916:	81 1d       	adc	r24, r1
 918:	11 24       	eor	r1, r1
 91a:	91 1d       	adc	r25, r1
 91c:	08 95       	ret

0000091e <__itoa_ncheck>:
 91e:	bb 27       	eor	r27, r27
 920:	4a 30       	cpi	r20, 0x0A	; 10
 922:	31 f4       	brne	.+12     	; 0x930 <__itoa_ncheck+0x12>
 924:	99 23       	and	r25, r25
 926:	22 f4       	brpl	.+8      	; 0x930 <__itoa_ncheck+0x12>
 928:	bd e2       	ldi	r27, 0x2D	; 45
 92a:	90 95       	com	r25
 92c:	81 95       	neg	r24
 92e:	9f 4f       	sbci	r25, 0xFF	; 255
 930:	0c 94 9b 04 	jmp	0x936	; 0x936 <__utoa_common>

00000934 <__utoa_ncheck>:
 934:	bb 27       	eor	r27, r27

00000936 <__utoa_common>:
 936:	fb 01       	movw	r30, r22
 938:	55 27       	eor	r21, r21
 93a:	aa 27       	eor	r26, r26
 93c:	88 0f       	add	r24, r24
 93e:	99 1f       	adc	r25, r25
 940:	aa 1f       	adc	r26, r26
 942:	a4 17       	cp	r26, r20
 944:	10 f0       	brcs	.+4      	; 0x94a <__utoa_common+0x14>
 946:	a4 1b       	sub	r26, r20
 948:	83 95       	inc	r24
 94a:	50 51       	subi	r21, 0x10	; 16
 94c:	b9 f7       	brne	.-18     	; 0x93c <__utoa_common+0x6>
 94e:	a0 5d       	subi	r26, 0xD0	; 208
 950:	aa 33       	cpi	r26, 0x3A	; 58
 952:	08 f0       	brcs	.+2      	; 0x956 <__utoa_common+0x20>
 954:	a9 5d       	subi	r26, 0xD9	; 217
 956:	a1 93       	st	Z+, r26
 958:	00 97       	sbiw	r24, 0x00	; 0
 95a:	79 f7       	brne	.-34     	; 0x93a <__utoa_common+0x4>
 95c:	b1 11       	cpse	r27, r1
 95e:	b1 93       	st	Z+, r27
 960:	11 92       	st	Z+, r1
 962:	cb 01       	movw	r24, r22
 964:	0c 94 b4 04 	jmp	0x968	; 0x968 <strrev>

00000968 <strrev>:
 968:	dc 01       	movw	r26, r24
 96a:	fc 01       	movw	r30, r24
 96c:	67 2f       	mov	r22, r23
 96e:	71 91       	ld	r23, Z+
 970:	77 23       	and	r23, r23
 972:	e1 f7       	brne	.-8      	; 0x96c <strrev+0x4>
 974:	32 97       	sbiw	r30, 0x02	; 2
 976:	04 c0       	rjmp	.+8      	; 0x980 <strrev+0x18>
 978:	7c 91       	ld	r23, X
 97a:	6d 93       	st	X+, r22
 97c:	70 83       	st	Z, r23
 97e:	62 91       	ld	r22, -Z
 980:	ae 17       	cp	r26, r30
 982:	bf 07       	cpc	r27, r31
 984:	c8 f3       	brcs	.-14     	; 0x978 <strrev+0x10>
 986:	08 95       	ret

00000988 <_exit>:
 988:	f8 94       	cli

0000098a <__stop_program>:
 98a:	ff cf       	rjmp	.-2      	; 0x98a <__stop_program>
